{
  "format_version": "1.2",
  "terraform_version": "1.5.7",
  "variables": {
    "eks_cluster_version": {
      "value": "1.32"
    },
    "name": {
      "value": "automode-cluster"
    },
    "private_subnet_ids": {
      "value": [
        "subnet-0ecf50090bf3a250d",
        "subnet-01db7a8f6e628d179",
        "subnet-0f09f7ba30b6d5ea6"
      ]
    },
    "region": {
      "value": "us-west-2"
    },
    "vpc_id": {
      "value": "vpc-06640a57cdad7c6ee"
    }
  },
  "planned_values": {
    "outputs": {
      "configure_kubectl": {
        "sensitive": false,
        "type": "string",
        "value": "aws eks --region us-west-2 update-kubeconfig --name automode-cluster"
      }
    },
    "root_module": {
      "resources": [
        {
          "address": "local_file.setup_gpu",
          "mode": "managed",
          "type": "local_file",
          "name": "setup_gpu",
          "provider_name": "registry.terraform.io/hashicorp/local",
          "schema_version": 0,
          "values": {
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./../nodepools/gpu-nodepool.yaml",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_values": {}
        },
        {
          "address": "local_file.setup_graviton",
          "mode": "managed",
          "type": "local_file",
          "name": "setup_graviton",
          "provider_name": "registry.terraform.io/hashicorp/local",
          "schema_version": 0,
          "values": {
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./../nodepools/graviton-nodepool.yaml",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_values": {}
        },
        {
          "address": "local_file.setup_neuron",
          "mode": "managed",
          "type": "local_file",
          "name": "setup_neuron",
          "provider_name": "registry.terraform.io/hashicorp/local",
          "schema_version": 0,
          "values": {
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./../nodepools/neuron-nodepool.yaml",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_values": {}
        },
        {
          "address": "local_file.setup_spot",
          "mode": "managed",
          "type": "local_file",
          "name": "setup_spot",
          "provider_name": "registry.terraform.io/hashicorp/local",
          "schema_version": 0,
          "values": {
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./../nodepools/spot-nodepool.yaml",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_values": {}
        },
        {
          "address": "null_resource.create_nodepools_dir",
          "mode": "managed",
          "type": "null_resource",
          "name": "create_nodepools_dir",
          "provider_name": "registry.terraform.io/hashicorp/null",
          "schema_version": 0,
          "values": {
            "triggers": null
          },
          "sensitive_values": {}
        }
      ],
      "child_modules": [
        {
          "resources": [
            {
              "address": "module.eks.aws_cloudwatch_log_group.this[0]",
              "mode": "managed",
              "type": "aws_cloudwatch_log_group",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "kms_key_id": null,
                "name": "/aws/eks/automode-cluster/cluster",
                "retention_in_days": 90,
                "skip_destroy": false,
                "tags": {
                  "Blueprint": "automode-cluster",
                  "Name": "/aws/eks/automode-cluster/cluster"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster",
                  "Name": "/aws/eks/automode-cluster/cluster"
                }
              },
              "sensitive_values": {
                "tags": {},
                "tags_all": {}
              }
            },
            {
              "address": "module.eks.aws_ec2_tag.cluster_primary_security_group[\"Blueprint\"]",
              "mode": "managed",
              "type": "aws_ec2_tag",
              "name": "cluster_primary_security_group",
              "index": "Blueprint",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "key": "Blueprint",
                "value": "automode-cluster"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_eks_access_entry.this[\"cluster_creator\"]",
              "mode": "managed",
              "type": "aws_eks_access_entry",
              "name": "this",
              "index": "cluster_creator",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "principal_arn": "arn:aws:iam::844333597536:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f",
                "tags": {
                  "Blueprint": "automode-cluster"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster"
                },
                "timeouts": null,
                "type": "STANDARD"
              },
              "sensitive_values": {
                "kubernetes_groups": [],
                "tags": {},
                "tags_all": {}
              }
            },
            {
              "address": "module.eks.aws_eks_access_policy_association.this[\"cluster_creator_admin\"]",
              "mode": "managed",
              "type": "aws_eks_access_policy_association",
              "name": "this",
              "index": "cluster_creator_admin",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "access_scope": [
                  {
                    "namespaces": null,
                    "type": "cluster"
                  }
                ],
                "policy_arn": "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy",
                "principal_arn": "arn:aws:iam::844333597536:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f",
                "timeouts": null
              },
              "sensitive_values": {
                "access_scope": [
                  {}
                ]
              }
            },
            {
              "address": "module.eks.aws_eks_cluster.this[0]",
              "mode": "managed",
              "type": "aws_eks_cluster",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 1,
              "values": {
                "access_config": [
                  {
                    "authentication_mode": "API_AND_CONFIG_MAP",
                    "bootstrap_cluster_creator_admin_permissions": false
                  }
                ],
                "bootstrap_self_managed_addons": false,
                "compute_config": [
                  {
                    "enabled": true,
                    "node_pools": [
                      "general-purpose",
                      "system"
                    ]
                  }
                ],
                "enabled_cluster_log_types": [
                  "api",
                  "audit",
                  "authenticator"
                ],
                "encryption_config": [
                  {
                    "provider": [
                      {}
                    ],
                    "resources": [
                      "secrets"
                    ]
                  }
                ],
                "force_update_version": null,
                "kubernetes_network_config": [
                  {
                    "elastic_load_balancing": [
                      {
                        "enabled": true
                      }
                    ],
                    "ip_family": "ipv4"
                  }
                ],
                "name": "automode-cluster",
                "outpost_config": [],
                "remote_network_config": [],
                "storage_config": [
                  {
                    "block_storage": [
                      {
                        "enabled": true
                      }
                    ]
                  }
                ],
                "tags": {
                  "Blueprint": "automode-cluster",
                  "terraform-aws-modules": "eks"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster",
                  "terraform-aws-modules": "eks"
                },
                "timeouts": {
                  "create": null,
                  "delete": null,
                  "update": null
                },
                "version": "1.32",
                "vpc_config": [
                  {
                    "endpoint_private_access": true,
                    "endpoint_public_access": true,
                    "public_access_cidrs": [
                      "0.0.0.0/0"
                    ],
                    "subnet_ids": [
                      "subnet-01db7a8f6e628d179",
                      "subnet-0ecf50090bf3a250d",
                      "subnet-0f09f7ba30b6d5ea6"
                    ]
                  }
                ],
                "zonal_shift_config": []
              },
              "sensitive_values": {
                "access_config": [
                  {}
                ],
                "certificate_authority": [],
                "compute_config": [
                  {
                    "node_pools": [
                      false,
                      false
                    ]
                  }
                ],
                "enabled_cluster_log_types": [
                  false,
                  false,
                  false
                ],
                "encryption_config": [
                  {
                    "provider": [
                      {}
                    ],
                    "resources": [
                      false
                    ]
                  }
                ],
                "identity": [],
                "kubernetes_network_config": [
                  {
                    "elastic_load_balancing": [
                      {}
                    ]
                  }
                ],
                "outpost_config": [],
                "remote_network_config": [],
                "storage_config": [
                  {
                    "block_storage": [
                      {}
                    ]
                  }
                ],
                "tags": {},
                "tags_all": {},
                "timeouts": {},
                "upgrade_policy": [],
                "vpc_config": [
                  {
                    "public_access_cidrs": [
                      false
                    ],
                    "security_group_ids": [],
                    "subnet_ids": [
                      false,
                      false,
                      false
                    ]
                  }
                ],
                "zonal_shift_config": []
              }
            },
            {
              "address": "module.eks.aws_iam_openid_connect_provider.oidc_provider[0]",
              "mode": "managed",
              "type": "aws_iam_openid_connect_provider",
              "name": "oidc_provider",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "client_id_list": [
                  "sts.amazonaws.com"
                ],
                "tags": {
                  "Blueprint": "automode-cluster",
                  "Name": "automode-cluster-eks-irsa"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster",
                  "Name": "automode-cluster-eks-irsa"
                }
              },
              "sensitive_values": {
                "client_id_list": [
                  false
                ],
                "tags": {},
                "tags_all": {},
                "thumbprint_list": []
              }
            },
            {
              "address": "module.eks.aws_iam_policy.cluster_encryption[0]",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "cluster_encryption",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "description": "Cluster encryption policy to allow cluster role to utilize CMK provided",
                "name_prefix": "automode-cluster-cluster-ClusterEncryption",
                "path": "/",
                "tags": {
                  "Blueprint": "automode-cluster"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster"
                }
              },
              "sensitive_values": {
                "tags": {},
                "tags_all": {}
              }
            },
            {
              "address": "module.eks.aws_iam_policy.custom[0]",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "custom",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "description": null,
                "name_prefix": "automode-cluster-cluster-",
                "path": "/",
                "policy": "{\"Statement\":[{\"Action\":[\"ec2:RunInstances\",\"ec2:CreateLaunchTemplate\",\"ec2:CreateFleet\"],\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"},\"StringLike\":{\"aws:RequestTag/eks:kubernetes-node-class-name\":\"*\",\"aws:RequestTag/eks:kubernetes-node-pool-name\":\"*\"}},\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"Compute\"},{\"Action\":[\"ec2:CreateVolume\",\"ec2:CreateSnapshot\"],\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}},\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:ec2:*:*:volume/*\",\"arn:aws:ec2:*:*:snapshot/*\"],\"Sid\":\"Storage\"},{\"Action\":\"ec2:CreateNetworkInterface\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\",\"aws:RequestTag/eks:kubernetes-cni-node-name\":\"*\"}},\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"Networking\"},{\"Action\":[\"elasticloadbalancing:CreateTargetGroup\",\"elasticloadbalancing:CreateRule\",\"elasticloadbalancing:CreateLoadBalancer\",\"elasticloadbalancing:CreateListener\",\"ec2:CreateSecurityGroup\"],\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}},\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"LoadBalancer\"},{\"Action\":\"shield:CreateProtection\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}},\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"ShieldProtection\"},{\"Action\":\"shield:TagResource\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}},\"Effect\":\"Allow\",\"Resource\":\"arn:aws:shield::*:protection/*\",\"Sid\":\"ShieldTagResource\"}],\"Version\":\"2012-10-17\"}",
                "tags": {
                  "Blueprint": "automode-cluster"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster"
                }
              },
              "sensitive_values": {
                "tags": {},
                "tags_all": {}
              }
            },
            {
              "address": "module.eks.aws_iam_role.eks_auto[0]",
              "mode": "managed",
              "type": "aws_iam_role",
              "name": "eks_auto",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "assume_role_policy": "{\"Statement\":[{\"Action\":[\"sts:TagSession\",\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Sid\":\"EKSAutoNodeAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                "description": null,
                "force_detach_policies": true,
                "max_session_duration": 3600,
                "name_prefix": "automode-cluster-eks-auto-",
                "path": "/",
                "permissions_boundary": null,
                "tags": {
                  "Blueprint": "automode-cluster"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster"
                }
              },
              "sensitive_values": {
                "inline_policy": [],
                "managed_policy_arns": [],
                "tags": {},
                "tags_all": {}
              }
            },
            {
              "address": "module.eks.aws_iam_role.this[0]",
              "mode": "managed",
              "type": "aws_iam_role",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "assume_role_policy": "{\"Statement\":[{\"Action\":[\"sts:TagSession\",\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"eks.amazonaws.com\"},\"Sid\":\"EKSClusterAssumeRole\"}],\"Version\":\"2012-10-17\"}",
                "description": null,
                "force_detach_policies": true,
                "max_session_duration": 3600,
                "name_prefix": "automode-cluster-cluster-",
                "path": "/",
                "permissions_boundary": null,
                "tags": {
                  "Blueprint": "automode-cluster"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster"
                }
              },
              "sensitive_values": {
                "inline_policy": [],
                "managed_policy_arns": [],
                "tags": {},
                "tags_all": {}
              }
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.cluster_encryption[0]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "cluster_encryption",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.custom[0]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "custom",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.eks_auto[\"AmazonEC2ContainerRegistryPullOnly\"]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "eks_auto",
              "index": "AmazonEC2ContainerRegistryPullOnly",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.eks_auto[\"AmazonEKSWorkerNodeMinimalPolicy\"]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "eks_auto",
              "index": "AmazonEKSWorkerNodeMinimalPolicy",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSBlockStoragePolicy\"]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "this",
              "index": "AmazonEKSBlockStoragePolicy",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSClusterPolicy\"]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "this",
              "index": "AmazonEKSClusterPolicy",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSComputePolicy\"]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "this",
              "index": "AmazonEKSComputePolicy",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSComputePolicy"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSLoadBalancingPolicy\"]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "this",
              "index": "AmazonEKSLoadBalancingPolicy",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSNetworkingPolicy\"]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "this",
              "index": "AmazonEKSNetworkingPolicy",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_security_group.cluster[0]",
              "mode": "managed",
              "type": "aws_security_group",
              "name": "cluster",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 1,
              "values": {
                "description": "EKS cluster security group",
                "name_prefix": "automode-cluster-cluster-",
                "revoke_rules_on_delete": false,
                "tags": {
                  "Blueprint": "automode-cluster",
                  "Name": "automode-cluster-cluster"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster",
                  "Name": "automode-cluster-cluster"
                },
                "timeouts": null,
                "vpc_id": "vpc-06640a57cdad7c6ee"
              },
              "sensitive_values": {
                "egress": [],
                "ingress": [],
                "tags": {},
                "tags_all": {}
              }
            },
            {
              "address": "module.eks.aws_security_group.node[0]",
              "mode": "managed",
              "type": "aws_security_group",
              "name": "node",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 1,
              "values": {
                "description": "EKS node shared security group",
                "name_prefix": "automode-cluster-node-",
                "revoke_rules_on_delete": false,
                "tags": {
                  "Blueprint": "automode-cluster",
                  "Name": "automode-cluster-node",
                  "kubernetes.io/cluster/automode-cluster": "owned"
                },
                "tags_all": {
                  "Blueprint": "automode-cluster",
                  "Name": "automode-cluster-node",
                  "kubernetes.io/cluster/automode-cluster": "owned"
                },
                "timeouts": null,
                "vpc_id": "vpc-06640a57cdad7c6ee"
              },
              "sensitive_values": {
                "egress": [],
                "ingress": [],
                "tags": {},
                "tags_all": {}
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.cluster[\"ingress_nodes_443\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "cluster",
              "index": "ingress_nodes_443",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Node groups to cluster API",
                "from_port": 443,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": null,
                "protocol": "tcp",
                "self": false,
                "timeouts": null,
                "to_port": 443,
                "type": "ingress"
              },
              "sensitive_values": {}
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"egress_all\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "egress_all",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "Allow all egress",
                "from_port": 0,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "-1",
                "self": false,
                "timeouts": null,
                "to_port": 0,
                "type": "egress"
              },
              "sensitive_values": {
                "cidr_blocks": [
                  false
                ],
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_443\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_cluster_443",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Cluster API to node groups",
                "from_port": 443,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "tcp",
                "self": false,
                "timeouts": null,
                "to_port": 443,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_4443_webhook\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_cluster_4443_webhook",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Cluster API to node 4443/tcp webhook",
                "from_port": 4443,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "tcp",
                "self": false,
                "timeouts": null,
                "to_port": 4443,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_6443_webhook\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_cluster_6443_webhook",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Cluster API to node 6443/tcp webhook",
                "from_port": 6443,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "tcp",
                "self": false,
                "timeouts": null,
                "to_port": 6443,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_8443_webhook\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_cluster_8443_webhook",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Cluster API to node 8443/tcp webhook",
                "from_port": 8443,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "tcp",
                "self": false,
                "timeouts": null,
                "to_port": 8443,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_9443_webhook\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_cluster_9443_webhook",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Cluster API to node 9443/tcp webhook",
                "from_port": 9443,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "tcp",
                "self": false,
                "timeouts": null,
                "to_port": 9443,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_kubelet\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_cluster_kubelet",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Cluster API to node kubelets",
                "from_port": 10250,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "tcp",
                "self": false,
                "timeouts": null,
                "to_port": 10250,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_nodes_ephemeral\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_nodes_ephemeral",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Node to node ingress on ephemeral ports",
                "from_port": 1025,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "tcp",
                "self": true,
                "timeouts": null,
                "to_port": 65535,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_self_coredns_tcp\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_self_coredns_tcp",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Node to node CoreDNS",
                "from_port": 53,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "tcp",
                "self": true,
                "timeouts": null,
                "to_port": 53,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.aws_security_group_rule.node[\"ingress_self_coredns_udp\"]",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "node",
              "index": "ingress_self_coredns_udp",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": "Node to node CoreDNS UDP",
                "from_port": 53,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": [],
                "protocol": "udp",
                "self": true,
                "timeouts": null,
                "to_port": 53,
                "type": "ingress"
              },
              "sensitive_values": {
                "prefix_list_ids": []
              }
            },
            {
              "address": "module.eks.data.tls_certificate.this[0]",
              "mode": "data",
              "type": "tls_certificate",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/tls",
              "schema_version": 0,
              "values": {
                "content": null,
                "verify_chain": null
              },
              "sensitive_values": {
                "certificates": []
              }
            },
            {
              "address": "module.eks.time_sleep.this[0]",
              "mode": "managed",
              "type": "time_sleep",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/time",
              "schema_version": 0,
              "values": {
                "create_duration": "30s",
                "destroy_duration": null,
                "triggers": {
                  "cluster_version": "1.32"
                }
              },
              "sensitive_values": {
                "triggers": {}
              }
            }
          ],
          "address": "module.eks",
          "child_modules": [
            {
              "resources": [
                {
                  "address": "module.eks.module.kms.aws_kms_alias.this[\"cluster\"]",
                  "mode": "managed",
                  "type": "aws_kms_alias",
                  "name": "this",
                  "index": "cluster",
                  "provider_name": "registry.terraform.io/hashicorp/aws",
                  "schema_version": 0,
                  "values": {
                    "name": "alias/eks/automode-cluster"
                  },
                  "sensitive_values": {}
                },
                {
                  "address": "module.eks.module.kms.aws_kms_key.this[0]",
                  "mode": "managed",
                  "type": "aws_kms_key",
                  "name": "this",
                  "index": 0,
                  "provider_name": "registry.terraform.io/hashicorp/aws",
                  "schema_version": 0,
                  "values": {
                    "bypass_policy_lockout_safety_check": false,
                    "custom_key_store_id": null,
                    "customer_master_key_spec": "SYMMETRIC_DEFAULT",
                    "deletion_window_in_days": null,
                    "description": "automode-cluster cluster encryption key",
                    "enable_key_rotation": true,
                    "is_enabled": true,
                    "key_usage": "ENCRYPT_DECRYPT",
                    "multi_region": false,
                    "tags": {
                      "Blueprint": "automode-cluster",
                      "terraform-aws-modules": "eks"
                    },
                    "tags_all": {
                      "Blueprint": "automode-cluster",
                      "terraform-aws-modules": "eks"
                    },
                    "timeouts": null,
                    "xks_key_id": null
                  },
                  "sensitive_values": {
                    "tags": {},
                    "tags_all": {}
                  }
                },
                {
                  "address": "module.eks.module.kms.data.aws_iam_policy_document.this[0]",
                  "mode": "data",
                  "type": "aws_iam_policy_document",
                  "name": "this",
                  "index": 0,
                  "provider_name": "registry.terraform.io/hashicorp/aws",
                  "schema_version": 0,
                  "values": {
                    "override_json": null,
                    "override_policy_documents": [],
                    "policy_id": null,
                    "source_json": null,
                    "source_policy_documents": [],
                    "statement": [
                      {
                        "actions": [
                          "kms:*"
                        ],
                        "condition": [],
                        "effect": null,
                        "not_actions": null,
                        "not_principals": [],
                        "not_resources": null,
                        "principals": [
                          {
                            "identifiers": [
                              "arn:aws:iam::844333597536:root"
                            ],
                            "type": "AWS"
                          }
                        ],
                        "resources": [
                          "*"
                        ],
                        "sid": "Default"
                      },
                      {
                        "actions": [
                          "kms:CancelKeyDeletion",
                          "kms:Create*",
                          "kms:Delete*",
                          "kms:Describe*",
                          "kms:Disable*",
                          "kms:Enable*",
                          "kms:Get*",
                          "kms:ImportKeyMaterial",
                          "kms:List*",
                          "kms:Put*",
                          "kms:ReplicateKey",
                          "kms:Revoke*",
                          "kms:ScheduleKeyDeletion",
                          "kms:TagResource",
                          "kms:UntagResource",
                          "kms:Update*"
                        ],
                        "condition": [],
                        "effect": null,
                        "not_actions": null,
                        "not_principals": [],
                        "not_resources": null,
                        "principals": [
                          {
                            "identifiers": [
                              "arn:aws:iam::844333597536:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f"
                            ],
                            "type": "AWS"
                          }
                        ],
                        "resources": [
                          "*"
                        ],
                        "sid": "KeyAdministration"
                      },
                      {
                        "actions": [
                          "kms:Decrypt",
                          "kms:DescribeKey",
                          "kms:Encrypt",
                          "kms:GenerateDataKey*",
                          "kms:ReEncrypt*"
                        ],
                        "condition": [],
                        "effect": null,
                        "not_actions": null,
                        "not_principals": [],
                        "not_resources": null,
                        "principals": [
                          {
                            "identifiers": [
                              null
                            ],
                            "type": "AWS"
                          }
                        ],
                        "resources": [
                          "*"
                        ],
                        "sid": "KeyUsage"
                      }
                    ],
                    "version": null
                  },
                  "sensitive_values": {
                    "override_policy_documents": [],
                    "source_policy_documents": [],
                    "statement": [
                      {
                        "actions": [
                          false
                        ],
                        "condition": [],
                        "not_principals": [],
                        "principals": [
                          {
                            "identifiers": [
                              false
                            ]
                          }
                        ],
                        "resources": [
                          false
                        ]
                      },
                      {
                        "actions": [
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false,
                          false
                        ],
                        "condition": [],
                        "not_principals": [],
                        "principals": [
                          {
                            "identifiers": [
                              false
                            ]
                          }
                        ],
                        "resources": [
                          false
                        ]
                      },
                      {
                        "actions": [
                          false,
                          false,
                          false,
                          false,
                          false
                        ],
                        "condition": [],
                        "not_principals": [],
                        "principals": [
                          {
                            "identifiers": [
                              false
                            ]
                          }
                        ],
                        "resources": [
                          false
                        ]
                      }
                    ]
                  }
                }
              ],
              "address": "module.eks.module.kms"
            }
          ]
        }
      ]
    }
  },
  "resource_changes": [
    {
      "address": "local_file.setup_gpu",
      "mode": "managed",
      "type": "local_file",
      "name": "setup_gpu",
      "provider_name": "registry.terraform.io/hashicorp/local",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "content_base64": null,
          "directory_permission": "0777",
          "file_permission": "0777",
          "filename": "./../nodepools/gpu-nodepool.yaml",
          "sensitive_content": null,
          "source": null
        },
        "after_unknown": {
          "content": true,
          "content_base64sha256": true,
          "content_base64sha512": true,
          "content_md5": true,
          "content_sha1": true,
          "content_sha256": true,
          "content_sha512": true,
          "id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "sensitive_content": true
        }
      }
    },
    {
      "address": "local_file.setup_graviton",
      "mode": "managed",
      "type": "local_file",
      "name": "setup_graviton",
      "provider_name": "registry.terraform.io/hashicorp/local",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "content_base64": null,
          "directory_permission": "0777",
          "file_permission": "0777",
          "filename": "./../nodepools/graviton-nodepool.yaml",
          "sensitive_content": null,
          "source": null
        },
        "after_unknown": {
          "content": true,
          "content_base64sha256": true,
          "content_base64sha512": true,
          "content_md5": true,
          "content_sha1": true,
          "content_sha256": true,
          "content_sha512": true,
          "id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "sensitive_content": true
        }
      }
    },
    {
      "address": "local_file.setup_neuron",
      "mode": "managed",
      "type": "local_file",
      "name": "setup_neuron",
      "provider_name": "registry.terraform.io/hashicorp/local",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "content_base64": null,
          "directory_permission": "0777",
          "file_permission": "0777",
          "filename": "./../nodepools/neuron-nodepool.yaml",
          "sensitive_content": null,
          "source": null
        },
        "after_unknown": {
          "content": true,
          "content_base64sha256": true,
          "content_base64sha512": true,
          "content_md5": true,
          "content_sha1": true,
          "content_sha256": true,
          "content_sha512": true,
          "id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "sensitive_content": true
        }
      }
    },
    {
      "address": "local_file.setup_spot",
      "mode": "managed",
      "type": "local_file",
      "name": "setup_spot",
      "provider_name": "registry.terraform.io/hashicorp/local",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "content_base64": null,
          "directory_permission": "0777",
          "file_permission": "0777",
          "filename": "./../nodepools/spot-nodepool.yaml",
          "sensitive_content": null,
          "source": null
        },
        "after_unknown": {
          "content": true,
          "content_base64sha256": true,
          "content_base64sha512": true,
          "content_md5": true,
          "content_sha1": true,
          "content_sha256": true,
          "content_sha512": true,
          "id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "sensitive_content": true
        }
      }
    },
    {
      "address": "null_resource.create_nodepools_dir",
      "mode": "managed",
      "type": "null_resource",
      "name": "create_nodepools_dir",
      "provider_name": "registry.terraform.io/hashicorp/null",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "triggers": null
        },
        "after_unknown": {
          "id": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.data.tls_certificate.this[0]",
      "module_address": "module.eks",
      "mode": "data",
      "type": "tls_certificate",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/tls",
      "change": {
        "actions": [
          "read"
        ],
        "before": null,
        "after": {
          "content": null,
          "verify_chain": null
        },
        "after_unknown": {
          "certificates": true,
          "id": true,
          "url": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "certificates": []
        }
      },
      "action_reason": "read_because_config_unknown"
    },
    {
      "address": "module.eks.aws_cloudwatch_log_group.this[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "kms_key_id": null,
          "name": "/aws/eks/automode-cluster/cluster",
          "retention_in_days": 90,
          "skip_destroy": false,
          "tags": {
            "Blueprint": "automode-cluster",
            "Name": "/aws/eks/automode-cluster/cluster"
          },
          "tags_all": {
            "Blueprint": "automode-cluster",
            "Name": "/aws/eks/automode-cluster/cluster"
          }
        },
        "after_unknown": {
          "arn": true,
          "id": true,
          "log_group_class": true,
          "name_prefix": true,
          "tags": {},
          "tags_all": {}
        },
        "before_sensitive": false,
        "after_sensitive": {
          "tags": {},
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.eks.aws_ec2_tag.cluster_primary_security_group[\"Blueprint\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_ec2_tag",
      "name": "cluster_primary_security_group",
      "index": "Blueprint",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "key": "Blueprint",
          "value": "automode-cluster"
        },
        "after_unknown": {
          "id": true,
          "resource_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_eks_access_entry.this[\"cluster_creator\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_eks_access_entry",
      "name": "this",
      "index": "cluster_creator",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "principal_arn": "arn:aws:iam::844333597536:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f",
          "tags": {
            "Blueprint": "automode-cluster"
          },
          "tags_all": {
            "Blueprint": "automode-cluster"
          },
          "timeouts": null,
          "type": "STANDARD"
        },
        "after_unknown": {
          "access_entry_arn": true,
          "cluster_name": true,
          "created_at": true,
          "id": true,
          "kubernetes_groups": true,
          "modified_at": true,
          "tags": {},
          "tags_all": {},
          "user_name": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "kubernetes_groups": [],
          "tags": {},
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.eks.aws_eks_access_policy_association.this[\"cluster_creator_admin\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_eks_access_policy_association",
      "name": "this",
      "index": "cluster_creator_admin",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "access_scope": [
            {
              "namespaces": null,
              "type": "cluster"
            }
          ],
          "policy_arn": "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy",
          "principal_arn": "arn:aws:iam::844333597536:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f",
          "timeouts": null
        },
        "after_unknown": {
          "access_scope": [
            {}
          ],
          "associated_at": true,
          "cluster_name": true,
          "id": true,
          "modified_at": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "access_scope": [
            {}
          ]
        }
      }
    },
    {
      "address": "module.eks.aws_eks_cluster.this[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_eks_cluster",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "access_config": [
            {
              "authentication_mode": "API_AND_CONFIG_MAP",
              "bootstrap_cluster_creator_admin_permissions": false
            }
          ],
          "bootstrap_self_managed_addons": false,
          "compute_config": [
            {
              "enabled": true,
              "node_pools": [
                "general-purpose",
                "system"
              ]
            }
          ],
          "enabled_cluster_log_types": [
            "api",
            "audit",
            "authenticator"
          ],
          "encryption_config": [
            {
              "provider": [
                {}
              ],
              "resources": [
                "secrets"
              ]
            }
          ],
          "force_update_version": null,
          "kubernetes_network_config": [
            {
              "elastic_load_balancing": [
                {
                  "enabled": true
                }
              ],
              "ip_family": "ipv4"
            }
          ],
          "name": "automode-cluster",
          "outpost_config": [],
          "remote_network_config": [],
          "storage_config": [
            {
              "block_storage": [
                {
                  "enabled": true
                }
              ]
            }
          ],
          "tags": {
            "Blueprint": "automode-cluster",
            "terraform-aws-modules": "eks"
          },
          "tags_all": {
            "Blueprint": "automode-cluster",
            "terraform-aws-modules": "eks"
          },
          "timeouts": {
            "create": null,
            "delete": null,
            "update": null
          },
          "version": "1.32",
          "vpc_config": [
            {
              "endpoint_private_access": true,
              "endpoint_public_access": true,
              "public_access_cidrs": [
                "0.0.0.0/0"
              ],
              "subnet_ids": [
                "subnet-01db7a8f6e628d179",
                "subnet-0ecf50090bf3a250d",
                "subnet-0f09f7ba30b6d5ea6"
              ]
            }
          ],
          "zonal_shift_config": []
        },
        "after_unknown": {
          "access_config": [
            {}
          ],
          "arn": true,
          "certificate_authority": true,
          "cluster_id": true,
          "compute_config": [
            {
              "node_pools": [
                false,
                false
              ],
              "node_role_arn": true
            }
          ],
          "created_at": true,
          "enabled_cluster_log_types": [
            false,
            false,
            false
          ],
          "encryption_config": [
            {
              "provider": [
                {
                  "key_arn": true
                }
              ],
              "resources": [
                false
              ]
            }
          ],
          "endpoint": true,
          "id": true,
          "identity": true,
          "kubernetes_network_config": [
            {
              "elastic_load_balancing": [
                {}
              ],
              "service_ipv4_cidr": true,
              "service_ipv6_cidr": true
            }
          ],
          "outpost_config": [],
          "platform_version": true,
          "remote_network_config": [],
          "role_arn": true,
          "status": true,
          "storage_config": [
            {
              "block_storage": [
                {}
              ]
            }
          ],
          "tags": {},
          "tags_all": {},
          "timeouts": {},
          "upgrade_policy": true,
          "vpc_config": [
            {
              "cluster_security_group_id": true,
              "public_access_cidrs": [
                false
              ],
              "security_group_ids": true,
              "subnet_ids": [
                false,
                false,
                false
              ],
              "vpc_id": true
            }
          ],
          "zonal_shift_config": []
        },
        "before_sensitive": false,
        "after_sensitive": {
          "access_config": [
            {}
          ],
          "certificate_authority": [],
          "compute_config": [
            {
              "node_pools": [
                false,
                false
              ]
            }
          ],
          "enabled_cluster_log_types": [
            false,
            false,
            false
          ],
          "encryption_config": [
            {
              "provider": [
                {}
              ],
              "resources": [
                false
              ]
            }
          ],
          "identity": [],
          "kubernetes_network_config": [
            {
              "elastic_load_balancing": [
                {}
              ]
            }
          ],
          "outpost_config": [],
          "remote_network_config": [],
          "storage_config": [
            {
              "block_storage": [
                {}
              ]
            }
          ],
          "tags": {},
          "tags_all": {},
          "timeouts": {},
          "upgrade_policy": [],
          "vpc_config": [
            {
              "public_access_cidrs": [
                false
              ],
              "security_group_ids": [],
              "subnet_ids": [
                false,
                false,
                false
              ]
            }
          ],
          "zonal_shift_config": []
        }
      }
    },
    {
      "address": "module.eks.aws_iam_openid_connect_provider.oidc_provider[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_openid_connect_provider",
      "name": "oidc_provider",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "client_id_list": [
            "sts.amazonaws.com"
          ],
          "tags": {
            "Blueprint": "automode-cluster",
            "Name": "automode-cluster-eks-irsa"
          },
          "tags_all": {
            "Blueprint": "automode-cluster",
            "Name": "automode-cluster-eks-irsa"
          }
        },
        "after_unknown": {
          "arn": true,
          "client_id_list": [
            false
          ],
          "id": true,
          "tags": {},
          "tags_all": {},
          "thumbprint_list": true,
          "url": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "client_id_list": [
            false
          ],
          "tags": {},
          "tags_all": {},
          "thumbprint_list": []
        }
      }
    },
    {
      "address": "module.eks.aws_iam_policy.cluster_encryption[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "cluster_encryption",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "Cluster encryption policy to allow cluster role to utilize CMK provided",
          "name_prefix": "automode-cluster-cluster-ClusterEncryption",
          "path": "/",
          "tags": {
            "Blueprint": "automode-cluster"
          },
          "tags_all": {
            "Blueprint": "automode-cluster"
          }
        },
        "after_unknown": {
          "arn": true,
          "attachment_count": true,
          "id": true,
          "name": true,
          "policy": true,
          "policy_id": true,
          "tags": {},
          "tags_all": {}
        },
        "before_sensitive": false,
        "after_sensitive": {
          "tags": {},
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.eks.aws_iam_policy.custom[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "custom",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": null,
          "name_prefix": "automode-cluster-cluster-",
          "path": "/",
          "policy": "{\"Statement\":[{\"Action\":[\"ec2:RunInstances\",\"ec2:CreateLaunchTemplate\",\"ec2:CreateFleet\"],\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"},\"StringLike\":{\"aws:RequestTag/eks:kubernetes-node-class-name\":\"*\",\"aws:RequestTag/eks:kubernetes-node-pool-name\":\"*\"}},\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"Compute\"},{\"Action\":[\"ec2:CreateVolume\",\"ec2:CreateSnapshot\"],\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}},\"Effect\":\"Allow\",\"Resource\":[\"arn:aws:ec2:*:*:volume/*\",\"arn:aws:ec2:*:*:snapshot/*\"],\"Sid\":\"Storage\"},{\"Action\":\"ec2:CreateNetworkInterface\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\",\"aws:RequestTag/eks:kubernetes-cni-node-name\":\"*\"}},\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"Networking\"},{\"Action\":[\"elasticloadbalancing:CreateTargetGroup\",\"elasticloadbalancing:CreateRule\",\"elasticloadbalancing:CreateLoadBalancer\",\"elasticloadbalancing:CreateListener\",\"ec2:CreateSecurityGroup\"],\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}},\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"LoadBalancer\"},{\"Action\":\"shield:CreateProtection\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}},\"Effect\":\"Allow\",\"Resource\":\"*\",\"Sid\":\"ShieldProtection\"},{\"Action\":\"shield:TagResource\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}},\"Effect\":\"Allow\",\"Resource\":\"arn:aws:shield::*:protection/*\",\"Sid\":\"ShieldTagResource\"}],\"Version\":\"2012-10-17\"}",
          "tags": {
            "Blueprint": "automode-cluster"
          },
          "tags_all": {
            "Blueprint": "automode-cluster"
          }
        },
        "after_unknown": {
          "arn": true,
          "attachment_count": true,
          "id": true,
          "name": true,
          "policy_id": true,
          "tags": {},
          "tags_all": {}
        },
        "before_sensitive": false,
        "after_sensitive": {
          "tags": {},
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.eks.aws_iam_role.eks_auto[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "eks_auto",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "assume_role_policy": "{\"Statement\":[{\"Action\":[\"sts:TagSession\",\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Sid\":\"EKSAutoNodeAssumeRole\"}],\"Version\":\"2012-10-17\"}",
          "description": null,
          "force_detach_policies": true,
          "max_session_duration": 3600,
          "name_prefix": "automode-cluster-eks-auto-",
          "path": "/",
          "permissions_boundary": null,
          "tags": {
            "Blueprint": "automode-cluster"
          },
          "tags_all": {
            "Blueprint": "automode-cluster"
          }
        },
        "after_unknown": {
          "arn": true,
          "create_date": true,
          "id": true,
          "inline_policy": true,
          "managed_policy_arns": true,
          "name": true,
          "tags": {},
          "tags_all": {},
          "unique_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "inline_policy": [],
          "managed_policy_arns": [],
          "tags": {},
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.eks.aws_iam_role.this[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "assume_role_policy": "{\"Statement\":[{\"Action\":[\"sts:TagSession\",\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"eks.amazonaws.com\"},\"Sid\":\"EKSClusterAssumeRole\"}],\"Version\":\"2012-10-17\"}",
          "description": null,
          "force_detach_policies": true,
          "max_session_duration": 3600,
          "name_prefix": "automode-cluster-cluster-",
          "path": "/",
          "permissions_boundary": null,
          "tags": {
            "Blueprint": "automode-cluster"
          },
          "tags_all": {
            "Blueprint": "automode-cluster"
          }
        },
        "after_unknown": {
          "arn": true,
          "create_date": true,
          "id": true,
          "inline_policy": true,
          "managed_policy_arns": true,
          "name": true,
          "tags": {},
          "tags_all": {},
          "unique_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "inline_policy": [],
          "managed_policy_arns": [],
          "tags": {},
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.cluster_encryption[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "cluster_encryption",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {},
        "after_unknown": {
          "id": true,
          "policy_arn": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.custom[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "custom",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {},
        "after_unknown": {
          "id": true,
          "policy_arn": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.eks_auto[\"AmazonEC2ContainerRegistryPullOnly\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "eks_auto",
      "index": "AmazonEC2ContainerRegistryPullOnly",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly"
        },
        "after_unknown": {
          "id": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.eks_auto[\"AmazonEKSWorkerNodeMinimalPolicy\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "eks_auto",
      "index": "AmazonEKSWorkerNodeMinimalPolicy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy"
        },
        "after_unknown": {
          "id": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSBlockStoragePolicy\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "this",
      "index": "AmazonEKSBlockStoragePolicy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy"
        },
        "after_unknown": {
          "id": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSClusterPolicy\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "this",
      "index": "AmazonEKSClusterPolicy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        },
        "after_unknown": {
          "id": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSComputePolicy\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "this",
      "index": "AmazonEKSComputePolicy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSComputePolicy"
        },
        "after_unknown": {
          "id": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSLoadBalancingPolicy\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "this",
      "index": "AmazonEKSLoadBalancingPolicy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy"
        },
        "after_unknown": {
          "id": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_iam_role_policy_attachment.this[\"AmazonEKSNetworkingPolicy\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "this",
      "index": "AmazonEKSNetworkingPolicy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy"
        },
        "after_unknown": {
          "id": true,
          "role": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_security_group.cluster[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "cluster",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "EKS cluster security group",
          "name_prefix": "automode-cluster-cluster-",
          "revoke_rules_on_delete": false,
          "tags": {
            "Blueprint": "automode-cluster",
            "Name": "automode-cluster-cluster"
          },
          "tags_all": {
            "Blueprint": "automode-cluster",
            "Name": "automode-cluster-cluster"
          },
          "timeouts": null,
          "vpc_id": "vpc-06640a57cdad7c6ee"
        },
        "after_unknown": {
          "arn": true,
          "egress": true,
          "id": true,
          "ingress": true,
          "name": true,
          "owner_id": true,
          "tags": {},
          "tags_all": {}
        },
        "before_sensitive": false,
        "after_sensitive": {
          "egress": [],
          "ingress": [],
          "tags": {},
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.eks.aws_security_group.node[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "node",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "EKS node shared security group",
          "name_prefix": "automode-cluster-node-",
          "revoke_rules_on_delete": false,
          "tags": {
            "Blueprint": "automode-cluster",
            "Name": "automode-cluster-node",
            "kubernetes.io/cluster/automode-cluster": "owned"
          },
          "tags_all": {
            "Blueprint": "automode-cluster",
            "Name": "automode-cluster-node",
            "kubernetes.io/cluster/automode-cluster": "owned"
          },
          "timeouts": null,
          "vpc_id": "vpc-06640a57cdad7c6ee"
        },
        "after_unknown": {
          "arn": true,
          "egress": true,
          "id": true,
          "ingress": true,
          "name": true,
          "owner_id": true,
          "tags": {},
          "tags_all": {}
        },
        "before_sensitive": false,
        "after_sensitive": {
          "egress": [],
          "ingress": [],
          "tags": {},
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.cluster[\"ingress_nodes_443\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "cluster",
      "index": "ingress_nodes_443",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Node groups to cluster API",
          "from_port": 443,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": null,
          "protocol": "tcp",
          "self": false,
          "timeouts": null,
          "to_port": 443,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"egress_all\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "egress_all",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": [
            "0.0.0.0/0"
          ],
          "description": "Allow all egress",
          "from_port": 0,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "-1",
          "self": false,
          "timeouts": null,
          "to_port": 0,
          "type": "egress"
        },
        "after_unknown": {
          "cidr_blocks": [
            false
          ],
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "cidr_blocks": [
            false
          ],
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_443\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_cluster_443",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Cluster API to node groups",
          "from_port": 443,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "tcp",
          "self": false,
          "timeouts": null,
          "to_port": 443,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_4443_webhook\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_cluster_4443_webhook",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Cluster API to node 4443/tcp webhook",
          "from_port": 4443,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "tcp",
          "self": false,
          "timeouts": null,
          "to_port": 4443,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_6443_webhook\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_cluster_6443_webhook",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Cluster API to node 6443/tcp webhook",
          "from_port": 6443,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "tcp",
          "self": false,
          "timeouts": null,
          "to_port": 6443,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_8443_webhook\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_cluster_8443_webhook",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Cluster API to node 8443/tcp webhook",
          "from_port": 8443,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "tcp",
          "self": false,
          "timeouts": null,
          "to_port": 8443,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_9443_webhook\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_cluster_9443_webhook",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Cluster API to node 9443/tcp webhook",
          "from_port": 9443,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "tcp",
          "self": false,
          "timeouts": null,
          "to_port": 9443,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_cluster_kubelet\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_cluster_kubelet",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Cluster API to node kubelets",
          "from_port": 10250,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "tcp",
          "self": false,
          "timeouts": null,
          "to_port": 10250,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_nodes_ephemeral\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_nodes_ephemeral",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Node to node ingress on ephemeral ports",
          "from_port": 1025,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "tcp",
          "self": true,
          "timeouts": null,
          "to_port": 65535,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_self_coredns_tcp\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_self_coredns_tcp",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Node to node CoreDNS",
          "from_port": 53,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "tcp",
          "self": true,
          "timeouts": null,
          "to_port": 53,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.aws_security_group_rule.node[\"ingress_self_coredns_udp\"]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "node",
      "index": "ingress_self_coredns_udp",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": "Node to node CoreDNS UDP",
          "from_port": 53,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": [],
          "protocol": "udp",
          "self": true,
          "timeouts": null,
          "to_port": 53,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "prefix_list_ids": [],
          "security_group_id": true,
          "security_group_rule_id": true,
          "source_security_group_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "prefix_list_ids": []
        }
      }
    },
    {
      "address": "module.eks.time_sleep.this[0]",
      "module_address": "module.eks",
      "mode": "managed",
      "type": "time_sleep",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/time",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "create_duration": "30s",
          "destroy_duration": null,
          "triggers": {
            "cluster_version": "1.32"
          }
        },
        "after_unknown": {
          "id": true,
          "triggers": {
            "cluster_certificate_authority_data": true,
            "cluster_endpoint": true,
            "cluster_name": true,
            "cluster_service_cidr": true
          }
        },
        "before_sensitive": false,
        "after_sensitive": {
          "triggers": {}
        }
      }
    },
    {
      "address": "module.eks.module.kms.data.aws_iam_policy_document.this[0]",
      "module_address": "module.eks.module.kms",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "read"
        ],
        "before": null,
        "after": {
          "override_json": null,
          "override_policy_documents": [],
          "policy_id": null,
          "source_json": null,
          "source_policy_documents": [],
          "statement": [
            {
              "actions": [
                "kms:*"
              ],
              "condition": [],
              "effect": null,
              "not_actions": null,
              "not_principals": [],
              "not_resources": null,
              "principals": [
                {
                  "identifiers": [
                    "arn:aws:iam::844333597536:root"
                  ],
                  "type": "AWS"
                }
              ],
              "resources": [
                "*"
              ],
              "sid": "Default"
            },
            {
              "actions": [
                "kms:CancelKeyDeletion",
                "kms:Create*",
                "kms:Delete*",
                "kms:Describe*",
                "kms:Disable*",
                "kms:Enable*",
                "kms:Get*",
                "kms:ImportKeyMaterial",
                "kms:List*",
                "kms:Put*",
                "kms:ReplicateKey",
                "kms:Revoke*",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:Update*"
              ],
              "condition": [],
              "effect": null,
              "not_actions": null,
              "not_principals": [],
              "not_resources": null,
              "principals": [
                {
                  "identifiers": [
                    "arn:aws:iam::844333597536:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f"
                  ],
                  "type": "AWS"
                }
              ],
              "resources": [
                "*"
              ],
              "sid": "KeyAdministration"
            },
            {
              "actions": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "condition": [],
              "effect": null,
              "not_actions": null,
              "not_principals": [],
              "not_resources": null,
              "principals": [
                {
                  "identifiers": [
                    null
                  ],
                  "type": "AWS"
                }
              ],
              "resources": [
                "*"
              ],
              "sid": "KeyUsage"
            }
          ],
          "version": null
        },
        "after_unknown": {
          "id": true,
          "json": true,
          "minified_json": true,
          "override_policy_documents": [],
          "source_policy_documents": [],
          "statement": [
            {
              "actions": [
                false
              ],
              "condition": [],
              "not_principals": [],
              "principals": [
                {
                  "identifiers": [
                    false
                  ]
                }
              ],
              "resources": [
                false
              ]
            },
            {
              "actions": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
              ],
              "condition": [],
              "not_principals": [],
              "principals": [
                {
                  "identifiers": [
                    false
                  ]
                }
              ],
              "resources": [
                false
              ]
            },
            {
              "actions": [
                false,
                false,
                false,
                false,
                false
              ],
              "condition": [],
              "not_principals": [],
              "principals": [
                {
                  "identifiers": [
                    true
                  ]
                }
              ],
              "resources": [
                false
              ]
            }
          ]
        },
        "before_sensitive": false,
        "after_sensitive": {
          "override_policy_documents": [],
          "source_policy_documents": [],
          "statement": [
            {
              "actions": [
                false
              ],
              "condition": [],
              "not_principals": [],
              "principals": [
                {
                  "identifiers": [
                    false
                  ]
                }
              ],
              "resources": [
                false
              ]
            },
            {
              "actions": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
              ],
              "condition": [],
              "not_principals": [],
              "principals": [
                {
                  "identifiers": [
                    false
                  ]
                }
              ],
              "resources": [
                false
              ]
            },
            {
              "actions": [
                false,
                false,
                false,
                false,
                false
              ],
              "condition": [],
              "not_principals": [],
              "principals": [
                {
                  "identifiers": [
                    false
                  ]
                }
              ],
              "resources": [
                false
              ]
            }
          ]
        }
      },
      "action_reason": "read_because_config_unknown"
    },
    {
      "address": "module.eks.module.kms.aws_kms_alias.this[\"cluster\"]",
      "module_address": "module.eks.module.kms",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "this",
      "index": "cluster",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "name": "alias/eks/automode-cluster"
        },
        "after_unknown": {
          "arn": true,
          "id": true,
          "name_prefix": true,
          "target_key_arn": true,
          "target_key_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.eks.module.kms.aws_kms_key.this[0]",
      "module_address": "module.eks.module.kms",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "bypass_policy_lockout_safety_check": false,
          "custom_key_store_id": null,
          "customer_master_key_spec": "SYMMETRIC_DEFAULT",
          "deletion_window_in_days": null,
          "description": "automode-cluster cluster encryption key",
          "enable_key_rotation": true,
          "is_enabled": true,
          "key_usage": "ENCRYPT_DECRYPT",
          "multi_region": false,
          "tags": {
            "Blueprint": "automode-cluster",
            "terraform-aws-modules": "eks"
          },
          "tags_all": {
            "Blueprint": "automode-cluster",
            "terraform-aws-modules": "eks"
          },
          "timeouts": null,
          "xks_key_id": null
        },
        "after_unknown": {
          "arn": true,
          "id": true,
          "key_id": true,
          "policy": true,
          "rotation_period_in_days": true,
          "tags": {},
          "tags_all": {}
        },
        "before_sensitive": false,
        "after_sensitive": {
          "tags": {},
          "tags_all": {}
        }
      }
    }
  ],
  "output_changes": {
    "configure_kubectl": {
      "actions": [
        "create"
      ],
      "before": null,
      "after": "aws eks --region us-west-2 update-kubeconfig --name automode-cluster",
      "after_unknown": false,
      "before_sensitive": false,
      "after_sensitive": false
    }
  },
  "prior_state": {
    "format_version": "1.0",
    "terraform_version": "1.5.7",
    "values": {
      "outputs": {
        "configure_kubectl": {
          "sensitive": false,
          "value": "aws eks --region us-west-2 update-kubeconfig --name automode-cluster",
          "type": "string"
        }
      },
      "root_module": {
        "resources": [
          {
            "address": "data.aws_availability_zones.available",
            "mode": "data",
            "type": "aws_availability_zones",
            "name": "available",
            "provider_name": "registry.terraform.io/hashicorp/aws",
            "schema_version": 0,
            "values": {
              "all_availability_zones": null,
              "exclude_names": null,
              "exclude_zone_ids": null,
              "filter": [
                {
                  "name": "opt-in-status",
                  "values": [
                    "opt-in-not-required"
                  ]
                }
              ],
              "group_names": [
                "us-west-2-zg-1"
              ],
              "id": "us-west-2",
              "names": [
                "us-west-2a",
                "us-west-2b",
                "us-west-2c",
                "us-west-2d"
              ],
              "state": null,
              "timeouts": null,
              "zone_ids": [
                "usw2-az2",
                "usw2-az1",
                "usw2-az3",
                "usw2-az4"
              ]
            },
            "sensitive_values": {
              "filter": [
                {
                  "values": [
                    false
                  ]
                }
              ],
              "group_names": [
                false
              ],
              "names": [
                false,
                false,
                false,
                false
              ],
              "zone_ids": [
                false,
                false,
                false,
                false
              ]
            }
          },
          {
            "address": "data.aws_ecrpublic_authorization_token.token",
            "mode": "data",
            "type": "aws_ecrpublic_authorization_token",
            "name": "token",
            "provider_name": "registry.terraform.io/hashicorp/aws",
            "schema_version": 0,
            "values": {
              "authorization_token": "QVdTOmV5SndZWGxzYjJGa0lqb2libEJZSzFNeVIzbHVjR0Z2TWxoMGFHRnJUbWwwVm05Rk1TdEdhRzB3ZGpOT1NHeHBZVkJIY0d4T04xcFFOek52VEhOd2EwdHVVRVZCS3pVMlFqTkxkMlV5THpScWVEWm1kRlJaWlVSMlpVWjFaM0J1TlZkNmJEZE9kWFJQYnpGUFNISklkV05qWVZBclZVWTBVRmhKUjNKeWJVWmFkVk5oVmpGeGNtSk1TbkJMTTFSclV6TXJiWFUySzNablluRTJVRFV4VVdkbmNqUm9iblk1Wm1wcFNWZEpOVFlyVkdKU1JHbFViVVJSYlhaMk1XcEdNekJRTmxCaWJYUXhiVmd2V1dwclNsaFRlakJQUmpOMk5HSkVZbkpLYjBKa0wwaFRURll6VW5CS2FFTnFSVkJUTnpaSVpVbFdXWHBIT0c5QmVuUTFUM3BtZW1SQ1kwRnlOM2RVWm5kaWFXaFFhRzVxZDJod1FqbHlhM0kwWlVSUVpHOTZLMlZqVkRnMGJXOTNUWGRtVkdaeUwwTlJhVmxJUTJodmJDOTJaek5XVFdSRVkzWlBXWFpzUm00eVVrRTNSR1pNYjFCNlZXMVdUMk1yY1RWUllXMUVjMkZDWVRnMWNVUnVZbmd4VG5CMlZubDJlbVZvUTNkRlRtZG1aVFpGT1ZkSlJFcGpSbWQwWkd3NFVIUkZaRmRPYTNweFVXaGpVamR5TUVkUE5sZDRWMUpDYms5WVUyZzNaa3RPTURkak1GVk5UbEpQVFdsVVIzQTRWV1J1TUU5b2FqbHZLeTlHYjBnckx6a3JjMVpUWlhKTE5HeFlMMVJqVmt0a1ZsUlFaRGhwUWxwaU1YQkxNRFpFU0dwSFZYb3lSMXBRUm04NVdqVkdkUzlNYzB4U1MxUk9WRWxZVDNBNU9EaE9lbXdyTlZobVpuUlRZamh6VTNVMFppOWxOMmxFV25Sak0zcDRSMk5SYnpBME5ITldWU3ROUlU5eU5IaE1aVkZvWjNGSVRIVm5jaXRSVEcxMFZqSTNla2s0UW5sTmFGTjNNWFpMY2xSMmJVcGtlbW8yVUhWS2MxQnRlRXhVYlRVeVNuTmtaMWtyYVVkU1JEaGpUMHhUU1hoR1QxWkdaSEkxTlhSd01rRlhVR3MyZG1WaVJFb3JjRzk0TDBWRk0zTndlVEpzYUU1UVdIQlpTblEwYTFwWVRteG1MM3BGYkhKcE5YTkxSa0ZPYUU5TGRVTlJRWGR2VjBkUGRGWjJMemhYWXpVdk5rSjBXblozTTBoQlN6TnhTMmRvZWxZMU4zTkdaemhDWmswdk5GRTFTSEJPVWxSbGRHSkRWMWx4WWpVNVZYUXZXSGh0YkZWaWJHcG1SVWN6Wm5kd1p6a3pURUZuTURaMVNuaFhZemhTY0VwUE1uaFFZbXh3ZWtkWmNpc3JVMnRRVkdveWRETnZXVmRyT1c4emRTOVRUMmN3YTFSSWFTdFZUSGgxVEVSVk5VVkdSRmRwVUZjNFdHcFZVMFpoZHpabmIxaHZNMjVGU25ab1ZVbFNTQzh6TlNzNFlrTnRNMXB5Y2s1Nk9IWnFVMmh0YlZocVlUQTNVM0ozZW01M1dtTnRZbGxOZFZacEwzZFdiVllyYUZCMlowNXlabFJ4Wlhaa1lXaHFTM0JIVDNObmVVUTRVek5IUmpsTGVVWmxkbnBsVVc4eWNXUXZaVGRJUVVRd1VrNU5TSE4xU0hwUk1WQlhZU3N5VTJoRldWUnFUMU5JY0RCVVMxWk1NV2xMZGs1MWNHZEpiV3d5Vkd0SmMydGlWWGg0ZFZsS01Ua3pSREJMVDJoc2JrczBaMXBCV2taWFdVTldhVE5VYVdkMGNqZHdMMWxxTjNOUE5XRXhTMVJaTW0xWmRtRnBTMGRHVmpaaFpURlpPR1pQVWtOYVZrcFlkVE5YVm5Wdk5uVjRZblZyZDBsT2JreEJRV3cwYm1oclZ6SXhkbUpFVGpkMGNVcEVjamwyT0d0UFdVcFJjVTlEUzFWR1lTOURMelZuZG5nemEweFZRVUpqWTJRM04xTTNhMngwWVhKVVFXeFliemx6UjJKQ1pFWnBRMVpuVm1jNFQwZEtRV3AwWWxSQll6bFlVbVZ1VXpSbWJubG9TRVZrZW5CMVZXWk1NemhxVTJaaE0ydEJVbFpuV0hWaVlXdGtRVWcxUjFVM1QySlFPVlZLU0RsQ2RXRmlVRTFtVUdjdlpqZGpZVTVZUTJ0UFNXTkhaWGw0TkZOMk1qVlNjR2c1VVZkaU5HMVJaREZ0WjBkd0sxQjBkbUZFTUZSMGRYVXlkblpyVUZOU1JIVkViV041UzBReVQzVlNNa3BrVUhSaGJUTllkVzh5ZFhOeGRtNUNWMFZNVFVSdlpWTkZSamd3V0haSlNuTkxXbHBNUXpWemJXbHNlSGRQVEdsMFFsRjJRbmxxY1Zkc2JFZEdaWEJoTUd0Vk5Hc3dZMmhtTmtKTFVESXdlV2hIUm10MGNFUlJUa1FyUWtSRU1Ua3hLMUU5SWl3aVpHRjBZV3RsZVNJNkltVjVTbEZTUm1kcFQybEtWMWw2VFROTWVteDNUVE5KTTJSWGVIbFBWRnBwVkVSU1lWSXlhSGxsYWxaclQwWkdXRTFJUVhaaWJURlJWVVpvVlZSclRURmtNREV4WWxac1IxUlZXbEZrVjBaVFQwVjRRbEZVVW1sV01rWkNVV3hzTms5RlNURlJWMmh6WlZaS00xVnVhRkZSV0ZweVUwZE9TRk5XWXpOT1JYaFlZVEk1V1dSVVNtNU5SMFpYWWtNNVJWUXpWWEpsYTJ4U1YxZHNVMVF5WkhOVVNGWnVUbXBzTVZaWFRuUk5WVVpFWTFVNVZrNHdhRXRhVTNSVFlrUktVMU42VGxKVE0wSlpZM3BzVFZGWFNURk1lbFpyVjI1V2JGSklXak5UV0hCMVpHMDViVkl3TVVWUmJFb3pWbGRrVG1WclJYcGFSa0p3VWtkT2RXUllaREprUkZwM1RrWnNWRXd6U2t4bFdGb3hWbGhDZVZkc1NtMU5NMFV3VVd0dmQxcHRNVlZPYlRrMllteG9TRk5JVW10U2JHaHVUakZXVTAxWGRHOU9iVEZwVTI1a2JtSnJTbWhUVjJSTVlqQTVUVkZWY0ZWTk1XaElXV3BDTUZJd2F6UkxNVVp5VWtkV2VWcEZhRFZrUjI4MVVsVldXRkV5TlRaTmJVcDVURE5HUms5VWFHaFZNVVpOVVRKNGVsSjZRVE5YYmtreVpVVldSVk50Y3pSaFZWa3hZV3RHYzA5V1ozaFZWM2Q1V1hwU1lXRnRTWHBXTUZaUldrTjBkMVpyT1U1U1ZFcFNWbXBXTUUxRVVuTlpNSGMwWVRGRk9WQlRTWE5KYTJ4Q1VrTkpOa2xyTlZwVGJYUkVUa2h3VFZaSVdqQlpibG94Wlc1Q2JsTkliRFJYUnpsUVdtNUZlbE5YWkhWVFJsSkpWbXRaY2xkcVRtcFdhMmhHVDFOMFNFMXRhRmxUUm14eVltNW9kRmRzVGs5ak0yUjBUbTFhYVUxNldsTlZSWGhxWTJ4WmNrdDZXVE5YVlZZeFYxWk5kbU14V1RGVVZtaDVWVEZ3TmxZd1VtOVJNa294VFZoQ1RsSllWa2hXYlRCNVN6Rm9hR1JXVWtkWGFscERWV3R3Y21WR2FGaGlibXQ2Vm10R1EwNVVWa3BPU0ZKS1RUQXhkVlZZUW0xV01FNDFZbFZ6TTFOdE5XRldSVFZOVm5wQ1ZscFVaRWRVUkVwWlVrWndSMkZFUWpOVVNFSlVXVEE1Vm1RelVuTmxSV2cwVFc1c2MxVlhhelZMZVhSVVZsVXhkMVpHVm14aFYyeEZVa1pvYzFSVmJIWk9NR2hJVlZaT1JXRlZWbFpoVlVZMVVUSXhSbFJVVW05TlZsSjRXV3BzVTFadVNrZGlSRkpvVkRKek1GVnRVak5VVlRsQ1kydGthbFJzVG5OV1Z6UjRZM3BDVVZJeGNGaFZWa3BPV20xUk5GcHVTbmhaTW1jMVZESjBSRkZyVFhoTU1HeHBWVzFXZEZacmRGbE9hbFp0VFVaR2FWTnJWbXRoUjNneVRtMUdjMHN6U25sT01IaFNWMnRrU1ZSVlNrUlJlbHBYV1d4YWRWWlRPVXBqTTFaNVRtMDVXVk5zVWpWaGF6bDZVVlJaTTFWc1VtbE5WMHBvWlZWYVNWVlVNRGxKYmpBOUlpd2lkbVZ5YzJsdmJpSTZJak1pTENKMGVYQmxJam9pUkVGVVFWOUxSVmtpTENKbGVIQnBjbUYwYVc5dUlqb3hOelE0TXpReE5EY3hmUT09",
              "expires_at": "2025-05-27T10:24:31Z",
              "id": "us-east-1",
              "password": "eyJwYXlsb2FkIjoiblBYK1MyR3lucGFvMlh0aGFrTml0Vm9FMStGaG0wdjNOSGxpYVBHcGxON1pQNzNvTHNwa0tuUEVBKzU2QjNLd2UyLzRqeDZmdFRZZUR2ZUZ1Z3BuNVd6bDdOdXRPbzFPSHJIdWNjYVArVUY0UFhJR3JybUZadVNhVjFxcmJMSnBLM1RrUzMrbXU2K3ZnYnE2UDUxUWdncjRobnY5ZmppSVdJNTYrVGJSRGlUbURRbXZ2MWpGMzBQNlBibXQxbVgvWWprSlhTejBPRjN2NGJEYnJKb0JkL0hTTFYzUnBKaENqRVBTNzZIZUlWWXpHOG9BenQ1T3pmemRCY0FyN3dUZndiaWhQaG5qd2hwQjlya3I0ZURQZG96K2VjVDg0bW93TXdmVGZyL0NRaVlIQ2hvbC92ZzNWTWREY3ZPWXZsRm4yUkE3RGZMb1B6VW1WT2MrcTVRYW1Ec2FCYTg1cURuYngxTnB2Vnl2emVoQ3dFTmdmZTZFOVdJREpjRmd0ZGw4UHRFZFdOa3pxUWhjUjdyMEdPNld4V1JCbk9YU2g3ZktOMDdjMFVNTlJPTWlUR3A4VWRuME9oajlvKy9Gb0grLzkrc1ZTZXJLNGxYL1RjVktkVlRQZDhpQlpiMXBLMDZESGpHVXoyR1pQRm85WjVGdS9Mc0xSS1ROVElYT3A5ODhOemwrNVhmZnRTYjhzU3U0Zi9lN2lEWnRjM3p4R2NRbzA0NHNWVStNRU9yNHhMZVFoZ3FITHVncitRTG10VjI3ekk4QnlNaFN3MXZLclR2bUpkemo2UHVKc1BteExUbTUySnNkZ1kraUdSRDhjT0xTSXhGT1ZGZHI1NXRwMkFXUGs2dmViREorcG94L0VFM3NweTJsaE5QWHBZSnQ0a1pYTmxmL3pFbHJpNXNLRkFOaE9LdUNRQXdvV0dPdFZ2LzhXYzUvNkJ0WnZ3M0hBSzNxS2doelY1N3NGZzhCZk0vNFE1SHBOUlRldGJDV1lxYjU5VXQvWHhtbFVibGpmRUczZndwZzkzTEFnMDZ1SnhXYzhScEpPMnhQYmxwekdZcisrU2tQVGoydDNvWVdrOW8zdS9TT2cwa1RIaStVTHh1TERVNUVGRFdpUFc4WGpVU0ZhdzZnb1hvM25FSnZoVUlSSC8zNSs4YkNtM1pyck56OHZqU2htbVhqYTA3U3J3em53WmNtYllNdVZpL3dWbVYraFB2Z05yZlRxZXZkYWhqS3BHT3NneUQ4UzNHRjlLeUZldnplUW8ycWQvZTdIQUQwUk5NSHN1SHpRMVBXYSsyU2hFWVRqT1NIcDBUS1ZMMWlLdk51cGdJbWwyVGtJc2tiVXh4dVlKMTkzRDBLT2hsbks0Z1pBWkZXWUNWaTNUaWd0cjdwL1lqN3NPNWExS1RZMm1ZdmFpS0dGVjZhZTFZOGZPUkNaVkpYdTNXVnVvNnV4YnVrd0lObkxBQWw0bmhrVzIxdmJETjd0cUpEcjl2OGtPWUpRcU9DS1VGYS9DLzVndngza0xVQUJjY2Q3N1M3a2x0YXJUQWxYbzlzR2JCZEZpQ1ZnVmc4T0dKQWp0YlRBYzlYUmVuUzRmbnloSEVkenB1VWZMMzhqU2ZhM2tBUlZnWHViYWtkQUg1R1U3T2JQOVVKSDlCdWFiUE1mUGcvZjdjYU5YQ2tPSWNHZXl4NFN2MjVScGg5UVdiNG1RZDFtZ0dwK1B0dmFEMFR0dXUydnZrUFNSRHVEbWN5S0QyT3VSMkpkUHRhbTNYdW8ydXNxdm5CV0VMTURvZVNFRjgwWHZJSnNLWlpMQzVzbWlseHdPTGl0QlF2QnlqcVdsbEdGZXBhMGtVNGswY2hmNkJLUDIweWhHRmt0cERRTkQrQkREMTkxK1E9IiwiZGF0YWtleSI6ImV5SlFSRmdpT2lKV1l6TTNMemx3TTNJM2RXeHlPVFppVERSYVIyaHllalZrT0ZGWE1IQXZibTFRVUZoVVRrTTFkMDExYlZsR1RVWlFkV0ZTT0V4QlFUUmlWMkZCUWxsNk9FSTFRV2hzZVZKM1VuaFFRWFpyU0dOSFNWYzNORXhYYTI5WWRUSm5NR0ZXYkM5RVQzVXJla2xSV1dsU1QyZHNUSFZuTmpsMVZXTnRNVUZEY1U5Vk4waEtaU3RTYkRKU1N6TlJTM0JZY3psTVFXSTFMelZrV25WbFJIWjNTWHB1ZG05bVIwMUVRbEozVldkTmVrRXpaRkJwUkdOdWRYZDJkRFp3TkZsVEwzSkxlWFoxVlhCeVdsSm1NM0UwUWtvd1ptMVVObTk2YmxoSFNIUmtSbGhuTjFWU01XdG9ObTFpU25kbmJrSmhTV2RMYjA5TVFVcFVNMWhIWWpCMFIwazRLMUZyUkdWeVpFaDVkR281UlVWWFEyNTZNbUp5TDNGRk9UaGhVMUZNUTJ4elJ6QTNXbkkyZUVWRVNtczRhVVkxYWtGc09WZ3hVV3d5WXpSYWFtSXpWMFZRWkN0d1ZrOU5SVEpSVmpWME1EUnNZMHc0YTFFOVBTSXNJa2xCUkNJNklrNVpTbXRETkhwTVZIWjBZbloxZW5CblNIbDRXRzlQWm5FelNXZHVTRlJJVmtZcldqTmpWa2hGT1N0SE1taFlTRmxyYm5odFdsTk9jM2R0Tm1aaU16WlNVRXhqY2xZckt6WTNXVVYxV1ZNdmMxWTFUVmh5VTFwNlYwUm9RMkoxTVhCTlJYVkhWbTB5SzFoaGRWUkdXalpDVWtwcmVGaFhibmt6VmtGQ05UVkpOSFJKTTAxdVVYQm1WME41YlVzM1NtNWFWRTVNVnpCVlpUZEdUREpZUkZwR2FEQjNUSEJUWTA5VmQzUnNlRWg0TW5sc1VXazVLeXRUVlUxd1ZGVmxhV2xFUkZoc1RVbHZOMGhIVVZORWFVVlZhVUY1UTIxRlRUUm9NVlJ4WWpsU1ZuSkdiRFJoVDJzMFVtUjNUVTlCY2tkalRsTnNWVzR4Y3pCUVIxcFhVVkpOWm1RNFpuSnhZMmc1VDJ0RFFrTXhMMGxpVW1WdFZrdFlOalZtTUZGaVNrVmthR3gyTm1Gc0szSnlOMHhSV2tkSVRVSkRRelpXWWxadVZTOUpjM1Z5Tm05WVNsUjVhazl6UVRZM1VsUmlNV0poZVVaSVVUMDlJbjA9IiwidmVyc2lvbiI6IjMiLCJ0eXBlIjoiREFUQV9LRVkiLCJleHBpcmF0aW9uIjoxNzQ4MzQxNDcxfQ==",
              "user_name": "AWS"
            },
            "sensitive_values": {
              "authorization_token": true,
              "password": true
            }
          }
        ],
        "child_modules": [
          {
            "resources": [
              {
                "address": "module.eks.data.aws_caller_identity.current[0]",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "index": 0,
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "account_id": "844333597536",
                  "arn": "arn:aws:sts::844333597536:assumed-role/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f/jim@nirmata.com",
                  "id": "844333597536",
                  "user_id": "AROA4JFRUINQPJLRF3ZGH:jim@nirmata.com"
                },
                "sensitive_values": {}
              },
              {
                "address": "module.eks.data.aws_iam_policy_document.assume_role_policy[0]",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "assume_role_policy",
                "index": 0,
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "id": "2830595799",
                  "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"EKSClusterAssumeRole\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"sts:TagSession\",\n        \"sts:AssumeRole\"\n      ],\n      \"Principal\": {\n        \"Service\": \"eks.amazonaws.com\"\n      }\n    }\n  ]\n}",
                  "minified_json": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"EKSClusterAssumeRole\",\"Effect\":\"Allow\",\"Action\":[\"sts:TagSession\",\"sts:AssumeRole\"],\"Principal\":{\"Service\":\"eks.amazonaws.com\"}}]}",
                  "override_json": null,
                  "override_policy_documents": null,
                  "policy_id": null,
                  "source_json": null,
                  "source_policy_documents": null,
                  "statement": [
                    {
                      "actions": [
                        "sts:AssumeRole",
                        "sts:TagSession"
                      ],
                      "condition": [],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [
                        {
                          "identifiers": [
                            "eks.amazonaws.com"
                          ],
                          "type": "Service"
                        }
                      ],
                      "resources": [],
                      "sid": "EKSClusterAssumeRole"
                    }
                  ],
                  "version": "2012-10-17"
                },
                "sensitive_values": {
                  "statement": [
                    {
                      "actions": [
                        false,
                        false
                      ],
                      "condition": [],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [
                        {
                          "identifiers": [
                            false
                          ]
                        }
                      ],
                      "resources": []
                    }
                  ]
                }
              },
              {
                "address": "module.eks.data.aws_iam_policy_document.custom[0]",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "custom",
                "index": 0,
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "id": "513122117",
                  "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Compute\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:RunInstances\",\n        \"ec2:CreateLaunchTemplate\",\n        \"ec2:CreateFleet\"\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:RequestTag/eks:eks-cluster-name\": \"${aws:PrincipalTag/eks:eks-cluster-name}\"\n        },\n        \"StringLike\": {\n          \"aws:RequestTag/eks:kubernetes-node-class-name\": \"*\",\n          \"aws:RequestTag/eks:kubernetes-node-pool-name\": \"*\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"Storage\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:CreateVolume\",\n        \"ec2:CreateSnapshot\"\n      ],\n      \"Resource\": [\n        \"arn:aws:ec2:*:*:volume/*\",\n        \"arn:aws:ec2:*:*:snapshot/*\"\n      ],\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:RequestTag/eks:eks-cluster-name\": \"${aws:PrincipalTag/eks:eks-cluster-name}\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"Networking\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:CreateNetworkInterface\",\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:RequestTag/eks:eks-cluster-name\": \"${aws:PrincipalTag/eks:eks-cluster-name}\",\n          \"aws:RequestTag/eks:kubernetes-cni-node-name\": \"*\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"LoadBalancer\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"elasticloadbalancing:CreateTargetGroup\",\n        \"elasticloadbalancing:CreateRule\",\n        \"elasticloadbalancing:CreateLoadBalancer\",\n        \"elasticloadbalancing:CreateListener\",\n        \"ec2:CreateSecurityGroup\"\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:RequestTag/eks:eks-cluster-name\": \"${aws:PrincipalTag/eks:eks-cluster-name}\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"ShieldProtection\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"shield:CreateProtection\",\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:RequestTag/eks:eks-cluster-name\": \"${aws:PrincipalTag/eks:eks-cluster-name}\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"ShieldTagResource\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"shield:TagResource\",\n      \"Resource\": \"arn:aws:shield::*:protection/*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:RequestTag/eks:eks-cluster-name\": \"${aws:PrincipalTag/eks:eks-cluster-name}\"\n        }\n      }\n    }\n  ]\n}",
                  "minified_json": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"Compute\",\"Effect\":\"Allow\",\"Action\":[\"ec2:RunInstances\",\"ec2:CreateLaunchTemplate\",\"ec2:CreateFleet\"],\"Resource\":\"*\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"},\"StringLike\":{\"aws:RequestTag/eks:kubernetes-node-class-name\":\"*\",\"aws:RequestTag/eks:kubernetes-node-pool-name\":\"*\"}}},{\"Sid\":\"Storage\",\"Effect\":\"Allow\",\"Action\":[\"ec2:CreateVolume\",\"ec2:CreateSnapshot\"],\"Resource\":[\"arn:aws:ec2:*:*:volume/*\",\"arn:aws:ec2:*:*:snapshot/*\"],\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}}},{\"Sid\":\"Networking\",\"Effect\":\"Allow\",\"Action\":\"ec2:CreateNetworkInterface\",\"Resource\":\"*\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\",\"aws:RequestTag/eks:kubernetes-cni-node-name\":\"*\"}}},{\"Sid\":\"LoadBalancer\",\"Effect\":\"Allow\",\"Action\":[\"elasticloadbalancing:CreateTargetGroup\",\"elasticloadbalancing:CreateRule\",\"elasticloadbalancing:CreateLoadBalancer\",\"elasticloadbalancing:CreateListener\",\"ec2:CreateSecurityGroup\"],\"Resource\":\"*\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}}},{\"Sid\":\"ShieldProtection\",\"Effect\":\"Allow\",\"Action\":\"shield:CreateProtection\",\"Resource\":\"*\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}}},{\"Sid\":\"ShieldTagResource\",\"Effect\":\"Allow\",\"Action\":\"shield:TagResource\",\"Resource\":\"arn:aws:shield::*:protection/*\",\"Condition\":{\"StringEquals\":{\"aws:RequestTag/eks:eks-cluster-name\":\"${aws:PrincipalTag/eks:eks-cluster-name}\"}}}]}",
                  "override_json": null,
                  "override_policy_documents": null,
                  "policy_id": null,
                  "source_json": null,
                  "source_policy_documents": null,
                  "statement": [
                    {
                      "actions": [
                        "ec2:CreateFleet",
                        "ec2:CreateLaunchTemplate",
                        "ec2:RunInstances"
                      ],
                      "condition": [
                        {
                          "test": "StringEquals",
                          "values": [
                            "${aws:PrincipalTag/eks:eks-cluster-name}"
                          ],
                          "variable": "aws:RequestTag/eks:eks-cluster-name"
                        },
                        {
                          "test": "StringLike",
                          "values": [
                            "*"
                          ],
                          "variable": "aws:RequestTag/eks:kubernetes-node-class-name"
                        },
                        {
                          "test": "StringLike",
                          "values": [
                            "*"
                          ],
                          "variable": "aws:RequestTag/eks:kubernetes-node-pool-name"
                        }
                      ],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        "*"
                      ],
                      "sid": "Compute"
                    },
                    {
                      "actions": [
                        "ec2:CreateSnapshot",
                        "ec2:CreateVolume"
                      ],
                      "condition": [
                        {
                          "test": "StringEquals",
                          "values": [
                            "${aws:PrincipalTag/eks:eks-cluster-name}"
                          ],
                          "variable": "aws:RequestTag/eks:eks-cluster-name"
                        }
                      ],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        "arn:aws:ec2:*:*:snapshot/*",
                        "arn:aws:ec2:*:*:volume/*"
                      ],
                      "sid": "Storage"
                    },
                    {
                      "actions": [
                        "ec2:CreateNetworkInterface"
                      ],
                      "condition": [
                        {
                          "test": "StringEquals",
                          "values": [
                            "${aws:PrincipalTag/eks:eks-cluster-name}"
                          ],
                          "variable": "aws:RequestTag/eks:eks-cluster-name"
                        },
                        {
                          "test": "StringEquals",
                          "values": [
                            "*"
                          ],
                          "variable": "aws:RequestTag/eks:kubernetes-cni-node-name"
                        }
                      ],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        "*"
                      ],
                      "sid": "Networking"
                    },
                    {
                      "actions": [
                        "ec2:CreateSecurityGroup",
                        "elasticloadbalancing:CreateListener",
                        "elasticloadbalancing:CreateLoadBalancer",
                        "elasticloadbalancing:CreateRule",
                        "elasticloadbalancing:CreateTargetGroup"
                      ],
                      "condition": [
                        {
                          "test": "StringEquals",
                          "values": [
                            "${aws:PrincipalTag/eks:eks-cluster-name}"
                          ],
                          "variable": "aws:RequestTag/eks:eks-cluster-name"
                        }
                      ],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        "*"
                      ],
                      "sid": "LoadBalancer"
                    },
                    {
                      "actions": [
                        "shield:CreateProtection"
                      ],
                      "condition": [
                        {
                          "test": "StringEquals",
                          "values": [
                            "${aws:PrincipalTag/eks:eks-cluster-name}"
                          ],
                          "variable": "aws:RequestTag/eks:eks-cluster-name"
                        }
                      ],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        "*"
                      ],
                      "sid": "ShieldProtection"
                    },
                    {
                      "actions": [
                        "shield:TagResource"
                      ],
                      "condition": [
                        {
                          "test": "StringEquals",
                          "values": [
                            "${aws:PrincipalTag/eks:eks-cluster-name}"
                          ],
                          "variable": "aws:RequestTag/eks:eks-cluster-name"
                        }
                      ],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        "arn:aws:shield::*:protection/*"
                      ],
                      "sid": "ShieldTagResource"
                    }
                  ],
                  "version": "2012-10-17"
                },
                "sensitive_values": {
                  "statement": [
                    {
                      "actions": [
                        false,
                        false,
                        false
                      ],
                      "condition": [
                        {
                          "values": [
                            false
                          ]
                        },
                        {
                          "values": [
                            false
                          ]
                        },
                        {
                          "values": [
                            false
                          ]
                        }
                      ],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        false
                      ]
                    },
                    {
                      "actions": [
                        false,
                        false
                      ],
                      "condition": [
                        {
                          "values": [
                            false
                          ]
                        }
                      ],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        false,
                        false
                      ]
                    },
                    {
                      "actions": [
                        false
                      ],
                      "condition": [
                        {
                          "values": [
                            false
                          ]
                        },
                        {
                          "values": [
                            false
                          ]
                        }
                      ],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        false
                      ]
                    },
                    {
                      "actions": [
                        false,
                        false,
                        false,
                        false,
                        false
                      ],
                      "condition": [
                        {
                          "values": [
                            false
                          ]
                        }
                      ],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        false
                      ]
                    },
                    {
                      "actions": [
                        false
                      ],
                      "condition": [
                        {
                          "values": [
                            false
                          ]
                        }
                      ],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        false
                      ]
                    },
                    {
                      "actions": [
                        false
                      ],
                      "condition": [
                        {
                          "values": [
                            false
                          ]
                        }
                      ],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [],
                      "resources": [
                        false
                      ]
                    }
                  ]
                }
              },
              {
                "address": "module.eks.data.aws_iam_policy_document.node_assume_role_policy[0]",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "node_assume_role_policy",
                "index": 0,
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "id": "3518401652",
                  "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"EKSAutoNodeAssumeRole\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"sts:TagSession\",\n        \"sts:AssumeRole\"\n      ],\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n    }\n  ]\n}",
                  "minified_json": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"EKSAutoNodeAssumeRole\",\"Effect\":\"Allow\",\"Action\":[\"sts:TagSession\",\"sts:AssumeRole\"],\"Principal\":{\"Service\":\"ec2.amazonaws.com\"}}]}",
                  "override_json": null,
                  "override_policy_documents": null,
                  "policy_id": null,
                  "source_json": null,
                  "source_policy_documents": null,
                  "statement": [
                    {
                      "actions": [
                        "sts:AssumeRole",
                        "sts:TagSession"
                      ],
                      "condition": [],
                      "effect": "Allow",
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [
                        {
                          "identifiers": [
                            "ec2.amazonaws.com"
                          ],
                          "type": "Service"
                        }
                      ],
                      "resources": [],
                      "sid": "EKSAutoNodeAssumeRole"
                    }
                  ],
                  "version": "2012-10-17"
                },
                "sensitive_values": {
                  "statement": [
                    {
                      "actions": [
                        false,
                        false
                      ],
                      "condition": [],
                      "not_actions": [],
                      "not_principals": [],
                      "not_resources": [],
                      "principals": [
                        {
                          "identifiers": [
                            false
                          ]
                        }
                      ],
                      "resources": []
                    }
                  ]
                }
              },
              {
                "address": "module.eks.data.aws_iam_session_context.current[0]",
                "mode": "data",
                "type": "aws_iam_session_context",
                "name": "current",
                "index": 0,
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "arn": "arn:aws:sts::844333597536:assumed-role/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f/jim@nirmata.com",
                  "id": "arn:aws:sts::844333597536:assumed-role/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f/jim@nirmata.com",
                  "issuer_arn": "arn:aws:iam::844333597536:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f",
                  "issuer_id": "AROA4JFRUINQPJLRF3ZGH",
                  "issuer_name": "AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f",
                  "session_name": "jim@nirmata.com"
                },
                "sensitive_values": {}
              },
              {
                "address": "module.eks.data.aws_partition.current[0]",
                "mode": "data",
                "type": "aws_partition",
                "name": "current",
                "index": 0,
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "dns_suffix": "amazonaws.com",
                  "id": "aws",
                  "partition": "aws",
                  "reverse_dns_prefix": "com.amazonaws"
                },
                "sensitive_values": {}
              }
            ],
            "address": "module.eks",
            "child_modules": [
              {
                "resources": [
                  {
                    "address": "module.eks.module.kms.data.aws_caller_identity.current[0]",
                    "mode": "data",
                    "type": "aws_caller_identity",
                    "name": "current",
                    "index": 0,
                    "provider_name": "registry.terraform.io/hashicorp/aws",
                    "schema_version": 0,
                    "values": {
                      "account_id": "844333597536",
                      "arn": "arn:aws:sts::844333597536:assumed-role/AWSReservedSSO_AWSAdministratorAccess_d270afaa03aa789f/jim@nirmata.com",
                      "id": "844333597536",
                      "user_id": "AROA4JFRUINQPJLRF3ZGH:jim@nirmata.com"
                    },
                    "sensitive_values": {}
                  },
                  {
                    "address": "module.eks.module.kms.data.aws_partition.current[0]",
                    "mode": "data",
                    "type": "aws_partition",
                    "name": "current",
                    "index": 0,
                    "provider_name": "registry.terraform.io/hashicorp/aws",
                    "schema_version": 0,
                    "values": {
                      "dns_suffix": "amazonaws.com",
                      "id": "aws",
                      "partition": "aws",
                      "reverse_dns_prefix": "com.amazonaws"
                    },
                    "sensitive_values": {}
                  }
                ],
                "address": "module.eks.module.kms"
              }
            ]
          }
        ]
      }
    }
  },
  "configuration": {
    "provider_config": {
      "aws": {
        "name": "aws",
        "full_name": "registry.terraform.io/hashicorp/aws",
        "version_constraint": ">= 5.34.0",
        "expressions": {
          "region": {
            "references": [
              "var.region"
            ]
          }
        }
      },
      "aws.ecr": {
        "name": "aws",
        "full_name": "registry.terraform.io/hashicorp/aws",
        "alias": "ecr",
        "version_constraint": ">= 5.34.0",
        "expressions": {
          "region": {
            "constant_value": "us-east-1"
          }
        }
      },
      "helm": {
        "name": "helm",
        "full_name": "registry.terraform.io/hashicorp/helm",
        "version_constraint": ">= 2.9.0",
        "expressions": {
          "kubernetes": [
            {
              "cluster_ca_certificate": {
                "references": [
                  "module.eks.cluster_certificate_authority_data",
                  "module.eks"
                ]
              },
              "exec": [
                {
                  "api_version": {
                    "constant_value": "client.authentication.k8s.io/v1beta1"
                  },
                  "args": {
                    "references": [
                      "module.eks.cluster_name",
                      "module.eks"
                    ]
                  },
                  "command": {
                    "constant_value": "aws"
                  }
                }
              ],
              "host": {
                "references": [
                  "module.eks.cluster_endpoint",
                  "module.eks"
                ]
              }
            }
          ]
        }
      },
      "kubernetes": {
        "name": "kubernetes",
        "full_name": "registry.terraform.io/hashicorp/kubernetes",
        "version_constraint": ">= 2.10.0"
      },
      "local": {
        "name": "local",
        "full_name": "registry.terraform.io/hashicorp/local"
      },
      "module.eks.module.eks_managed_node_group.module.user_data:cloudinit": {
        "name": "cloudinit",
        "full_name": "registry.terraform.io/hashicorp/cloudinit",
        "version_constraint": ">= 2.0.0",
        "module_address": "module.eks.module.eks_managed_node_group.module.user_data"
      },
      "module.eks.module.eks_managed_node_group.module.user_data:null": {
        "name": "null",
        "full_name": "registry.terraform.io/hashicorp/null",
        "version_constraint": ">= 3.0.0",
        "module_address": "module.eks.module.eks_managed_node_group.module.user_data"
      },
      "module.eks.module.self_managed_node_group.module.user_data:cloudinit": {
        "name": "cloudinit",
        "full_name": "registry.terraform.io/hashicorp/cloudinit",
        "version_constraint": ">= 2.0.0",
        "module_address": "module.eks.module.self_managed_node_group.module.user_data"
      },
      "module.eks.module.self_managed_node_group.module.user_data:null": {
        "name": "null",
        "full_name": "registry.terraform.io/hashicorp/null",
        "version_constraint": ">= 3.0.0",
        "module_address": "module.eks.module.self_managed_node_group.module.user_data"
      },
      "module.eks:time": {
        "name": "time",
        "full_name": "registry.terraform.io/hashicorp/time",
        "version_constraint": ">= 0.9.0",
        "module_address": "module.eks"
      },
      "module.eks:tls": {
        "name": "tls",
        "full_name": "registry.terraform.io/hashicorp/tls",
        "version_constraint": ">= 3.0.0",
        "module_address": "module.eks"
      },
      "null": {
        "name": "null",
        "full_name": "registry.terraform.io/hashicorp/null",
        "version_constraint": ">= 3.1.0"
      }
    },
    "root_module": {
      "outputs": {
        "configure_kubectl": {
          "expression": {
            "references": [
              "var.region",
              "module.eks.cluster_name",
              "module.eks"
            ]
          },
          "description": "Configure kubectl: make sure you're logged in with the correct AWS profile and run the following command to update your kubeconfig"
        }
      },
      "resources": [
        {
          "address": "local_file.setup_gpu",
          "mode": "managed",
          "type": "local_file",
          "name": "setup_gpu",
          "provider_config_key": "local",
          "expressions": {
            "content": {
              "references": [
                "path.module",
                "module.eks.node_iam_role_name",
                "module.eks",
                "module.eks.cluster_name",
                "module.eks"
              ]
            },
            "filename": {
              "references": [
                "path.module"
              ]
            }
          },
          "schema_version": 0
        },
        {
          "address": "local_file.setup_graviton",
          "mode": "managed",
          "type": "local_file",
          "name": "setup_graviton",
          "provider_config_key": "local",
          "expressions": {
            "content": {
              "references": [
                "path.module",
                "module.eks.node_iam_role_name",
                "module.eks",
                "module.eks.cluster_name",
                "module.eks"
              ]
            },
            "filename": {
              "references": [
                "path.module"
              ]
            }
          },
          "schema_version": 0
        },
        {
          "address": "local_file.setup_neuron",
          "mode": "managed",
          "type": "local_file",
          "name": "setup_neuron",
          "provider_config_key": "local",
          "expressions": {
            "content": {
              "references": [
                "path.module",
                "module.eks.node_iam_role_name",
                "module.eks",
                "module.eks.cluster_name",
                "module.eks"
              ]
            },
            "filename": {
              "references": [
                "path.module"
              ]
            }
          },
          "schema_version": 0
        },
        {
          "address": "local_file.setup_spot",
          "mode": "managed",
          "type": "local_file",
          "name": "setup_spot",
          "provider_config_key": "local",
          "expressions": {
            "content": {
              "references": [
                "path.module",
                "module.eks.node_iam_role_name",
                "module.eks",
                "module.eks.cluster_name",
                "module.eks"
              ]
            },
            "filename": {
              "references": [
                "path.module"
              ]
            }
          },
          "schema_version": 0
        },
        {
          "address": "null_resource.create_nodepools_dir",
          "mode": "managed",
          "type": "null_resource",
          "name": "create_nodepools_dir",
          "provider_config_key": "null",
          "provisioners": [
            {
              "type": "local-exec",
              "expressions": {
                "command": {
                  "references": [
                    "path.module"
                  ]
                }
              }
            }
          ],
          "schema_version": 0
        },
        {
          "address": "data.aws_availability_zones.available",
          "mode": "data",
          "type": "aws_availability_zones",
          "name": "available",
          "provider_config_key": "aws",
          "expressions": {
            "filter": [
              {
                "name": {
                  "constant_value": "opt-in-status"
                },
                "values": {
                  "constant_value": [
                    "opt-in-not-required"
                  ]
                }
              }
            ]
          },
          "schema_version": 0
        },
        {
          "address": "data.aws_ecrpublic_authorization_token.token",
          "mode": "data",
          "type": "aws_ecrpublic_authorization_token",
          "name": "token",
          "provider_config_key": "aws.ecr",
          "schema_version": 0
        }
      ],
      "module_calls": {
        "eks": {
          "source": "terraform-aws-modules/eks/aws",
          "expressions": {
            "cluster_compute_config": {
              "constant_value": {
                "enabled": true,
                "node_pools": [
                  "general-purpose",
                  "system"
                ]
              }
            },
            "cluster_endpoint_public_access": {
              "constant_value": true
            },
            "cluster_name": {
              "references": [
                "var.name"
              ]
            },
            "cluster_version": {
              "references": [
                "var.eks_cluster_version"
              ]
            },
            "enable_cluster_creator_admin_permissions": {
              "constant_value": true
            },
            "subnet_ids": {
              "references": [
                "var.private_subnet_ids"
              ]
            },
            "tags": {
              "references": [
                "local.tags"
              ]
            },
            "vpc_id": {
              "references": [
                "var.vpc_id"
              ]
            }
          },
          "module": {
            "outputs": {
              "access_entries": {
                "expression": {
                  "references": [
                    "aws_eks_access_entry.this"
                  ]
                },
                "description": "Map of access entries created and their attributes"
              },
              "access_policy_associations": {
                "expression": {
                  "references": [
                    "aws_eks_access_policy_association.this"
                  ]
                },
                "description": "Map of eks cluster access policy associations created and their attributes"
              },
              "cloudwatch_log_group_arn": {
                "expression": {
                  "references": [
                    "aws_cloudwatch_log_group.this[0].arn",
                    "aws_cloudwatch_log_group.this[0]",
                    "aws_cloudwatch_log_group.this"
                  ]
                },
                "description": "Arn of cloudwatch log group created"
              },
              "cloudwatch_log_group_name": {
                "expression": {
                  "references": [
                    "aws_cloudwatch_log_group.this[0].name",
                    "aws_cloudwatch_log_group.this[0]",
                    "aws_cloudwatch_log_group.this"
                  ]
                },
                "description": "Name of cloudwatch log group created"
              },
              "cluster_addons": {
                "expression": {
                  "references": [
                    "aws_eks_addon.this",
                    "aws_eks_addon.before_compute"
                  ]
                },
                "description": "Map of attribute maps for all EKS cluster addons enabled"
              },
              "cluster_arn": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].arn",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "depends_on": [
                  "aws_eks_access_entry.this",
                  "aws_eks_access_policy_association.this"
                ],
                "description": "The Amazon Resource Name (ARN) of the cluster"
              },
              "cluster_certificate_authority_data": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].certificate_authority[0].data",
                    "aws_eks_cluster.this[0].certificate_authority[0]",
                    "aws_eks_cluster.this[0].certificate_authority",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "depends_on": [
                  "aws_eks_access_entry.this",
                  "aws_eks_access_policy_association.this"
                ],
                "description": "Base64 encoded certificate data required to communicate with the cluster"
              },
              "cluster_dualstack_oidc_issuer_url": {
                "expression": {
                  "references": [
                    "local.dualstack_oidc_issuer_url"
                  ]
                },
                "description": "Dual-stack compatible URL on the EKS cluster for the OpenID Connect identity provider"
              },
              "cluster_endpoint": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].endpoint",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "depends_on": [
                  "aws_eks_access_entry.this",
                  "aws_eks_access_policy_association.this"
                ],
                "description": "Endpoint for your Kubernetes API server"
              },
              "cluster_iam_role_arn": {
                "expression": {
                  "references": [
                    "aws_iam_role.this[0].arn",
                    "aws_iam_role.this[0]",
                    "aws_iam_role.this"
                  ]
                },
                "description": "Cluster IAM role ARN"
              },
              "cluster_iam_role_name": {
                "expression": {
                  "references": [
                    "aws_iam_role.this[0].name",
                    "aws_iam_role.this[0]",
                    "aws_iam_role.this"
                  ]
                },
                "description": "Cluster IAM role name"
              },
              "cluster_iam_role_unique_id": {
                "expression": {
                  "references": [
                    "aws_iam_role.this[0].unique_id",
                    "aws_iam_role.this[0]",
                    "aws_iam_role.this"
                  ]
                },
                "description": "Stable and unique string identifying the IAM role"
              },
              "cluster_id": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].cluster_id",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "The ID of the EKS cluster. Note: currently a value is returned only for local EKS clusters created on Outposts"
              },
              "cluster_identity_providers": {
                "expression": {
                  "references": [
                    "aws_eks_identity_provider_config.this"
                  ]
                },
                "description": "Map of attribute maps for all EKS identity providers enabled"
              },
              "cluster_ip_family": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].kubernetes_network_config[0].ip_family",
                    "aws_eks_cluster.this[0].kubernetes_network_config[0]",
                    "aws_eks_cluster.this[0].kubernetes_network_config",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "The IP family used by the cluster (e.g. `ipv4` or `ipv6`)"
              },
              "cluster_name": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].name",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "depends_on": [
                  "aws_eks_access_entry.this",
                  "aws_eks_access_policy_association.this"
                ],
                "description": "The name of the EKS cluster"
              },
              "cluster_oidc_issuer_url": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].identity[0].oidc[0].issuer",
                    "aws_eks_cluster.this[0].identity[0].oidc[0]",
                    "aws_eks_cluster.this[0].identity[0].oidc",
                    "aws_eks_cluster.this[0].identity[0]",
                    "aws_eks_cluster.this[0].identity",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "The URL on the EKS cluster for the OpenID Connect identity provider"
              },
              "cluster_platform_version": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].platform_version",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "Platform version for the cluster"
              },
              "cluster_primary_security_group_id": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].vpc_config[0].cluster_security_group_id",
                    "aws_eks_cluster.this[0].vpc_config[0]",
                    "aws_eks_cluster.this[0].vpc_config",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "Cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication. Referred to as 'Cluster security group' in the EKS console"
              },
              "cluster_security_group_arn": {
                "expression": {
                  "references": [
                    "aws_security_group.cluster[0].arn",
                    "aws_security_group.cluster[0]",
                    "aws_security_group.cluster"
                  ]
                },
                "description": "Amazon Resource Name (ARN) of the cluster security group"
              },
              "cluster_security_group_id": {
                "expression": {
                  "references": [
                    "aws_security_group.cluster[0].id",
                    "aws_security_group.cluster[0]",
                    "aws_security_group.cluster"
                  ]
                },
                "description": "ID of the cluster security group"
              },
              "cluster_service_cidr": {
                "expression": {
                  "references": [
                    "var.cluster_ip_family",
                    "aws_eks_cluster.this[0].kubernetes_network_config[0].service_ipv6_cidr",
                    "aws_eks_cluster.this[0].kubernetes_network_config[0]",
                    "aws_eks_cluster.this[0].kubernetes_network_config",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this",
                    "aws_eks_cluster.this[0].kubernetes_network_config[0].service_ipv4_cidr",
                    "aws_eks_cluster.this[0].kubernetes_network_config[0]",
                    "aws_eks_cluster.this[0].kubernetes_network_config",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "The CIDR block where Kubernetes pod and service IP addresses are assigned from"
              },
              "cluster_status": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].status",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "Status of the EKS cluster. One of `CREATING`, `ACTIVE`, `DELETING`, `FAILED`"
              },
              "cluster_tls_certificate_sha1_fingerprint": {
                "expression": {
                  "references": [
                    "data.tls_certificate.this[0].certificates[0].sha1_fingerprint",
                    "data.tls_certificate.this[0].certificates[0]",
                    "data.tls_certificate.this[0].certificates",
                    "data.tls_certificate.this[0]",
                    "data.tls_certificate.this"
                  ]
                },
                "description": "The SHA1 fingerprint of the public key of the cluster's certificate"
              },
              "cluster_version": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].version",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "The Kubernetes version for the cluster"
              },
              "eks_managed_node_groups": {
                "expression": {
                  "references": [
                    "module.eks_managed_node_group"
                  ]
                },
                "description": "Map of attribute maps for all EKS managed node groups created"
              },
              "eks_managed_node_groups_autoscaling_group_names": {
                "expression": {
                  "references": [
                    "module.eks_managed_node_group"
                  ]
                },
                "description": "List of the autoscaling group names created by EKS managed node groups"
              },
              "fargate_profiles": {
                "expression": {
                  "references": [
                    "module.fargate_profile"
                  ]
                },
                "description": "Map of attribute maps for all EKS Fargate Profiles created"
              },
              "kms_key_arn": {
                "expression": {
                  "references": [
                    "module.kms.key_arn",
                    "module.kms"
                  ]
                },
                "description": "The Amazon Resource Name (ARN) of the key"
              },
              "kms_key_id": {
                "expression": {
                  "references": [
                    "module.kms.key_id",
                    "module.kms"
                  ]
                },
                "description": "The globally unique identifier for the key"
              },
              "kms_key_policy": {
                "expression": {
                  "references": [
                    "module.kms.key_policy",
                    "module.kms"
                  ]
                },
                "description": "The IAM resource policy set on the key"
              },
              "node_iam_role_arn": {
                "expression": {
                  "references": [
                    "aws_iam_role.eks_auto[0].arn",
                    "aws_iam_role.eks_auto[0]",
                    "aws_iam_role.eks_auto"
                  ]
                },
                "description": "EKS Auto node IAM role ARN"
              },
              "node_iam_role_name": {
                "expression": {
                  "references": [
                    "aws_iam_role.eks_auto[0].name",
                    "aws_iam_role.eks_auto[0]",
                    "aws_iam_role.eks_auto"
                  ]
                },
                "description": "EKS Auto node IAM role name"
              },
              "node_iam_role_unique_id": {
                "expression": {
                  "references": [
                    "aws_iam_role.eks_auto[0].unique_id",
                    "aws_iam_role.eks_auto[0]",
                    "aws_iam_role.eks_auto"
                  ]
                },
                "description": "Stable and unique string identifying the IAM role"
              },
              "node_security_group_arn": {
                "expression": {
                  "references": [
                    "aws_security_group.node[0].arn",
                    "aws_security_group.node[0]",
                    "aws_security_group.node"
                  ]
                },
                "description": "Amazon Resource Name (ARN) of the node shared security group"
              },
              "node_security_group_id": {
                "expression": {
                  "references": [
                    "aws_security_group.node[0].id",
                    "aws_security_group.node[0]",
                    "aws_security_group.node"
                  ]
                },
                "description": "ID of the node shared security group"
              },
              "oidc_provider": {
                "expression": {
                  "references": [
                    "aws_eks_cluster.this[0].identity[0].oidc[0].issuer",
                    "aws_eks_cluster.this[0].identity[0].oidc[0]",
                    "aws_eks_cluster.this[0].identity[0].oidc",
                    "aws_eks_cluster.this[0].identity[0]",
                    "aws_eks_cluster.this[0].identity",
                    "aws_eks_cluster.this[0]",
                    "aws_eks_cluster.this"
                  ]
                },
                "description": "The OpenID Connect identity provider (issuer URL without leading `https://`)"
              },
              "oidc_provider_arn": {
                "expression": {
                  "references": [
                    "aws_iam_openid_connect_provider.oidc_provider[0].arn",
                    "aws_iam_openid_connect_provider.oidc_provider[0]",
                    "aws_iam_openid_connect_provider.oidc_provider"
                  ]
                },
                "description": "The ARN of the OIDC Provider if `enable_irsa = true`"
              },
              "self_managed_node_groups": {
                "expression": {
                  "references": [
                    "module.self_managed_node_group"
                  ]
                },
                "description": "Map of attribute maps for all self managed node groups created"
              },
              "self_managed_node_groups_autoscaling_group_names": {
                "expression": {
                  "references": [
                    "module.self_managed_node_group"
                  ]
                },
                "description": "List of the autoscaling group names created by self-managed node groups"
              }
            },
            "resources": [
              {
                "address": "aws_cloudwatch_log_group.this",
                "mode": "managed",
                "type": "aws_cloudwatch_log_group",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "kms_key_id": {
                    "references": [
                      "var.cloudwatch_log_group_kms_key_id"
                    ]
                  },
                  "log_group_class": {
                    "references": [
                      "var.cloudwatch_log_group_class"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.cluster_name"
                    ]
                  },
                  "retention_in_days": {
                    "references": [
                      "var.cloudwatch_log_group_retention_in_days"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.cloudwatch_log_group_tags",
                      "var.cluster_name"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_cloudwatch_log_group"
                  ]
                }
              },
              {
                "address": "aws_ec2_tag.cluster_primary_security_group",
                "mode": "managed",
                "type": "aws_ec2_tag",
                "name": "cluster_primary_security_group",
                "provider_config_key": "aws",
                "expressions": {
                  "key": {
                    "references": [
                      "each.key"
                    ]
                  },
                  "resource_id": {
                    "references": [
                      "aws_eks_cluster.this[0].vpc_config[0].cluster_security_group_id",
                      "aws_eks_cluster.this[0].vpc_config[0]",
                      "aws_eks_cluster.this[0].vpc_config",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "value": {
                    "references": [
                      "each.value"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.tags",
                    "var.cluster_tags",
                    "local.create",
                    "var.create_cluster_primary_security_group_tags"
                  ]
                }
              },
              {
                "address": "aws_eks_access_entry.this",
                "mode": "managed",
                "type": "aws_eks_access_entry",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "cluster_name": {
                    "references": [
                      "aws_eks_cluster.this[0].id",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "kubernetes_groups": {
                    "references": [
                      "each.value.kubernetes_groups",
                      "each.value"
                    ]
                  },
                  "principal_arn": {
                    "references": [
                      "each.value.principal_arn",
                      "each.value"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "each.value.tags",
                      "each.value"
                    ]
                  },
                  "type": {
                    "references": [
                      "each.value.type",
                      "each.value"
                    ]
                  },
                  "user_name": {
                    "references": [
                      "each.value.user_name",
                      "each.value"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "local.merged_access_entries",
                    "local.create"
                  ]
                }
              },
              {
                "address": "aws_eks_access_policy_association.this",
                "mode": "managed",
                "type": "aws_eks_access_policy_association",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "access_scope": [
                    {
                      "namespaces": {
                        "references": [
                          "each.value.association_access_scope_namespaces",
                          "each.value"
                        ]
                      },
                      "type": {
                        "references": [
                          "each.value.association_access_scope_type",
                          "each.value"
                        ]
                      }
                    }
                  ],
                  "cluster_name": {
                    "references": [
                      "aws_eks_cluster.this[0].id",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "policy_arn": {
                    "references": [
                      "each.value.association_policy_arn",
                      "each.value"
                    ]
                  },
                  "principal_arn": {
                    "references": [
                      "each.value.principal_arn",
                      "each.value"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "local.flattened_access_entries",
                    "local.create"
                  ]
                },
                "depends_on": [
                  "aws_eks_access_entry.this"
                ]
              },
              {
                "address": "aws_eks_addon.before_compute",
                "mode": "managed",
                "type": "aws_eks_addon",
                "name": "before_compute",
                "provider_config_key": "aws",
                "expressions": {
                  "addon_name": {
                    "references": [
                      "each.value.name",
                      "each.value",
                      "each.key"
                    ]
                  },
                  "addon_version": {
                    "references": [
                      "each.value.addon_version",
                      "each.value",
                      "data.aws_eks_addon_version.this",
                      "each.key"
                    ]
                  },
                  "cluster_name": {
                    "references": [
                      "aws_eks_cluster.this[0].id",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "configuration_values": {
                    "references": [
                      "each.value.configuration_values",
                      "each.value"
                    ]
                  },
                  "preserve": {
                    "references": [
                      "each.value.preserve",
                      "each.value"
                    ]
                  },
                  "resolve_conflicts_on_create": {
                    "references": [
                      "each.value.resolve_conflicts_on_create",
                      "each.value",
                      "local.resolve_conflicts_on_create_default"
                    ]
                  },
                  "resolve_conflicts_on_update": {
                    "references": [
                      "each.value.resolve_conflicts_on_update",
                      "each.value"
                    ]
                  },
                  "service_account_role_arn": {
                    "references": [
                      "each.value.service_account_role_arn",
                      "each.value"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "each.value.tags",
                      "each.value"
                    ]
                  },
                  "timeouts": {
                    "create": {
                      "references": [
                        "each.value.timeouts.create",
                        "each.value.timeouts",
                        "each.value",
                        "var.cluster_addons_timeouts.create",
                        "var.cluster_addons_timeouts"
                      ]
                    },
                    "delete": {
                      "references": [
                        "each.value.timeouts.delete",
                        "each.value.timeouts",
                        "each.value",
                        "var.cluster_addons_timeouts.delete",
                        "var.cluster_addons_timeouts"
                      ]
                    },
                    "update": {
                      "references": [
                        "each.value.timeouts.update",
                        "each.value.timeouts",
                        "each.value",
                        "var.cluster_addons_timeouts.update",
                        "var.cluster_addons_timeouts"
                      ]
                    }
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.cluster_addons",
                    "local.create",
                    "local.create_outposts_local_cluster"
                  ]
                }
              },
              {
                "address": "aws_eks_addon.this",
                "mode": "managed",
                "type": "aws_eks_addon",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "addon_name": {
                    "references": [
                      "each.value.name",
                      "each.value",
                      "each.key"
                    ]
                  },
                  "addon_version": {
                    "references": [
                      "each.value.addon_version",
                      "each.value",
                      "data.aws_eks_addon_version.this",
                      "each.key"
                    ]
                  },
                  "cluster_name": {
                    "references": [
                      "aws_eks_cluster.this[0].id",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "configuration_values": {
                    "references": [
                      "each.value.configuration_values",
                      "each.value"
                    ]
                  },
                  "preserve": {
                    "references": [
                      "each.value.preserve",
                      "each.value"
                    ]
                  },
                  "resolve_conflicts_on_create": {
                    "references": [
                      "each.value.resolve_conflicts_on_create",
                      "each.value",
                      "local.resolve_conflicts_on_create_default"
                    ]
                  },
                  "resolve_conflicts_on_update": {
                    "references": [
                      "each.value.resolve_conflicts_on_update",
                      "each.value"
                    ]
                  },
                  "service_account_role_arn": {
                    "references": [
                      "each.value.service_account_role_arn",
                      "each.value"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "each.value.tags",
                      "each.value"
                    ]
                  },
                  "timeouts": {
                    "create": {
                      "references": [
                        "each.value.timeouts.create",
                        "each.value.timeouts",
                        "each.value",
                        "var.cluster_addons_timeouts.create",
                        "var.cluster_addons_timeouts"
                      ]
                    },
                    "delete": {
                      "references": [
                        "each.value.timeouts.delete",
                        "each.value.timeouts",
                        "each.value",
                        "var.cluster_addons_timeouts.delete",
                        "var.cluster_addons_timeouts"
                      ]
                    },
                    "update": {
                      "references": [
                        "each.value.timeouts.update",
                        "each.value.timeouts",
                        "each.value",
                        "var.cluster_addons_timeouts.update",
                        "var.cluster_addons_timeouts"
                      ]
                    }
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.cluster_addons",
                    "local.create",
                    "local.create_outposts_local_cluster"
                  ]
                },
                "depends_on": [
                  "module.fargate_profile",
                  "module.eks_managed_node_group",
                  "module.self_managed_node_group"
                ]
              },
              {
                "address": "aws_eks_cluster.this",
                "mode": "managed",
                "type": "aws_eks_cluster",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "access_config": [
                    {
                      "authentication_mode": {
                        "references": [
                          "var.authentication_mode"
                        ]
                      },
                      "bootstrap_cluster_creator_admin_permissions": {
                        "constant_value": false
                      }
                    }
                  ],
                  "bootstrap_self_managed_addons": {
                    "references": [
                      "local.auto_mode_enabled",
                      "var.bootstrap_self_managed_addons",
                      "var.bootstrap_self_managed_addons"
                    ]
                  },
                  "enabled_cluster_log_types": {
                    "references": [
                      "var.cluster_enabled_log_types"
                    ]
                  },
                  "force_update_version": {
                    "references": [
                      "var.cluster_force_update_version"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.cluster_name"
                    ]
                  },
                  "role_arn": {
                    "references": [
                      "local.cluster_role"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.cluster_tags"
                    ]
                  },
                  "timeouts": {
                    "create": {
                      "references": [
                        "var.cluster_timeouts.create",
                        "var.cluster_timeouts"
                      ]
                    },
                    "delete": {
                      "references": [
                        "var.cluster_timeouts.delete",
                        "var.cluster_timeouts"
                      ]
                    },
                    "update": {
                      "references": [
                        "var.cluster_timeouts.update",
                        "var.cluster_timeouts"
                      ]
                    }
                  },
                  "version": {
                    "references": [
                      "var.cluster_version"
                    ]
                  },
                  "vpc_config": [
                    {
                      "endpoint_private_access": {
                        "references": [
                          "var.cluster_endpoint_private_access"
                        ]
                      },
                      "endpoint_public_access": {
                        "references": [
                          "var.cluster_endpoint_public_access"
                        ]
                      },
                      "public_access_cidrs": {
                        "references": [
                          "var.cluster_endpoint_public_access_cidrs"
                        ]
                      },
                      "security_group_ids": {
                        "references": [
                          "var.cluster_additional_security_group_ids",
                          "local.cluster_security_group_id"
                        ]
                      },
                      "subnet_ids": {
                        "references": [
                          "var.control_plane_subnet_ids",
                          "var.subnet_ids"
                        ]
                      }
                    }
                  ]
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "local.create"
                  ]
                },
                "depends_on": [
                  "aws_iam_role_policy_attachment.this",
                  "aws_security_group_rule.cluster",
                  "aws_security_group_rule.node",
                  "aws_cloudwatch_log_group.this",
                  "aws_iam_policy.cni_ipv6_policy"
                ]
              },
              {
                "address": "aws_eks_identity_provider_config.this",
                "mode": "managed",
                "type": "aws_eks_identity_provider_config",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "cluster_name": {
                    "references": [
                      "aws_eks_cluster.this[0].id",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "oidc": [
                    {
                      "client_id": {
                        "references": [
                          "each.value.client_id",
                          "each.value"
                        ]
                      },
                      "groups_claim": {
                        "references": [
                          "each.value"
                        ]
                      },
                      "groups_prefix": {
                        "references": [
                          "each.value"
                        ]
                      },
                      "identity_provider_config_name": {
                        "references": [
                          "each.value.identity_provider_config_name",
                          "each.value",
                          "each.key"
                        ]
                      },
                      "issuer_url": {
                        "references": [
                          "each.value.issuer_url",
                          "each.value",
                          "local.idpc_issuer_url"
                        ]
                      },
                      "required_claims": {
                        "references": [
                          "each.value"
                        ]
                      },
                      "username_claim": {
                        "references": [
                          "each.value"
                        ]
                      },
                      "username_prefix": {
                        "references": [
                          "each.value"
                        ]
                      }
                    }
                  ],
                  "tags": {
                    "references": [
                      "var.tags",
                      "each.value.tags",
                      "each.value"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.cluster_identity_providers",
                    "local.create",
                    "local.create_outposts_local_cluster"
                  ]
                }
              },
              {
                "address": "aws_iam_openid_connect_provider.oidc_provider",
                "mode": "managed",
                "type": "aws_iam_openid_connect_provider",
                "name": "oidc_provider",
                "provider_config_key": "aws",
                "expressions": {
                  "client_id_list": {
                    "references": [
                      "var.openid_connect_audiences"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.cluster_name",
                      "var.tags"
                    ]
                  },
                  "thumbprint_list": {
                    "references": [
                      "local.oidc_root_ca_thumbprint",
                      "var.custom_oidc_thumbprints"
                    ]
                  },
                  "url": {
                    "references": [
                      "aws_eks_cluster.this[0].identity[0].oidc[0].issuer",
                      "aws_eks_cluster.this[0].identity[0].oidc[0]",
                      "aws_eks_cluster.this[0].identity[0].oidc",
                      "aws_eks_cluster.this[0].identity[0]",
                      "aws_eks_cluster.this[0].identity",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_oidc_provider"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.cluster_encryption",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "cluster_encryption",
                "provider_config_key": "aws",
                "expressions": {
                  "description": {
                    "references": [
                      "var.cluster_encryption_policy_description"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.cluster_encryption_policy_use_name_prefix",
                      "local.cluster_encryption_policy_name"
                    ]
                  },
                  "name_prefix": {
                    "references": [
                      "var.cluster_encryption_policy_use_name_prefix",
                      "local.cluster_encryption_policy_name"
                    ]
                  },
                  "path": {
                    "references": [
                      "var.cluster_encryption_policy_path"
                    ]
                  },
                  "policy": {
                    "references": [
                      "var.create_kms_key",
                      "module.kms.key_arn",
                      "module.kms",
                      "var.cluster_encryption_config.provider_key_arn",
                      "var.cluster_encryption_config"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.cluster_encryption_policy_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_iam_role",
                    "var.attach_cluster_encryption_policy",
                    "local.enable_cluster_encryption_config"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.cni_ipv6_policy",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "cni_ipv6_policy",
                "provider_config_key": "aws",
                "expressions": {
                  "description": {
                    "constant_value": "IAM policy for EKS CNI to assign IPV6 addresses"
                  },
                  "name": {
                    "constant_value": "AmazonEKS_CNI_IPv6_Policy"
                  },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy_document.cni_ipv6_policy[0].json",
                      "data.aws_iam_policy_document.cni_ipv6_policy[0]",
                      "data.aws_iam_policy_document.cni_ipv6_policy"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create",
                    "var.create_cni_ipv6_iam_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.custom",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "custom",
                "provider_config_key": "aws",
                "expressions": {
                  "description": {
                    "references": [
                      "var.iam_role_description"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.iam_role_use_name_prefix",
                      "local.iam_role_name"
                    ]
                  },
                  "name_prefix": {
                    "references": [
                      "var.iam_role_use_name_prefix",
                      "local.iam_role_name"
                    ]
                  },
                  "path": {
                    "references": [
                      "var.iam_role_path"
                    ]
                  },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy_document.custom[0].json",
                      "data.aws_iam_policy_document.custom[0]",
                      "data.aws_iam_policy_document.custom"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.iam_role_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_iam_role",
                    "var.enable_auto_mode_custom_tags"
                  ]
                }
              },
              {
                "address": "aws_iam_role.eks_auto",
                "mode": "managed",
                "type": "aws_iam_role",
                "name": "eks_auto",
                "provider_config_key": "aws",
                "expressions": {
                  "assume_role_policy": {
                    "references": [
                      "data.aws_iam_policy_document.node_assume_role_policy[0].json",
                      "data.aws_iam_policy_document.node_assume_role_policy[0]",
                      "data.aws_iam_policy_document.node_assume_role_policy"
                    ]
                  },
                  "description": {
                    "references": [
                      "var.node_iam_role_description"
                    ]
                  },
                  "force_detach_policies": {
                    "constant_value": true
                  },
                  "name": {
                    "references": [
                      "var.node_iam_role_use_name_prefix",
                      "local.node_iam_role_name"
                    ]
                  },
                  "name_prefix": {
                    "references": [
                      "var.node_iam_role_use_name_prefix",
                      "local.node_iam_role_name"
                    ]
                  },
                  "path": {
                    "references": [
                      "var.node_iam_role_path"
                    ]
                  },
                  "permissions_boundary": {
                    "references": [
                      "var.node_iam_role_permissions_boundary"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.node_iam_role_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_node_iam_role"
                  ]
                }
              },
              {
                "address": "aws_iam_role.this",
                "mode": "managed",
                "type": "aws_iam_role",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "assume_role_policy": {
                    "references": [
                      "data.aws_iam_policy_document.assume_role_policy[0].json",
                      "data.aws_iam_policy_document.assume_role_policy[0]",
                      "data.aws_iam_policy_document.assume_role_policy"
                    ]
                  },
                  "description": {
                    "references": [
                      "var.iam_role_description"
                    ]
                  },
                  "force_detach_policies": {
                    "constant_value": true
                  },
                  "name": {
                    "references": [
                      "var.iam_role_use_name_prefix",
                      "local.iam_role_name"
                    ]
                  },
                  "name_prefix": {
                    "references": [
                      "var.iam_role_use_name_prefix",
                      "local.iam_role_name",
                      "var.prefix_separator"
                    ]
                  },
                  "path": {
                    "references": [
                      "var.iam_role_path"
                    ]
                  },
                  "permissions_boundary": {
                    "references": [
                      "var.iam_role_permissions_boundary"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.iam_role_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_iam_role"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.additional",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "additional",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.this[0].name",
                      "aws_iam_role.this[0]",
                      "aws_iam_role.this"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.iam_role_additional_policies",
                    "local.create_iam_role"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.cluster_encryption",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "cluster_encryption",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.cluster_encryption[0].arn",
                      "aws_iam_policy.cluster_encryption[0]",
                      "aws_iam_policy.cluster_encryption"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.this[0].name",
                      "aws_iam_role.this[0]",
                      "aws_iam_role.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_iam_role",
                    "var.attach_cluster_encryption_policy",
                    "local.enable_cluster_encryption_config"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.custom",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "custom",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.custom[0].arn",
                      "aws_iam_policy.custom[0]",
                      "aws_iam_policy.custom"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.this[0].name",
                      "aws_iam_role.this[0]",
                      "aws_iam_role.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_iam_role",
                    "var.enable_auto_mode_custom_tags"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.eks_auto",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "eks_auto",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.eks_auto[0].name",
                      "aws_iam_role.eks_auto[0]",
                      "aws_iam_role.eks_auto"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "local.iam_role_policy_prefix",
                    "local.iam_role_policy_prefix",
                    "local.create_node_iam_role"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.eks_auto_additional",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "eks_auto_additional",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.eks_auto[0].name",
                      "aws_iam_role.eks_auto[0]",
                      "aws_iam_role.eks_auto"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.node_iam_role_additional_policies",
                    "local.create_node_iam_role"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.this",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.this[0].name",
                      "aws_iam_role.this[0]",
                      "aws_iam_role.this"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "local.eks_standard_iam_role_policies",
                    "local.eks_auto_mode_iam_role_policies",
                    "local.eks_outpost_iam_role_policies",
                    "local.eks_sgpp_iam_role_policies",
                    "local.create_iam_role"
                  ]
                }
              },
              {
                "address": "aws_security_group.cluster",
                "mode": "managed",
                "type": "aws_security_group",
                "name": "cluster",
                "provider_config_key": "aws",
                "expressions": {
                  "description": {
                    "references": [
                      "var.cluster_security_group_description"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.cluster_security_group_use_name_prefix",
                      "local.cluster_sg_name"
                    ]
                  },
                  "name_prefix": {
                    "references": [
                      "var.cluster_security_group_use_name_prefix",
                      "local.cluster_sg_name",
                      "var.prefix_separator"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "local.cluster_sg_name",
                      "var.cluster_security_group_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "var.vpc_id"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "local.create_cluster_sg"
                  ]
                }
              },
              {
                "address": "aws_security_group.node",
                "mode": "managed",
                "type": "aws_security_group",
                "name": "node",
                "provider_config_key": "aws",
                "expressions": {
                  "description": {
                    "references": [
                      "var.node_security_group_description"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.node_security_group_use_name_prefix",
                      "local.node_sg_name"
                    ]
                  },
                  "name_prefix": {
                    "references": [
                      "var.node_security_group_use_name_prefix",
                      "local.node_sg_name",
                      "var.prefix_separator"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "local.node_sg_name",
                      "var.cluster_name",
                      "var.node_security_group_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "var.vpc_id"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "local.create_node_sg"
                  ]
                }
              },
              {
                "address": "aws_security_group_rule.cluster",
                "mode": "managed",
                "type": "aws_security_group_rule",
                "name": "cluster",
                "provider_config_key": "aws",
                "expressions": {
                  "cidr_blocks": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "description": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "from_port": {
                    "references": [
                      "each.value.from_port",
                      "each.value"
                    ]
                  },
                  "ipv6_cidr_blocks": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "prefix_list_ids": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "each.value.protocol",
                      "each.value"
                    ]
                  },
                  "security_group_id": {
                    "references": [
                      "aws_security_group.cluster[0].id",
                      "aws_security_group.cluster[0]",
                      "aws_security_group.cluster"
                    ]
                  },
                  "self": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "source_security_group_id": {
                    "references": [
                      "each.value.source_node_security_group",
                      "each.value",
                      "local.node_security_group_id",
                      "each.value"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "each.value.to_port",
                      "each.value"
                    ]
                  },
                  "type": {
                    "references": [
                      "each.value.type",
                      "each.value"
                    ]
                  }
                },
                "schema_version": 2,
                "for_each_expression": {
                  "references": [
                    "local.cluster_security_group_rules",
                    "var.cluster_security_group_additional_rules",
                    "local.create_cluster_sg"
                  ]
                }
              },
              {
                "address": "aws_security_group_rule.node",
                "mode": "managed",
                "type": "aws_security_group_rule",
                "name": "node",
                "provider_config_key": "aws",
                "expressions": {
                  "cidr_blocks": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "description": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "from_port": {
                    "references": [
                      "each.value.from_port",
                      "each.value"
                    ]
                  },
                  "ipv6_cidr_blocks": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "prefix_list_ids": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "each.value.protocol",
                      "each.value"
                    ]
                  },
                  "security_group_id": {
                    "references": [
                      "aws_security_group.node[0].id",
                      "aws_security_group.node[0]",
                      "aws_security_group.node"
                    ]
                  },
                  "self": {
                    "references": [
                      "each.value"
                    ]
                  },
                  "source_security_group_id": {
                    "references": [
                      "each.value.source_cluster_security_group",
                      "each.value",
                      "local.cluster_security_group_id",
                      "each.value"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "each.value.to_port",
                      "each.value"
                    ]
                  },
                  "type": {
                    "references": [
                      "each.value.type",
                      "each.value"
                    ]
                  }
                },
                "schema_version": 2,
                "for_each_expression": {
                  "references": [
                    "local.efa_security_group_rules",
                    "local.node_security_group_rules",
                    "local.node_security_group_recommended_rules",
                    "var.node_security_group_additional_rules",
                    "local.create_node_sg"
                  ]
                }
              },
              {
                "address": "time_sleep.this",
                "mode": "managed",
                "type": "time_sleep",
                "name": "this",
                "provider_config_key": "module.eks:time",
                "expressions": {
                  "create_duration": {
                    "references": [
                      "var.dataplane_wait_duration"
                    ]
                  },
                  "triggers": {
                    "references": [
                      "aws_eks_cluster.this[0].id",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this",
                      "aws_eks_cluster.this[0].endpoint",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this",
                      "aws_eks_cluster.this[0].version",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this",
                      "var.cluster_ip_family",
                      "local.kubernetes_network_config.service_ipv6_cidr",
                      "local.kubernetes_network_config",
                      "local.kubernetes_network_config.service_ipv4_cidr",
                      "local.kubernetes_network_config",
                      "aws_eks_cluster.this[0].certificate_authority[0].data",
                      "aws_eks_cluster.this[0].certificate_authority[0]",
                      "aws_eks_cluster.this[0].certificate_authority",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create"
                  ]
                }
              },
              {
                "address": "data.aws_caller_identity.current",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "provider_config_key": "aws",
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create"
                  ]
                }
              },
              {
                "address": "data.aws_eks_addon_version.this",
                "mode": "data",
                "type": "aws_eks_addon_version",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "addon_name": {
                    "references": [
                      "each.value.name",
                      "each.value",
                      "each.key"
                    ]
                  },
                  "kubernetes_version": {
                    "references": [
                      "var.cluster_version",
                      "aws_eks_cluster.this[0].version",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "most_recent": {
                    "references": [
                      "each.value.most_recent",
                      "each.value"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.cluster_addons",
                    "local.create",
                    "local.create_outposts_local_cluster"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.assume_role_policy",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "assume_role_policy",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": {
                        "constant_value": [
                          "sts:AssumeRole",
                          "sts:TagSession"
                        ]
                      },
                      "principals": [
                        {
                          "identifiers": {
                            "constant_value": [
                              "eks.amazonaws.com"
                            ]
                          },
                          "type": {
                            "constant_value": "Service"
                          }
                        }
                      ],
                      "sid": {
                        "constant_value": "EKSClusterAssumeRole"
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_iam_role"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.cni_ipv6_policy",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "cni_ipv6_policy",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": {
                        "constant_value": [
                          "ec2:AssignIpv6Addresses",
                          "ec2:DescribeInstances",
                          "ec2:DescribeTags",
                          "ec2:DescribeNetworkInterfaces",
                          "ec2:DescribeInstanceTypes"
                        ]
                      },
                      "resources": {
                        "constant_value": [
                          "*"
                        ]
                      },
                      "sid": {
                        "constant_value": "AssignDescribe"
                      }
                    },
                    {
                      "actions": {
                        "constant_value": [
                          "ec2:CreateTags"
                        ]
                      },
                      "resources": {
                        "references": [
                          "local.partition"
                        ]
                      },
                      "sid": {
                        "constant_value": "CreateTags"
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create",
                    "var.create_cni_ipv6_iam_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.custom",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "custom",
                "provider_config_key": "aws",
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_iam_role",
                    "var.enable_auto_mode_custom_tags"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.node_assume_role_policy",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "node_assume_role_policy",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": {
                        "constant_value": [
                          "sts:AssumeRole",
                          "sts:TagSession"
                        ]
                      },
                      "principals": [
                        {
                          "identifiers": {
                            "constant_value": [
                              "ec2.amazonaws.com"
                            ]
                          },
                          "type": {
                            "constant_value": "Service"
                          }
                        }
                      ],
                      "sid": {
                        "constant_value": "EKSAutoNodeAssumeRole"
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_node_iam_role"
                  ]
                }
              },
              {
                "address": "data.aws_iam_session_context.current",
                "mode": "data",
                "type": "aws_iam_session_context",
                "name": "current",
                "provider_config_key": "aws",
                "expressions": {
                  "arn": {
                    "references": [
                      "data.aws_caller_identity.current[0].arn",
                      "data.aws_caller_identity.current[0]",
                      "data.aws_caller_identity.current"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create"
                  ]
                }
              },
              {
                "address": "data.aws_partition.current",
                "mode": "data",
                "type": "aws_partition",
                "name": "current",
                "provider_config_key": "aws",
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create"
                  ]
                }
              },
              {
                "address": "data.tls_certificate.this",
                "mode": "data",
                "type": "tls_certificate",
                "name": "this",
                "provider_config_key": "module.eks:tls",
                "expressions": {
                  "url": {
                    "references": [
                      "aws_eks_cluster.this[0].identity[0].oidc[0].issuer",
                      "aws_eks_cluster.this[0].identity[0].oidc[0]",
                      "aws_eks_cluster.this[0].identity[0].oidc",
                      "aws_eks_cluster.this[0].identity[0]",
                      "aws_eks_cluster.this[0].identity",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_oidc_provider",
                    "var.include_oidc_root_ca_thumbprint"
                  ]
                }
              }
            ],
            "module_calls": {
              "eks_managed_node_group": {
                "source": "./modules/eks-managed-node-group",
                "expressions": {
                  "ami_id": {
                    "references": [
                      "each.value.ami_id",
                      "each.value",
                      "var.eks_managed_node_group_defaults.ami_id",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "ami_release_version": {
                    "references": [
                      "each.value.ami_release_version",
                      "each.value",
                      "var.eks_managed_node_group_defaults.ami_release_version",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "ami_type": {
                    "references": [
                      "each.value.ami_type",
                      "each.value",
                      "var.eks_managed_node_group_defaults.ami_type",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "block_device_mappings": {
                    "references": [
                      "each.value.block_device_mappings",
                      "each.value",
                      "var.eks_managed_node_group_defaults.block_device_mappings",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "bootstrap_extra_args": {
                    "references": [
                      "each.value.bootstrap_extra_args",
                      "each.value",
                      "var.eks_managed_node_group_defaults.bootstrap_extra_args",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "capacity_reservation_specification": {
                    "references": [
                      "each.value.capacity_reservation_specification",
                      "each.value",
                      "var.eks_managed_node_group_defaults.capacity_reservation_specification",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "capacity_type": {
                    "references": [
                      "each.value.capacity_type",
                      "each.value",
                      "var.eks_managed_node_group_defaults.capacity_type",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "cloudinit_post_nodeadm": {
                    "references": [
                      "each.value.cloudinit_post_nodeadm",
                      "each.value",
                      "var.eks_managed_node_group_defaults.cloudinit_post_nodeadm",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "cloudinit_pre_nodeadm": {
                    "references": [
                      "each.value.cloudinit_pre_nodeadm",
                      "each.value",
                      "var.eks_managed_node_group_defaults.cloudinit_pre_nodeadm",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "cluster_auth_base64": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_certificate_authority_data\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cluster_endpoint": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_endpoint\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cluster_ip_family": {
                    "references": [
                      "var.cluster_ip_family"
                    ]
                  },
                  "cluster_name": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_name\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cluster_primary_security_group_id": {
                    "references": [
                      "each.value.attach_cluster_primary_security_group",
                      "each.value",
                      "var.eks_managed_node_group_defaults.attach_cluster_primary_security_group",
                      "var.eks_managed_node_group_defaults",
                      "aws_eks_cluster.this[0].vpc_config[0].cluster_security_group_id",
                      "aws_eks_cluster.this[0].vpc_config[0]",
                      "aws_eks_cluster.this[0].vpc_config",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "cluster_service_cidr": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_service_cidr\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cluster_service_ipv4_cidr": {
                    "references": [
                      "var.cluster_service_ipv4_cidr"
                    ]
                  },
                  "cluster_version": {
                    "references": [
                      "each.value.cluster_version",
                      "each.value",
                      "var.eks_managed_node_group_defaults.cluster_version",
                      "var.eks_managed_node_group_defaults",
                      "time_sleep.this[0].triggers[\"cluster_version\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cpu_options": {
                    "references": [
                      "each.value.cpu_options",
                      "each.value",
                      "var.eks_managed_node_group_defaults.cpu_options",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "create": {
                    "references": [
                      "each.value.create",
                      "each.value"
                    ]
                  },
                  "create_iam_role": {
                    "references": [
                      "each.value.create_iam_role",
                      "each.value",
                      "var.eks_managed_node_group_defaults.create_iam_role",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "create_iam_role_policy": {
                    "references": [
                      "each.value.create_iam_role_policy",
                      "each.value",
                      "var.eks_managed_node_group_defaults.create_iam_role_policy",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "create_launch_template": {
                    "references": [
                      "each.value.create_launch_template",
                      "each.value",
                      "var.eks_managed_node_group_defaults.create_launch_template",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "create_placement_group": {
                    "references": [
                      "each.value.create_placement_group",
                      "each.value",
                      "var.eks_managed_node_group_defaults.create_placement_group",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "create_schedule": {
                    "references": [
                      "each.value.create_schedule",
                      "each.value",
                      "var.eks_managed_node_group_defaults.create_schedule",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "credit_specification": {
                    "references": [
                      "each.value.credit_specification",
                      "each.value",
                      "var.eks_managed_node_group_defaults.credit_specification",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "desired_size": {
                    "references": [
                      "each.value.desired_size",
                      "each.value",
                      "var.eks_managed_node_group_defaults.desired_size",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "disable_api_termination": {
                    "references": [
                      "each.value.disable_api_termination",
                      "each.value",
                      "var.eks_managed_node_group_defaults.disable_api_termination",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "disk_size": {
                    "references": [
                      "each.value.disk_size",
                      "each.value",
                      "var.eks_managed_node_group_defaults.disk_size",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "ebs_optimized": {
                    "references": [
                      "each.value.ebs_optimized",
                      "each.value",
                      "var.eks_managed_node_group_defaults.ebs_optimized",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "efa_indices": {
                    "references": [
                      "each.value.efa_indices",
                      "each.value",
                      "var.eks_managed_node_group_defaults.efa_indices",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "elastic_gpu_specifications": {
                    "references": [
                      "each.value.elastic_gpu_specifications",
                      "each.value",
                      "var.eks_managed_node_group_defaults.elastic_gpu_specifications",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "elastic_inference_accelerator": {
                    "references": [
                      "each.value.elastic_inference_accelerator",
                      "each.value",
                      "var.eks_managed_node_group_defaults.elastic_inference_accelerator",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "enable_bootstrap_user_data": {
                    "references": [
                      "each.value.enable_bootstrap_user_data",
                      "each.value",
                      "var.eks_managed_node_group_defaults.enable_bootstrap_user_data",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "enable_efa_only": {
                    "references": [
                      "each.value.enable_efa_only",
                      "each.value",
                      "var.eks_managed_node_group_defaults.enable_efa_only",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "enable_efa_support": {
                    "references": [
                      "each.value.enable_efa_support",
                      "each.value",
                      "var.eks_managed_node_group_defaults.enable_efa_support",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "enable_monitoring": {
                    "references": [
                      "each.value.enable_monitoring",
                      "each.value",
                      "var.eks_managed_node_group_defaults.enable_monitoring",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "enclave_options": {
                    "references": [
                      "each.value.enclave_options",
                      "each.value",
                      "var.eks_managed_node_group_defaults.enclave_options",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "force_update_version": {
                    "references": [
                      "each.value.force_update_version",
                      "each.value",
                      "var.eks_managed_node_group_defaults.force_update_version",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_additional_policies": {
                    "references": [
                      "each.value",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_arn": {
                    "references": [
                      "each.value.iam_role_arn",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_arn",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_attach_cni_policy": {
                    "references": [
                      "each.value.iam_role_attach_cni_policy",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_attach_cni_policy",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_description": {
                    "references": [
                      "each.value.iam_role_description",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_description",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_name": {
                    "references": [
                      "each.value.iam_role_name",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_name",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_path": {
                    "references": [
                      "each.value.iam_role_path",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_path",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_permissions_boundary": {
                    "references": [
                      "each.value.iam_role_permissions_boundary",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_permissions_boundary",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_policy_statements": {
                    "references": [
                      "each.value.iam_role_policy_statements",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_policy_statements",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_tags": {
                    "references": [
                      "each.value.iam_role_tags",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_tags",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_use_name_prefix": {
                    "references": [
                      "each.value.iam_role_use_name_prefix",
                      "each.value",
                      "var.eks_managed_node_group_defaults.iam_role_use_name_prefix",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "instance_market_options": {
                    "references": [
                      "each.value.instance_market_options",
                      "each.value",
                      "var.eks_managed_node_group_defaults.instance_market_options",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "instance_types": {
                    "references": [
                      "each.value.instance_types",
                      "each.value",
                      "var.eks_managed_node_group_defaults.instance_types",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "kernel_id": {
                    "references": [
                      "each.value.kernel_id",
                      "each.value",
                      "var.eks_managed_node_group_defaults.kernel_id",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "key_name": {
                    "references": [
                      "each.value.key_name",
                      "each.value",
                      "var.eks_managed_node_group_defaults.key_name",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "labels": {
                    "references": [
                      "each.value.labels",
                      "each.value",
                      "var.eks_managed_node_group_defaults.labels",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_default_version": {
                    "references": [
                      "each.value.launch_template_default_version",
                      "each.value",
                      "var.eks_managed_node_group_defaults.launch_template_default_version",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_description": {
                    "references": [
                      "each.value.launch_template_description",
                      "each.value",
                      "var.eks_managed_node_group_defaults.launch_template_description",
                      "var.eks_managed_node_group_defaults",
                      "each.value.name",
                      "each.value",
                      "each.key"
                    ]
                  },
                  "launch_template_id": {
                    "references": [
                      "each.value.launch_template_id",
                      "each.value",
                      "var.eks_managed_node_group_defaults.launch_template_id",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_name": {
                    "references": [
                      "each.value.launch_template_name",
                      "each.value",
                      "var.eks_managed_node_group_defaults.launch_template_name",
                      "var.eks_managed_node_group_defaults",
                      "each.key"
                    ]
                  },
                  "launch_template_tags": {
                    "references": [
                      "each.value.launch_template_tags",
                      "each.value",
                      "var.eks_managed_node_group_defaults.launch_template_tags",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_use_name_prefix": {
                    "references": [
                      "each.value.launch_template_use_name_prefix",
                      "each.value",
                      "var.eks_managed_node_group_defaults.launch_template_use_name_prefix",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_version": {
                    "references": [
                      "each.value.launch_template_version",
                      "each.value",
                      "var.eks_managed_node_group_defaults.launch_template_version",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "license_specifications": {
                    "references": [
                      "each.value.license_specifications",
                      "each.value",
                      "var.eks_managed_node_group_defaults.license_specifications",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "maintenance_options": {
                    "references": [
                      "each.value.maintenance_options",
                      "each.value",
                      "var.eks_managed_node_group_defaults.maintenance_options",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "max_size": {
                    "references": [
                      "each.value.max_size",
                      "each.value",
                      "var.eks_managed_node_group_defaults.max_size",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "metadata_options": {
                    "references": [
                      "each.value.metadata_options",
                      "each.value",
                      "var.eks_managed_node_group_defaults.metadata_options",
                      "var.eks_managed_node_group_defaults",
                      "local.metadata_options"
                    ]
                  },
                  "min_size": {
                    "references": [
                      "each.value.min_size",
                      "each.value",
                      "var.eks_managed_node_group_defaults.min_size",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "name": {
                    "references": [
                      "each.value.name",
                      "each.value",
                      "each.key"
                    ]
                  },
                  "network_interfaces": {
                    "references": [
                      "each.value.network_interfaces",
                      "each.value",
                      "var.eks_managed_node_group_defaults.network_interfaces",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "node_repair_config": {
                    "references": [
                      "each.value.node_repair_config",
                      "each.value",
                      "var.eks_managed_node_group_defaults.node_repair_config",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "placement": {
                    "references": [
                      "each.value.placement",
                      "each.value",
                      "var.eks_managed_node_group_defaults.placement",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "placement_group_az": {
                    "references": [
                      "each.value.placement_group_az",
                      "each.value",
                      "var.eks_managed_node_group_defaults.placement_group_az",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "placement_group_strategy": {
                    "references": [
                      "each.value.placement_group_strategy",
                      "each.value",
                      "var.eks_managed_node_group_defaults.placement_group_strategy",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "platform": {
                    "references": [
                      "each.value.platform",
                      "each.value",
                      "var.eks_managed_node_group_defaults.platform",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "post_bootstrap_user_data": {
                    "references": [
                      "each.value.post_bootstrap_user_data",
                      "each.value",
                      "var.eks_managed_node_group_defaults.post_bootstrap_user_data",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "pre_bootstrap_user_data": {
                    "references": [
                      "each.value.pre_bootstrap_user_data",
                      "each.value",
                      "var.eks_managed_node_group_defaults.pre_bootstrap_user_data",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "private_dns_name_options": {
                    "references": [
                      "each.value.private_dns_name_options",
                      "each.value",
                      "var.eks_managed_node_group_defaults.private_dns_name_options",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "ram_disk_id": {
                    "references": [
                      "each.value.ram_disk_id",
                      "each.value",
                      "var.eks_managed_node_group_defaults.ram_disk_id",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "remote_access": {
                    "references": [
                      "each.value.remote_access",
                      "each.value",
                      "var.eks_managed_node_group_defaults.remote_access",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "schedules": {
                    "references": [
                      "each.value.schedules",
                      "each.value",
                      "var.eks_managed_node_group_defaults.schedules",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "each.value.subnet_ids",
                      "each.value",
                      "var.eks_managed_node_group_defaults.subnet_ids",
                      "var.eks_managed_node_group_defaults",
                      "var.subnet_ids"
                    ]
                  },
                  "tag_specifications": {
                    "references": [
                      "each.value.tag_specifications",
                      "each.value",
                      "var.eks_managed_node_group_defaults.tag_specifications",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "each.value.tags",
                      "each.value",
                      "var.eks_managed_node_group_defaults.tags",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "taints": {
                    "references": [
                      "each.value.taints",
                      "each.value",
                      "var.eks_managed_node_group_defaults.taints",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "timeouts": {
                    "references": [
                      "each.value.timeouts",
                      "each.value",
                      "var.eks_managed_node_group_defaults.timeouts",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "update_config": {
                    "references": [
                      "each.value.update_config",
                      "each.value",
                      "var.eks_managed_node_group_defaults.update_config",
                      "var.eks_managed_node_group_defaults",
                      "local.default_update_config"
                    ]
                  },
                  "update_launch_template_default_version": {
                    "references": [
                      "each.value.update_launch_template_default_version",
                      "each.value",
                      "var.eks_managed_node_group_defaults.update_launch_template_default_version",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "use_custom_launch_template": {
                    "references": [
                      "each.value.use_custom_launch_template",
                      "each.value",
                      "var.eks_managed_node_group_defaults.use_custom_launch_template",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "use_latest_ami_release_version": {
                    "references": [
                      "each.value.use_latest_ami_release_version",
                      "each.value",
                      "var.eks_managed_node_group_defaults.use_latest_ami_release_version",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "use_name_prefix": {
                    "references": [
                      "each.value.use_name_prefix",
                      "each.value",
                      "var.eks_managed_node_group_defaults.use_name_prefix",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "user_data_template_path": {
                    "references": [
                      "each.value.user_data_template_path",
                      "each.value",
                      "var.eks_managed_node_group_defaults.user_data_template_path",
                      "var.eks_managed_node_group_defaults"
                    ]
                  },
                  "vpc_security_group_ids": {
                    "references": [
                      "local.node_security_group_id",
                      "each.value.vpc_security_group_ids",
                      "each.value",
                      "var.eks_managed_node_group_defaults.vpc_security_group_ids",
                      "var.eks_managed_node_group_defaults"
                    ]
                  }
                },
                "for_each_expression": {
                  "references": [
                    "var.eks_managed_node_groups",
                    "var.create",
                    "local.create_outposts_local_cluster"
                  ]
                },
                "module": {
                  "outputs": {
                    "autoscaling_group_schedule_arns": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_schedule.this"
                        ]
                      },
                      "description": "ARNs of autoscaling group schedules"
                    },
                    "iam_role_arn": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].arn",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this",
                          "var.iam_role_arn"
                        ]
                      },
                      "description": "The Amazon Resource Name (ARN) specifying the IAM role"
                    },
                    "iam_role_name": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].name",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this"
                        ]
                      },
                      "description": "The name of the IAM role"
                    },
                    "iam_role_unique_id": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].unique_id",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this"
                        ]
                      },
                      "description": "Stable and unique string identifying the IAM role"
                    },
                    "launch_template_arn": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].arn",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "The ARN of the launch template"
                    },
                    "launch_template_id": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].id",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "The ID of the launch template"
                    },
                    "launch_template_latest_version": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].latest_version",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "The latest version of the launch template"
                    },
                    "launch_template_name": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].name",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "The name of the launch template"
                    },
                    "node_group_arn": {
                      "expression": {
                        "references": [
                          "aws_eks_node_group.this[0].arn",
                          "aws_eks_node_group.this[0]",
                          "aws_eks_node_group.this"
                        ]
                      },
                      "description": "Amazon Resource Name (ARN) of the EKS Node Group"
                    },
                    "node_group_autoscaling_group_names": {
                      "expression": {
                        "references": [
                          "aws_eks_node_group.this[0].resources",
                          "aws_eks_node_group.this[0]",
                          "aws_eks_node_group.this"
                        ]
                      },
                      "description": "List of the autoscaling group names"
                    },
                    "node_group_id": {
                      "expression": {
                        "references": [
                          "aws_eks_node_group.this[0].id",
                          "aws_eks_node_group.this[0]",
                          "aws_eks_node_group.this"
                        ]
                      },
                      "description": "EKS Cluster name and EKS Node Group name separated by a colon (`:`)"
                    },
                    "node_group_labels": {
                      "expression": {
                        "references": [
                          "aws_eks_node_group.this[0].labels",
                          "aws_eks_node_group.this[0]",
                          "aws_eks_node_group.this"
                        ]
                      },
                      "description": "Map of labels applied to the node group"
                    },
                    "node_group_resources": {
                      "expression": {
                        "references": [
                          "aws_eks_node_group.this[0].resources",
                          "aws_eks_node_group.this[0]",
                          "aws_eks_node_group.this"
                        ]
                      },
                      "description": "List of objects containing information about underlying resources"
                    },
                    "node_group_status": {
                      "expression": {
                        "references": [
                          "aws_eks_node_group.this[0].status",
                          "aws_eks_node_group.this[0]",
                          "aws_eks_node_group.this"
                        ]
                      },
                      "description": "Status of the EKS Node Group"
                    },
                    "node_group_taints": {
                      "expression": {
                        "references": [
                          "aws_eks_node_group.this[0].taint",
                          "aws_eks_node_group.this[0]",
                          "aws_eks_node_group.this"
                        ]
                      },
                      "description": "List of objects containing information about taints applied to the node group"
                    },
                    "platform": {
                      "expression": {
                        "references": [
                          "module.user_data.platform",
                          "module.user_data"
                        ]
                      },
                      "description": "[DEPRECATED - Will be removed in `v21.0`] Identifies the OS platform as `bottlerocket`, `linux` (AL2), `al2023`, or `windows`"
                    }
                  },
                  "resources": [
                    {
                      "address": "aws_autoscaling_schedule.this",
                      "mode": "managed",
                      "type": "aws_autoscaling_schedule",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "autoscaling_group_name": {
                          "references": [
                            "aws_eks_node_group.this[0].resources[0].autoscaling_groups[0].name",
                            "aws_eks_node_group.this[0].resources[0].autoscaling_groups[0]",
                            "aws_eks_node_group.this[0].resources[0].autoscaling_groups",
                            "aws_eks_node_group.this[0].resources[0]",
                            "aws_eks_node_group.this[0].resources",
                            "aws_eks_node_group.this[0]",
                            "aws_eks_node_group.this"
                          ]
                        },
                        "desired_capacity": {
                          "references": [
                            "each.value.desired_size",
                            "each.value"
                          ]
                        },
                        "end_time": {
                          "references": [
                            "each.value.end_time",
                            "each.value"
                          ]
                        },
                        "max_size": {
                          "references": [
                            "each.value.max_size",
                            "each.value"
                          ]
                        },
                        "min_size": {
                          "references": [
                            "each.value.min_size",
                            "each.value"
                          ]
                        },
                        "recurrence": {
                          "references": [
                            "each.value.recurrence",
                            "each.value"
                          ]
                        },
                        "scheduled_action_name": {
                          "references": [
                            "each.key"
                          ]
                        },
                        "start_time": {
                          "references": [
                            "each.value.start_time",
                            "each.value"
                          ]
                        },
                        "time_zone": {
                          "references": [
                            "each.value.time_zone",
                            "each.value"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "var.schedules",
                          "var.create",
                          "var.create_schedule"
                        ]
                      }
                    },
                    {
                      "address": "aws_eks_node_group.this",
                      "mode": "managed",
                      "type": "aws_eks_node_group",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "ami_type": {
                          "references": [
                            "var.ami_id",
                            "var.ami_type"
                          ]
                        },
                        "capacity_type": {
                          "references": [
                            "var.capacity_type"
                          ]
                        },
                        "cluster_name": {
                          "references": [
                            "var.cluster_name"
                          ]
                        },
                        "disk_size": {
                          "references": [
                            "var.use_custom_launch_template",
                            "var.disk_size"
                          ]
                        },
                        "force_update_version": {
                          "references": [
                            "var.force_update_version"
                          ]
                        },
                        "instance_types": {
                          "references": [
                            "var.capacity_type",
                            "var.instance_types"
                          ]
                        },
                        "labels": {
                          "references": [
                            "var.labels"
                          ]
                        },
                        "node_group_name": {
                          "references": [
                            "var.use_name_prefix",
                            "var.name"
                          ]
                        },
                        "node_group_name_prefix": {
                          "references": [
                            "var.use_name_prefix",
                            "var.name"
                          ]
                        },
                        "node_role_arn": {
                          "references": [
                            "var.create_iam_role",
                            "aws_iam_role.this[0].arn",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this",
                            "var.iam_role_arn"
                          ]
                        },
                        "release_version": {
                          "references": [
                            "var.ami_id",
                            "var.use_latest_ami_release_version",
                            "local.latest_ami_release_version",
                            "var.ami_release_version"
                          ]
                        },
                        "scaling_config": [
                          {
                            "desired_size": {
                              "references": [
                                "var.desired_size"
                              ]
                            },
                            "max_size": {
                              "references": [
                                "var.max_size"
                              ]
                            },
                            "min_size": {
                              "references": [
                                "var.min_size"
                              ]
                            }
                          }
                        ],
                        "subnet_ids": {
                          "references": [
                            "local.create_placement_group",
                            "data.aws_subnets.placement_group[0].ids",
                            "data.aws_subnets.placement_group[0]",
                            "data.aws_subnets.placement_group",
                            "var.subnet_ids"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags",
                            "var.name"
                          ]
                        },
                        "timeouts": {
                          "create": {
                            "references": [
                              "var.timeouts"
                            ]
                          },
                          "delete": {
                            "references": [
                              "var.timeouts"
                            ]
                          },
                          "update": {
                            "references": [
                              "var.timeouts"
                            ]
                          }
                        },
                        "version": {
                          "references": [
                            "var.ami_id",
                            "var.cluster_version"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role.this",
                      "mode": "managed",
                      "type": "aws_iam_role",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "assume_role_policy": {
                          "references": [
                            "data.aws_iam_policy_document.assume_role_policy[0].json",
                            "data.aws_iam_policy_document.assume_role_policy[0]",
                            "data.aws_iam_policy_document.assume_role_policy"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.iam_role_description"
                          ]
                        },
                        "force_detach_policies": {
                          "constant_value": true
                        },
                        "name": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "path": {
                          "references": [
                            "var.iam_role_path"
                          ]
                        },
                        "permissions_boundary": {
                          "references": [
                            "var.iam_role_permissions_boundary"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags",
                            "var.iam_role_tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy.this",
                      "mode": "managed",
                      "type": "aws_iam_role_policy",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "policy": {
                          "references": [
                            "data.aws_iam_policy_document.role[0].json",
                            "data.aws_iam_policy_document.role[0]",
                            "data.aws_iam_policy_document.role"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].id",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role_policy"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy_attachment.additional",
                      "mode": "managed",
                      "type": "aws_iam_role_policy_attachment",
                      "name": "additional",
                      "provider_config_key": "aws",
                      "expressions": {
                        "policy_arn": {
                          "references": [
                            "each.value"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].name",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "var.iam_role_additional_policies",
                          "local.create_iam_role"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy_attachment.this",
                      "mode": "managed",
                      "type": "aws_iam_role_policy_attachment",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "policy_arn": {
                          "references": [
                            "each.value"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].name",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "local.iam_role_policy_prefix",
                          "local.iam_role_policy_prefix",
                          "local.ipv4_cni_policy",
                          "local.ipv6_cni_policy",
                          "local.create_iam_role"
                        ]
                      }
                    },
                    {
                      "address": "aws_launch_template.this",
                      "mode": "managed",
                      "type": "aws_launch_template",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "default_version": {
                          "references": [
                            "var.launch_template_default_version"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.launch_template_description"
                          ]
                        },
                        "disable_api_termination": {
                          "references": [
                            "var.disable_api_termination"
                          ]
                        },
                        "ebs_optimized": {
                          "references": [
                            "var.ebs_optimized"
                          ]
                        },
                        "image_id": {
                          "references": [
                            "var.ami_id"
                          ]
                        },
                        "instance_type": {
                          "references": [
                            "var.capacity_type",
                            "var.instance_types"
                          ]
                        },
                        "kernel_id": {
                          "references": [
                            "var.kernel_id"
                          ]
                        },
                        "key_name": {
                          "references": [
                            "var.key_name"
                          ]
                        },
                        "name": {
                          "references": [
                            "var.launch_template_use_name_prefix",
                            "local.launch_template_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.launch_template_use_name_prefix",
                            "local.launch_template_name"
                          ]
                        },
                        "ram_disk_id": {
                          "references": [
                            "var.ram_disk_id"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags",
                            "var.launch_template_tags"
                          ]
                        },
                        "update_default_version": {
                          "references": [
                            "var.update_launch_template_default_version"
                          ]
                        },
                        "user_data": {
                          "references": [
                            "module.user_data.user_data",
                            "module.user_data"
                          ]
                        },
                        "vpc_security_group_ids": {
                          "references": [
                            "local.network_interfaces",
                            "local.security_group_ids"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.create_launch_template",
                          "var.use_custom_launch_template"
                        ]
                      },
                      "depends_on": [
                        "aws_iam_role_policy_attachment.this",
                        "aws_iam_role_policy_attachment.additional"
                      ]
                    },
                    {
                      "address": "aws_placement_group.this",
                      "mode": "managed",
                      "type": "aws_placement_group",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "var.cluster_name",
                            "var.name"
                          ]
                        },
                        "strategy": {
                          "references": [
                            "var.placement_group_strategy"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_placement_group"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_caller_identity.current",
                      "mode": "data",
                      "type": "aws_caller_identity",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0
                    },
                    {
                      "address": "data.aws_ec2_instance_type.this",
                      "mode": "data",
                      "type": "aws_ec2_instance_type",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "instance_type": {
                          "references": [
                            "local.efa_instance_type"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.enable_efa_support"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_ec2_instance_type_offerings.this",
                      "mode": "data",
                      "type": "aws_ec2_instance_type_offerings",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "filter": [
                          {
                            "name": {
                              "constant_value": "instance-type"
                            },
                            "values": {
                              "references": [
                                "local.efa_instance_type"
                              ]
                            }
                          }
                        ],
                        "location_type": {
                          "constant_value": "availability-zone-id"
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.enable_efa_support"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_iam_policy_document.assume_role_policy",
                      "mode": "data",
                      "type": "aws_iam_policy_document",
                      "name": "assume_role_policy",
                      "provider_config_key": "aws",
                      "expressions": {
                        "statement": [
                          {
                            "actions": {
                              "constant_value": [
                                "sts:AssumeRole"
                              ]
                            },
                            "principals": [
                              {
                                "identifiers": {
                                  "constant_value": [
                                    "ec2.amazonaws.com"
                                  ]
                                },
                                "type": {
                                  "constant_value": "Service"
                                }
                              }
                            ],
                            "sid": {
                              "constant_value": "EKSNodeAssumeRole"
                            }
                          }
                        ]
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_iam_policy_document.role",
                      "mode": "data",
                      "type": "aws_iam_policy_document",
                      "name": "role",
                      "provider_config_key": "aws",
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role_policy"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_partition.current",
                      "mode": "data",
                      "type": "aws_partition",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0
                    },
                    {
                      "address": "data.aws_ssm_parameter.ami",
                      "mode": "data",
                      "type": "aws_ssm_parameter",
                      "name": "ami",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "local.ssm_ami_type_to_ssm_param",
                            "var.ami_type"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.use_latest_ami_release_version"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_subnets.placement_group",
                      "mode": "data",
                      "type": "aws_subnets",
                      "name": "placement_group",
                      "provider_config_key": "aws",
                      "expressions": {
                        "filter": [
                          {
                            "name": {
                              "constant_value": "subnet-id"
                            },
                            "values": {
                              "references": [
                                "var.subnet_ids"
                              ]
                            }
                          }
                        ]
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_placement_group"
                        ]
                      }
                    }
                  ],
                  "module_calls": {
                    "user_data": {
                      "source": "../_user_data",
                      "expressions": {
                        "ami_type": {
                          "references": [
                            "var.ami_type"
                          ]
                        },
                        "bootstrap_extra_args": {
                          "references": [
                            "var.bootstrap_extra_args"
                          ]
                        },
                        "cloudinit_post_nodeadm": {
                          "references": [
                            "var.cloudinit_post_nodeadm"
                          ]
                        },
                        "cloudinit_pre_nodeadm": {
                          "references": [
                            "var.cloudinit_pre_nodeadm"
                          ]
                        },
                        "cluster_auth_base64": {
                          "references": [
                            "var.cluster_auth_base64"
                          ]
                        },
                        "cluster_endpoint": {
                          "references": [
                            "var.cluster_endpoint"
                          ]
                        },
                        "cluster_ip_family": {
                          "references": [
                            "var.cluster_ip_family"
                          ]
                        },
                        "cluster_name": {
                          "references": [
                            "var.cluster_name"
                          ]
                        },
                        "cluster_service_cidr": {
                          "references": [
                            "var.cluster_service_cidr",
                            "var.cluster_service_ipv4_cidr"
                          ]
                        },
                        "create": {
                          "references": [
                            "var.create"
                          ]
                        },
                        "enable_bootstrap_user_data": {
                          "references": [
                            "var.enable_bootstrap_user_data"
                          ]
                        },
                        "platform": {
                          "references": [
                            "var.platform"
                          ]
                        },
                        "post_bootstrap_user_data": {
                          "references": [
                            "var.post_bootstrap_user_data"
                          ]
                        },
                        "pre_bootstrap_user_data": {
                          "references": [
                            "var.pre_bootstrap_user_data"
                          ]
                        },
                        "user_data_template_path": {
                          "references": [
                            "var.user_data_template_path"
                          ]
                        }
                      },
                      "module": {
                        "outputs": {
                          "platform": {
                            "expression": {
                              "references": [
                                "local.user_data_type"
                              ]
                            },
                            "description": "[DEPRECATED - Will be removed in `v21.0`] Identifies the OS platform as `bottlerocket`, `linux` (AL2), `al2023, or `windows`"
                          },
                          "user_data": {
                            "expression": {
                              "references": [
                                "local.user_data_type_to_rendered",
                                "local.user_data_type"
                              ]
                            },
                            "description": "Base64 encoded user data rendered for the provided inputs"
                          }
                        },
                        "resources": [
                          {
                            "address": "null_resource.validate_cluster_service_cidr",
                            "mode": "managed",
                            "type": "null_resource",
                            "name": "validate_cluster_service_cidr",
                            "provider_config_key": "module.eks.module.eks_managed_node_group.module.user_data:null",
                            "schema_version": 0
                          },
                          {
                            "address": "data.cloudinit_config.al2023_eks_managed_node_group",
                            "mode": "data",
                            "type": "cloudinit_config",
                            "name": "al2023_eks_managed_node_group",
                            "provider_config_key": "module.eks.module.eks_managed_node_group.module.user_data:cloudinit",
                            "expressions": {
                              "base64_encode": {
                                "constant_value": true
                              },
                              "boundary": {
                                "constant_value": "MIMEBOUNDARY"
                              },
                              "gzip": {
                                "constant_value": false
                              }
                            },
                            "schema_version": 0,
                            "count_expression": {
                              "references": [
                                "var.create",
                                "local.user_data_type",
                                "local.nodeadm_cloudinit"
                              ]
                            }
                          },
                          {
                            "address": "data.cloudinit_config.linux_eks_managed_node_group",
                            "mode": "data",
                            "type": "cloudinit_config",
                            "name": "linux_eks_managed_node_group",
                            "provider_config_key": "module.eks.module.eks_managed_node_group.module.user_data:cloudinit",
                            "expressions": {
                              "base64_encode": {
                                "constant_value": true
                              },
                              "boundary": {
                                "constant_value": "//"
                              },
                              "gzip": {
                                "constant_value": false
                              },
                              "part": [
                                {
                                  "content": {
                                    "references": [
                                      "var.pre_bootstrap_user_data"
                                    ]
                                  },
                                  "content_type": {
                                    "constant_value": "text/x-shellscript"
                                  }
                                }
                              ]
                            },
                            "schema_version": 0,
                            "count_expression": {
                              "references": [
                                "var.create",
                                "local.user_data_type",
                                "var.is_eks_managed_node_group",
                                "var.enable_bootstrap_user_data",
                                "var.pre_bootstrap_user_data",
                                "var.user_data_template_path"
                              ]
                            }
                          }
                        ],
                        "variables": {
                          "additional_cluster_dns_ips": {
                            "default": [],
                            "description": "Additional DNS IP addresses to use for the cluster. Only used when `ami_type` = `BOTTLEROCKET_*`"
                          },
                          "ami_type": {
                            "default": null,
                            "description": "Type of Amazon Machine Image (AMI) associated with the EKS Node Group. See the [AWS documentation](https://docs.aws.amazon.com/eks/latest/APIReference/API_Nodegroup.html#AmazonEKS-Type-Nodegroup-amiType) for valid values"
                          },
                          "bootstrap_extra_args": {
                            "default": "",
                            "description": "Additional arguments passed to the bootstrap script. When `ami_type` = `BOTTLEROCKET_*`; these are additional [settings](https://github.com/bottlerocket-os/bottlerocket#settings) that are provided to the Bottlerocket user data"
                          },
                          "cloudinit_post_nodeadm": {
                            "default": [],
                            "description": "Array of cloud-init document parts that are created after the nodeadm document part"
                          },
                          "cloudinit_pre_nodeadm": {
                            "default": [],
                            "description": "Array of cloud-init document parts that are created before the nodeadm document part"
                          },
                          "cluster_auth_base64": {
                            "default": "",
                            "description": "Base64 encoded CA of associated EKS cluster"
                          },
                          "cluster_endpoint": {
                            "default": "",
                            "description": "Endpoint of associated EKS cluster"
                          },
                          "cluster_ip_family": {
                            "default": "ipv4",
                            "description": "The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`"
                          },
                          "cluster_name": {
                            "default": "",
                            "description": "Name of the EKS cluster"
                          },
                          "cluster_service_cidr": {
                            "default": "",
                            "description": "The CIDR block (IPv4 or IPv6) used by the cluster to assign Kubernetes service IP addresses. This is derived from the cluster itself"
                          },
                          "cluster_service_ipv4_cidr": {
                            "default": null,
                            "description": "[Deprecated] The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks"
                          },
                          "create": {
                            "default": true,
                            "description": "Determines whether to create user-data or not"
                          },
                          "enable_bootstrap_user_data": {
                            "default": false,
                            "description": "Determines whether the bootstrap configurations are populated within the user data template"
                          },
                          "is_eks_managed_node_group": {
                            "default": true,
                            "description": "Determines whether the user data is used on nodes in an EKS managed node group. Used to determine if user data will be appended or not"
                          },
                          "platform": {
                            "default": "linux",
                            "description": "[DEPRECATED - use `ami_type` instead. Will be removed in `v21.0`] Identifies the OS platform as `bottlerocket`, `linux` (AL2), `al2023`, or `windows`"
                          },
                          "post_bootstrap_user_data": {
                            "default": "",
                            "description": "User data that is appended to the user data script after of the EKS bootstrap script. Not used when `ami_type` = `BOTTLEROCKET_*`"
                          },
                          "pre_bootstrap_user_data": {
                            "default": "",
                            "description": "User data that is injected into the user data script ahead of the EKS bootstrap script. Not used when `ami_type` = `BOTTLEROCKET_*`"
                          },
                          "user_data_template_path": {
                            "default": "",
                            "description": "Path to a local, custom user data template file to use when rendering user data"
                          }
                        }
                      }
                    }
                  },
                  "variables": {
                    "ami_id": {
                      "default": "",
                      "description": "The AMI from which to launch the instance. If not supplied, EKS will use its own default image"
                    },
                    "ami_release_version": {
                      "default": null,
                      "description": "The AMI version. Defaults to latest AMI release version for the given Kubernetes version and AMI type"
                    },
                    "ami_type": {
                      "default": null,
                      "description": "Type of Amazon Machine Image (AMI) associated with the EKS Node Group. See the [AWS documentation](https://docs.aws.amazon.com/eks/latest/APIReference/API_Nodegroup.html#AmazonEKS-Type-Nodegroup-amiType) for valid values"
                    },
                    "block_device_mappings": {
                      "default": {},
                      "description": "Specify volumes to attach to the instance besides the volumes specified by the AMI"
                    },
                    "bootstrap_extra_args": {
                      "default": "",
                      "description": "Additional arguments passed to the bootstrap script. When `ami_type` = `BOTTLEROCKET_*`; these are additional [settings](https://github.com/bottlerocket-os/bottlerocket#settings) that are provided to the Bottlerocket user data"
                    },
                    "capacity_reservation_specification": {
                      "default": {},
                      "description": "Targeting for EC2 capacity reservations"
                    },
                    "capacity_type": {
                      "default": "ON_DEMAND",
                      "description": "Type of capacity associated with the EKS Node Group. Valid values: `ON_DEMAND`, `SPOT`"
                    },
                    "cloudinit_post_nodeadm": {
                      "default": [],
                      "description": "Array of cloud-init document parts that are created after the nodeadm document part"
                    },
                    "cloudinit_pre_nodeadm": {
                      "default": [],
                      "description": "Array of cloud-init document parts that are created before the nodeadm document part"
                    },
                    "cluster_auth_base64": {
                      "default": "",
                      "description": "Base64 encoded CA of associated EKS cluster"
                    },
                    "cluster_endpoint": {
                      "default": "",
                      "description": "Endpoint of associated EKS cluster"
                    },
                    "cluster_ip_family": {
                      "default": "ipv4",
                      "description": "The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`"
                    },
                    "cluster_name": {
                      "default": null,
                      "description": "Name of associated EKS cluster"
                    },
                    "cluster_primary_security_group_id": {
                      "default": null,
                      "description": "The ID of the EKS cluster primary security group to associate with the instance(s). This is the security group that is automatically created by the EKS service"
                    },
                    "cluster_service_cidr": {
                      "default": "",
                      "description": "The CIDR block (IPv4 or IPv6) used by the cluster to assign Kubernetes service IP addresses. This is derived from the cluster itself"
                    },
                    "cluster_service_ipv4_cidr": {
                      "default": null,
                      "description": "[Deprecated] The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks"
                    },
                    "cluster_version": {
                      "default": null,
                      "description": "Kubernetes version. Defaults to EKS Cluster Kubernetes version"
                    },
                    "cpu_options": {
                      "default": {},
                      "description": "The CPU options for the instance"
                    },
                    "create": {
                      "default": true,
                      "description": "Determines whether to create EKS managed node group or not"
                    },
                    "create_iam_role": {
                      "default": true,
                      "description": "Determines whether an IAM role is created or to use an existing IAM role"
                    },
                    "create_iam_role_policy": {
                      "default": true,
                      "description": "Determines whether an IAM role policy is created or not"
                    },
                    "create_launch_template": {
                      "default": true,
                      "description": "Determines whether to create a launch template or not. If set to `false`, EKS will use its own default launch template"
                    },
                    "create_placement_group": {
                      "default": false,
                      "description": "Determines whether a placement group is created & used by the node group"
                    },
                    "create_schedule": {
                      "default": true,
                      "description": "Determines whether to create autoscaling group schedule or not"
                    },
                    "credit_specification": {
                      "default": {},
                      "description": "Customize the credit specification of the instance"
                    },
                    "desired_size": {
                      "default": 1,
                      "description": "Desired number of instances/nodes"
                    },
                    "disable_api_termination": {
                      "default": null,
                      "description": "If true, enables EC2 instance termination protection"
                    },
                    "disk_size": {
                      "default": null,
                      "description": "Disk size in GiB for nodes. Defaults to `20`. Only valid when `use_custom_launch_template` = `false`"
                    },
                    "ebs_optimized": {
                      "default": null,
                      "description": "If true, the launched EC2 instance(s) will be EBS-optimized"
                    },
                    "efa_indices": {
                      "default": [
                        0
                      ],
                      "description": "The indices of the network interfaces that should be EFA-enabled. Only valid when `enable_efa_support` = `true`"
                    },
                    "elastic_gpu_specifications": {
                      "default": {},
                      "description": "The elastic GPU to attach to the instance"
                    },
                    "elastic_inference_accelerator": {
                      "default": {},
                      "description": "Configuration block containing an Elastic Inference Accelerator to attach to the instance"
                    },
                    "enable_bootstrap_user_data": {
                      "default": false,
                      "description": "Determines whether the bootstrap configurations are populated within the user data template. Only valid when using a custom AMI via `ami_id`"
                    },
                    "enable_efa_only": {
                      "default": false,
                      "description": "Determines whether to enable EFA (`false`, default) or EFA and EFA-only (`true`) network interfaces. Note: requires vpc-cni version `v1.18.4` or later"
                    },
                    "enable_efa_support": {
                      "default": false,
                      "description": "Determines whether to enable Elastic Fabric Adapter (EFA) support"
                    },
                    "enable_monitoring": {
                      "default": true,
                      "description": "Enables/disables detailed monitoring"
                    },
                    "enclave_options": {
                      "default": {},
                      "description": "Enable Nitro Enclaves on launched instances"
                    },
                    "force_update_version": {
                      "default": null,
                      "description": "Force version update if existing pods are unable to be drained due to a pod disruption budget issue"
                    },
                    "iam_role_additional_policies": {
                      "default": {},
                      "description": "Additional policies to be added to the IAM role"
                    },
                    "iam_role_arn": {
                      "default": null,
                      "description": "Existing IAM role ARN for the node group. Required if `create_iam_role` is set to `false`"
                    },
                    "iam_role_attach_cni_policy": {
                      "default": true,
                      "description": "Whether to attach the `AmazonEKS_CNI_Policy`/`AmazonEKS_CNI_IPv6_Policy` IAM policy to the IAM IAM role. WARNING: If set `false` the permissions must be assigned to the `aws-node` DaemonSet pods via another method or nodes will not be able to join the cluster"
                    },
                    "iam_role_description": {
                      "default": null,
                      "description": "Description of the role"
                    },
                    "iam_role_name": {
                      "default": null,
                      "description": "Name to use on IAM role created"
                    },
                    "iam_role_path": {
                      "default": null,
                      "description": "IAM role path"
                    },
                    "iam_role_permissions_boundary": {
                      "default": null,
                      "description": "ARN of the policy that is used to set the permissions boundary for the IAM role"
                    },
                    "iam_role_policy_statements": {
                      "default": [],
                      "description": "A list of IAM policy [statements](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document#statement) - used for adding specific IAM permissions as needed"
                    },
                    "iam_role_tags": {
                      "default": {},
                      "description": "A map of additional tags to add to the IAM role created"
                    },
                    "iam_role_use_name_prefix": {
                      "default": true,
                      "description": "Determines whether the IAM role name (`iam_role_name`) is used as a prefix"
                    },
                    "instance_market_options": {
                      "default": {},
                      "description": "The market (purchasing) option for the instance"
                    },
                    "instance_types": {
                      "default": null,
                      "description": "Set of instance types associated with the EKS Node Group. Defaults to `[\"t3.medium\"]`"
                    },
                    "kernel_id": {
                      "default": null,
                      "description": "The kernel ID"
                    },
                    "key_name": {
                      "default": null,
                      "description": "The key name that should be used for the instance(s)"
                    },
                    "labels": {
                      "default": null,
                      "description": "Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed"
                    },
                    "launch_template_default_version": {
                      "default": null,
                      "description": "Default version of the launch template"
                    },
                    "launch_template_description": {
                      "default": null,
                      "description": "Description of the launch template"
                    },
                    "launch_template_id": {
                      "default": "",
                      "description": "The ID of an existing launch template to use. Required when `create_launch_template` = `false` and `use_custom_launch_template` = `true`"
                    },
                    "launch_template_name": {
                      "default": null,
                      "description": "Name of launch template to be created"
                    },
                    "launch_template_tags": {
                      "default": {},
                      "description": "A map of additional tags to add to the tag_specifications of launch template created"
                    },
                    "launch_template_use_name_prefix": {
                      "default": true,
                      "description": "Determines whether to use `launch_template_name` as is or create a unique name beginning with the `launch_template_name` as the prefix"
                    },
                    "launch_template_version": {
                      "default": null,
                      "description": "Launch template version number. The default is `$Default`"
                    },
                    "license_specifications": {
                      "default": {},
                      "description": "A map of license specifications to associate with"
                    },
                    "maintenance_options": {
                      "default": {},
                      "description": "The maintenance options for the instance"
                    },
                    "max_size": {
                      "default": 3,
                      "description": "Maximum number of instances/nodes"
                    },
                    "metadata_options": {
                      "default": {
                        "http_endpoint": "enabled",
                        "http_put_response_hop_limit": "2",
                        "http_tokens": "required"
                      },
                      "description": "Customize the metadata options for the instance"
                    },
                    "min_size": {
                      "default": 0,
                      "description": "Minimum number of instances/nodes"
                    },
                    "name": {
                      "default": "",
                      "description": "Name of the EKS managed node group"
                    },
                    "network_interfaces": {
                      "default": [],
                      "description": "Customize network interfaces to be attached at instance boot time"
                    },
                    "node_repair_config": {
                      "default": null,
                      "description": "The node auto repair configuration for the node group"
                    },
                    "placement": {
                      "default": {},
                      "description": "The placement of the instance"
                    },
                    "placement_group_az": {
                      "default": null,
                      "description": "Availability zone where placement group is created (ex. `eu-west-1c`)"
                    },
                    "placement_group_strategy": {
                      "default": "cluster",
                      "description": "The placement group strategy"
                    },
                    "platform": {
                      "default": "linux",
                      "description": "[DEPRECATED - use `ami_type` instead. Will be removed in `v21.0`] Identifies the OS platform as `bottlerocket`, `linux` (AL2), `al2023`, or `windows`"
                    },
                    "post_bootstrap_user_data": {
                      "default": "",
                      "description": "User data that is appended to the user data script after of the EKS bootstrap script. Not used when `ami_type` = `BOTTLEROCKET_*`"
                    },
                    "pre_bootstrap_user_data": {
                      "default": "",
                      "description": "User data that is injected into the user data script ahead of the EKS bootstrap script. Not used when `ami_type` = `BOTTLEROCKET_*`"
                    },
                    "private_dns_name_options": {
                      "default": {},
                      "description": "The options for the instance hostname. The default values are inherited from the subnet"
                    },
                    "ram_disk_id": {
                      "default": null,
                      "description": "The ID of the ram disk"
                    },
                    "remote_access": {
                      "default": {},
                      "description": "Configuration block with remote access settings. Only valid when `use_custom_launch_template` = `false`"
                    },
                    "schedules": {
                      "default": {},
                      "description": "Map of autoscaling group schedule to create"
                    },
                    "subnet_ids": {
                      "default": null,
                      "description": "Identifiers of EC2 Subnets to associate with the EKS Node Group. These subnets must have the following resource tag: `kubernetes.io/cluster/CLUSTER_NAME`"
                    },
                    "tag_specifications": {
                      "default": [
                        "instance",
                        "volume",
                        "network-interface"
                      ],
                      "description": "The tags to apply to the resources during launch"
                    },
                    "tags": {
                      "default": {},
                      "description": "A map of tags to add to all resources"
                    },
                    "taints": {
                      "default": {},
                      "description": "The Kubernetes taints to be applied to the nodes in the node group. Maximum of 50 taints per node group"
                    },
                    "timeouts": {
                      "default": {},
                      "description": "Create, update, and delete timeout configurations for the node group"
                    },
                    "update_config": {
                      "default": {
                        "max_unavailable_percentage": "33"
                      },
                      "description": "Configuration block of settings for max unavailable resources during node group updates"
                    },
                    "update_launch_template_default_version": {
                      "default": true,
                      "description": "Whether to update the launch templates default version on each update. Conflicts with `launch_template_default_version`"
                    },
                    "use_custom_launch_template": {
                      "default": true,
                      "description": "Determines whether to use a custom launch template or not. If set to `false`, EKS will use its own default launch template"
                    },
                    "use_latest_ami_release_version": {
                      "default": false,
                      "description": "Determines whether to use the latest AMI release version for the given `ami_type` (except for `CUSTOM`). Note: `ami_type` and `cluster_version` must be supplied in order to enable this feature"
                    },
                    "use_name_prefix": {
                      "default": true,
                      "description": "Determines whether to use `name` as is or create a unique name beginning with the `name` as the prefix"
                    },
                    "user_data_template_path": {
                      "default": "",
                      "description": "Path to a local, custom user data template file to use when rendering user data"
                    },
                    "vpc_security_group_ids": {
                      "default": [],
                      "description": "A list of security group IDs to associate"
                    }
                  }
                }
              },
              "fargate_profile": {
                "source": "./modules/fargate-profile",
                "expressions": {
                  "cluster_ip_family": {
                    "references": [
                      "var.cluster_ip_family"
                    ]
                  },
                  "cluster_name": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_name\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "create": {
                    "references": [
                      "each.value.create",
                      "each.value"
                    ]
                  },
                  "create_iam_role": {
                    "references": [
                      "each.value.create_iam_role",
                      "each.value",
                      "var.fargate_profile_defaults.create_iam_role",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "create_iam_role_policy": {
                    "references": [
                      "each.value.create_iam_role_policy",
                      "each.value",
                      "var.fargate_profile_defaults.create_iam_role_policy",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_additional_policies": {
                    "references": [
                      "each.value",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_arn": {
                    "references": [
                      "each.value.iam_role_arn",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_arn",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_attach_cni_policy": {
                    "references": [
                      "each.value.iam_role_attach_cni_policy",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_attach_cni_policy",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_description": {
                    "references": [
                      "each.value.iam_role_description",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_description",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_name": {
                    "references": [
                      "each.value.iam_role_name",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_name",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_path": {
                    "references": [
                      "each.value.iam_role_path",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_path",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_permissions_boundary": {
                    "references": [
                      "each.value.iam_role_permissions_boundary",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_permissions_boundary",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_policy_statements": {
                    "references": [
                      "each.value.iam_role_policy_statements",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_policy_statements",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_tags": {
                    "references": [
                      "each.value.iam_role_tags",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_tags",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "iam_role_use_name_prefix": {
                    "references": [
                      "each.value.iam_role_use_name_prefix",
                      "each.value",
                      "var.fargate_profile_defaults.iam_role_use_name_prefix",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "name": {
                    "references": [
                      "each.value.name",
                      "each.value",
                      "each.key"
                    ]
                  },
                  "selectors": {
                    "references": [
                      "each.value.selectors",
                      "each.value",
                      "var.fargate_profile_defaults.selectors",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "each.value.subnet_ids",
                      "each.value",
                      "var.fargate_profile_defaults.subnet_ids",
                      "var.fargate_profile_defaults",
                      "var.subnet_ids"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "each.value.tags",
                      "each.value",
                      "var.fargate_profile_defaults.tags",
                      "var.fargate_profile_defaults"
                    ]
                  },
                  "timeouts": {
                    "references": [
                      "each.value.timeouts",
                      "each.value",
                      "var.fargate_profile_defaults.timeouts",
                      "var.fargate_profile_defaults"
                    ]
                  }
                },
                "for_each_expression": {
                  "references": [
                    "var.fargate_profiles",
                    "var.create",
                    "local.create_outposts_local_cluster"
                  ]
                },
                "module": {
                  "outputs": {
                    "fargate_profile_arn": {
                      "expression": {
                        "references": [
                          "aws_eks_fargate_profile.this[0].arn",
                          "aws_eks_fargate_profile.this[0]",
                          "aws_eks_fargate_profile.this"
                        ]
                      },
                      "description": "Amazon Resource Name (ARN) of the EKS Fargate Profile"
                    },
                    "fargate_profile_id": {
                      "expression": {
                        "references": [
                          "aws_eks_fargate_profile.this[0].id",
                          "aws_eks_fargate_profile.this[0]",
                          "aws_eks_fargate_profile.this"
                        ]
                      },
                      "description": "EKS Cluster name and EKS Fargate Profile name separated by a colon (`:`)"
                    },
                    "fargate_profile_pod_execution_role_arn": {
                      "expression": {
                        "references": [
                          "aws_eks_fargate_profile.this[0].pod_execution_role_arn",
                          "aws_eks_fargate_profile.this[0]",
                          "aws_eks_fargate_profile.this"
                        ]
                      },
                      "description": "Amazon Resource Name (ARN) of the EKS Fargate Profile Pod execution role ARN"
                    },
                    "fargate_profile_status": {
                      "expression": {
                        "references": [
                          "aws_eks_fargate_profile.this[0].status",
                          "aws_eks_fargate_profile.this[0]",
                          "aws_eks_fargate_profile.this"
                        ]
                      },
                      "description": "Status of the EKS Fargate Profile"
                    },
                    "iam_role_arn": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].arn",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this",
                          "var.iam_role_arn"
                        ]
                      },
                      "description": "The Amazon Resource Name (ARN) specifying the IAM role"
                    },
                    "iam_role_name": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].name",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this"
                        ]
                      },
                      "description": "The name of the IAM role"
                    },
                    "iam_role_unique_id": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].unique_id",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this"
                        ]
                      },
                      "description": "Stable and unique string identifying the IAM role"
                    }
                  },
                  "resources": [
                    {
                      "address": "aws_eks_fargate_profile.this",
                      "mode": "managed",
                      "type": "aws_eks_fargate_profile",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "cluster_name": {
                          "references": [
                            "var.cluster_name"
                          ]
                        },
                        "fargate_profile_name": {
                          "references": [
                            "var.name"
                          ]
                        },
                        "pod_execution_role_arn": {
                          "references": [
                            "var.create_iam_role",
                            "aws_iam_role.this[0].arn",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this",
                            "var.iam_role_arn"
                          ]
                        },
                        "subnet_ids": {
                          "references": [
                            "var.subnet_ids"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role.this",
                      "mode": "managed",
                      "type": "aws_iam_role",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "assume_role_policy": {
                          "references": [
                            "data.aws_iam_policy_document.assume_role_policy[0].json",
                            "data.aws_iam_policy_document.assume_role_policy[0]",
                            "data.aws_iam_policy_document.assume_role_policy"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.iam_role_description"
                          ]
                        },
                        "force_detach_policies": {
                          "constant_value": true
                        },
                        "name": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "path": {
                          "references": [
                            "var.iam_role_path"
                          ]
                        },
                        "permissions_boundary": {
                          "references": [
                            "var.iam_role_permissions_boundary"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags",
                            "var.iam_role_tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy.this",
                      "mode": "managed",
                      "type": "aws_iam_role_policy",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "policy": {
                          "references": [
                            "data.aws_iam_policy_document.role[0].json",
                            "data.aws_iam_policy_document.role[0]",
                            "data.aws_iam_policy_document.role"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].id",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role_policy"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy_attachment.additional",
                      "mode": "managed",
                      "type": "aws_iam_role_policy_attachment",
                      "name": "additional",
                      "provider_config_key": "aws",
                      "expressions": {
                        "policy_arn": {
                          "references": [
                            "each.value"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].name",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "var.iam_role_additional_policies",
                          "local.create_iam_role"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy_attachment.this",
                      "mode": "managed",
                      "type": "aws_iam_role_policy_attachment",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "policy_arn": {
                          "references": [
                            "each.value"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].name",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "local.iam_role_policy_prefix",
                          "local.ipv4_cni_policy",
                          "local.ipv6_cni_policy",
                          "local.create_iam_role"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_caller_identity.current",
                      "mode": "data",
                      "type": "aws_caller_identity",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0
                    },
                    {
                      "address": "data.aws_iam_policy_document.assume_role_policy",
                      "mode": "data",
                      "type": "aws_iam_policy_document",
                      "name": "assume_role_policy",
                      "provider_config_key": "aws",
                      "expressions": {
                        "statement": [
                          {
                            "actions": {
                              "constant_value": [
                                "sts:AssumeRole"
                              ]
                            },
                            "condition": [
                              {
                                "test": {
                                  "constant_value": "ArnLike"
                                },
                                "values": {
                                  "references": [
                                    "data.aws_partition.current.partition",
                                    "data.aws_partition.current",
                                    "data.aws_region.current.name",
                                    "data.aws_region.current",
                                    "data.aws_caller_identity.current.account_id",
                                    "data.aws_caller_identity.current",
                                    "var.cluster_name"
                                  ]
                                },
                                "variable": {
                                  "constant_value": "aws:SourceArn"
                                }
                              }
                            ],
                            "effect": {
                              "constant_value": "Allow"
                            },
                            "principals": [
                              {
                                "identifiers": {
                                  "constant_value": [
                                    "eks-fargate-pods.amazonaws.com"
                                  ]
                                },
                                "type": {
                                  "constant_value": "Service"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_iam_policy_document.role",
                      "mode": "data",
                      "type": "aws_iam_policy_document",
                      "name": "role",
                      "provider_config_key": "aws",
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role_policy"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_partition.current",
                      "mode": "data",
                      "type": "aws_partition",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0
                    },
                    {
                      "address": "data.aws_region.current",
                      "mode": "data",
                      "type": "aws_region",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0
                    }
                  ],
                  "variables": {
                    "cluster_ip_family": {
                      "default": "ipv4",
                      "description": "The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`"
                    },
                    "cluster_name": {
                      "default": null,
                      "description": "Name of the EKS cluster"
                    },
                    "create": {
                      "default": true,
                      "description": "Determines whether to create Fargate profile or not"
                    },
                    "create_iam_role": {
                      "default": true,
                      "description": "Determines whether an IAM role is created or to use an existing IAM role"
                    },
                    "create_iam_role_policy": {
                      "default": true,
                      "description": "Determines whether an IAM role policy is created or not"
                    },
                    "iam_role_additional_policies": {
                      "default": {},
                      "description": "Additional policies to be added to the IAM role"
                    },
                    "iam_role_arn": {
                      "default": null,
                      "description": "Existing IAM role ARN for the Fargate profile. Required if `create_iam_role` is set to `false`"
                    },
                    "iam_role_attach_cni_policy": {
                      "default": true,
                      "description": "Whether to attach the `AmazonEKS_CNI_Policy`/`AmazonEKS_CNI_IPv6_Policy` IAM policy to the IAM IAM role. WARNING: If set `false` the permissions must be assigned to the `aws-node` DaemonSet pods via another method or nodes will not be able to join the cluster"
                    },
                    "iam_role_description": {
                      "default": null,
                      "description": "Description of the role"
                    },
                    "iam_role_name": {
                      "default": "",
                      "description": "Name to use on IAM role created"
                    },
                    "iam_role_path": {
                      "default": null,
                      "description": "IAM role path"
                    },
                    "iam_role_permissions_boundary": {
                      "default": null,
                      "description": "ARN of the policy that is used to set the permissions boundary for the IAM role"
                    },
                    "iam_role_policy_statements": {
                      "default": [],
                      "description": "A list of IAM policy [statements](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document#statement) - used for adding specific IAM permissions as needed"
                    },
                    "iam_role_tags": {
                      "default": {},
                      "description": "A map of additional tags to add to the IAM role created"
                    },
                    "iam_role_use_name_prefix": {
                      "default": true,
                      "description": "Determines whether the IAM role name (`iam_role_name`) is used as a prefix"
                    },
                    "name": {
                      "default": "",
                      "description": "Name of the EKS Fargate Profile"
                    },
                    "selectors": {
                      "default": [],
                      "description": "Configuration block(s) for selecting Kubernetes Pods to execute with this Fargate Profile"
                    },
                    "subnet_ids": {
                      "default": [],
                      "description": "A list of subnet IDs for the EKS Fargate Profile"
                    },
                    "tags": {
                      "default": {},
                      "description": "A map of tags to add to all resources"
                    },
                    "timeouts": {
                      "default": {},
                      "description": "Create and delete timeout configurations for the Fargate Profile"
                    }
                  }
                }
              },
              "kms": {
                "source": "terraform-aws-modules/kms/aws",
                "expressions": {
                  "aliases": {
                    "references": [
                      "var.kms_key_aliases"
                    ]
                  },
                  "computed_aliases": {
                    "references": [
                      "var.cluster_name"
                    ]
                  },
                  "create": {
                    "references": [
                      "local.create",
                      "var.create_kms_key",
                      "local.enable_cluster_encryption_config"
                    ]
                  },
                  "deletion_window_in_days": {
                    "references": [
                      "var.kms_key_deletion_window_in_days"
                    ]
                  },
                  "description": {
                    "references": [
                      "var.kms_key_description",
                      "var.cluster_name"
                    ]
                  },
                  "enable_default_policy": {
                    "references": [
                      "var.kms_key_enable_default_policy"
                    ]
                  },
                  "enable_key_rotation": {
                    "references": [
                      "var.enable_kms_key_rotation"
                    ]
                  },
                  "key_administrators": {
                    "references": [
                      "var.kms_key_administrators",
                      "data.aws_iam_session_context.current[0].issuer_arn",
                      "data.aws_iam_session_context.current[0]",
                      "data.aws_iam_session_context.current"
                    ]
                  },
                  "key_owners": {
                    "references": [
                      "var.kms_key_owners"
                    ]
                  },
                  "key_service_users": {
                    "references": [
                      "var.kms_key_service_users"
                    ]
                  },
                  "key_usage": {
                    "constant_value": "ENCRYPT_DECRYPT"
                  },
                  "key_users": {
                    "references": [
                      "local.cluster_role",
                      "var.kms_key_users"
                    ]
                  },
                  "override_policy_documents": {
                    "references": [
                      "var.kms_key_override_policy_documents"
                    ]
                  },
                  "source_policy_documents": {
                    "references": [
                      "var.kms_key_source_policy_documents"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags"
                    ]
                  }
                },
                "module": {
                  "outputs": {
                    "aliases": {
                      "expression": {
                        "references": [
                          "aws_kms_alias.this"
                        ]
                      },
                      "description": "A map of aliases created and their attributes"
                    },
                    "external_key_expiration_model": {
                      "expression": {
                        "references": [
                          "aws_kms_external_key.this[0].expiration_model",
                          "aws_kms_external_key.this[0]",
                          "aws_kms_external_key.this",
                          "aws_kms_replica_external_key.this[0].expiration_model",
                          "aws_kms_replica_external_key.this[0]",
                          "aws_kms_replica_external_key.this"
                        ]
                      },
                      "description": "Whether the key material expires. Empty when pending key material import, otherwise `KEY_MATERIAL_EXPIRES` or `KEY_MATERIAL_DOES_NOT_EXPIRE`"
                    },
                    "external_key_state": {
                      "expression": {
                        "references": [
                          "aws_kms_external_key.this[0].key_state",
                          "aws_kms_external_key.this[0]",
                          "aws_kms_external_key.this",
                          "aws_kms_replica_external_key.this[0].key_state",
                          "aws_kms_replica_external_key.this[0]",
                          "aws_kms_replica_external_key.this"
                        ]
                      },
                      "description": "The state of the CMK"
                    },
                    "external_key_usage": {
                      "expression": {
                        "references": [
                          "aws_kms_external_key.this[0].key_usage",
                          "aws_kms_external_key.this[0]",
                          "aws_kms_external_key.this",
                          "aws_kms_replica_external_key.this[0].key_usage",
                          "aws_kms_replica_external_key.this[0]",
                          "aws_kms_replica_external_key.this"
                        ]
                      },
                      "description": "The cryptographic operations for which you can use the CMK"
                    },
                    "grants": {
                      "expression": {
                        "references": [
                          "aws_kms_grant.this"
                        ]
                      },
                      "description": "A map of grants created and their attributes"
                    },
                    "key_arn": {
                      "expression": {
                        "references": [
                          "aws_kms_key.this[0].arn",
                          "aws_kms_key.this[0]",
                          "aws_kms_key.this",
                          "aws_kms_external_key.this[0].arn",
                          "aws_kms_external_key.this[0]",
                          "aws_kms_external_key.this",
                          "aws_kms_replica_key.this[0].arn",
                          "aws_kms_replica_key.this[0]",
                          "aws_kms_replica_key.this",
                          "aws_kms_replica_external_key.this[0].arn",
                          "aws_kms_replica_external_key.this[0]",
                          "aws_kms_replica_external_key.this"
                        ]
                      },
                      "description": "The Amazon Resource Name (ARN) of the key"
                    },
                    "key_id": {
                      "expression": {
                        "references": [
                          "aws_kms_key.this[0].key_id",
                          "aws_kms_key.this[0]",
                          "aws_kms_key.this",
                          "aws_kms_external_key.this[0].id",
                          "aws_kms_external_key.this[0]",
                          "aws_kms_external_key.this",
                          "aws_kms_replica_key.this[0].key_id",
                          "aws_kms_replica_key.this[0]",
                          "aws_kms_replica_key.this",
                          "aws_kms_replica_external_key.this[0].key_id",
                          "aws_kms_replica_external_key.this[0]",
                          "aws_kms_replica_external_key.this"
                        ]
                      },
                      "description": "The globally unique identifier for the key"
                    },
                    "key_policy": {
                      "expression": {
                        "references": [
                          "aws_kms_key.this[0].policy",
                          "aws_kms_key.this[0]",
                          "aws_kms_key.this",
                          "aws_kms_external_key.this[0].policy",
                          "aws_kms_external_key.this[0]",
                          "aws_kms_external_key.this",
                          "aws_kms_replica_key.this[0].policy",
                          "aws_kms_replica_key.this[0]",
                          "aws_kms_replica_key.this",
                          "aws_kms_replica_external_key.this[0].policy",
                          "aws_kms_replica_external_key.this[0]",
                          "aws_kms_replica_external_key.this"
                        ]
                      },
                      "description": "The IAM resource policy set on the key"
                    }
                  },
                  "resources": [
                    {
                      "address": "aws_kms_alias.this",
                      "mode": "managed",
                      "type": "aws_kms_alias",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "var.aliases_use_name_prefix",
                            "each.value.name",
                            "each.value"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.aliases_use_name_prefix",
                            "each.value.name",
                            "each.value"
                          ]
                        },
                        "target_key_id": {
                          "references": [
                            "aws_kms_key.this[0].key_id",
                            "aws_kms_key.this[0]",
                            "aws_kms_key.this",
                            "aws_kms_external_key.this[0].id",
                            "aws_kms_external_key.this[0]",
                            "aws_kms_external_key.this",
                            "aws_kms_replica_key.this[0].key_id",
                            "aws_kms_replica_key.this[0]",
                            "aws_kms_replica_key.this",
                            "aws_kms_replica_external_key.this[0].key_id",
                            "aws_kms_replica_external_key.this[0]",
                            "aws_kms_replica_external_key.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "local.aliases",
                          "var.computed_aliases",
                          "var.create"
                        ]
                      }
                    },
                    {
                      "address": "aws_kms_external_key.this",
                      "mode": "managed",
                      "type": "aws_kms_external_key",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "bypass_policy_lockout_safety_check": {
                          "references": [
                            "var.bypass_policy_lockout_safety_check"
                          ]
                        },
                        "deletion_window_in_days": {
                          "references": [
                            "var.deletion_window_in_days"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.description"
                          ]
                        },
                        "enabled": {
                          "references": [
                            "var.is_enabled"
                          ]
                        },
                        "key_material_base64": {
                          "references": [
                            "var.key_material_base64"
                          ]
                        },
                        "multi_region": {
                          "references": [
                            "var.multi_region"
                          ]
                        },
                        "policy": {
                          "references": [
                            "var.policy",
                            "data.aws_iam_policy_document.this[0].json",
                            "data.aws_iam_policy_document.this[0]",
                            "data.aws_iam_policy_document.this"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        },
                        "valid_to": {
                          "references": [
                            "var.valid_to"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.create_external",
                          "var.create_replica",
                          "var.create_replica_external"
                        ]
                      }
                    },
                    {
                      "address": "aws_kms_grant.this",
                      "mode": "managed",
                      "type": "aws_kms_grant",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "grant_creation_tokens": {
                          "references": [
                            "each.value.grant_creation_tokens",
                            "each.value"
                          ]
                        },
                        "grantee_principal": {
                          "references": [
                            "each.value.grantee_principal",
                            "each.value"
                          ]
                        },
                        "key_id": {
                          "references": [
                            "aws_kms_key.this[0].key_id",
                            "aws_kms_key.this[0]",
                            "aws_kms_key.this",
                            "aws_kms_external_key.this[0].id",
                            "aws_kms_external_key.this[0]",
                            "aws_kms_external_key.this",
                            "aws_kms_replica_key.this[0].key_id",
                            "aws_kms_replica_key.this[0]",
                            "aws_kms_replica_key.this",
                            "aws_kms_replica_external_key.this[0].key_id",
                            "aws_kms_replica_external_key.this[0]",
                            "aws_kms_replica_external_key.this"
                          ]
                        },
                        "name": {
                          "references": [
                            "each.value.name",
                            "each.value",
                            "each.key"
                          ]
                        },
                        "operations": {
                          "references": [
                            "each.value.operations",
                            "each.value"
                          ]
                        },
                        "retire_on_delete": {
                          "references": [
                            "each.value.retire_on_delete",
                            "each.value"
                          ]
                        },
                        "retiring_principal": {
                          "references": [
                            "each.value.retiring_principal",
                            "each.value"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "var.grants",
                          "var.create"
                        ]
                      }
                    },
                    {
                      "address": "aws_kms_key.this",
                      "mode": "managed",
                      "type": "aws_kms_key",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "bypass_policy_lockout_safety_check": {
                          "references": [
                            "var.bypass_policy_lockout_safety_check"
                          ]
                        },
                        "custom_key_store_id": {
                          "references": [
                            "var.custom_key_store_id"
                          ]
                        },
                        "customer_master_key_spec": {
                          "references": [
                            "var.customer_master_key_spec"
                          ]
                        },
                        "deletion_window_in_days": {
                          "references": [
                            "var.deletion_window_in_days"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.description"
                          ]
                        },
                        "enable_key_rotation": {
                          "references": [
                            "var.enable_key_rotation"
                          ]
                        },
                        "is_enabled": {
                          "references": [
                            "var.is_enabled"
                          ]
                        },
                        "key_usage": {
                          "references": [
                            "var.key_usage"
                          ]
                        },
                        "multi_region": {
                          "references": [
                            "var.multi_region"
                          ]
                        },
                        "policy": {
                          "references": [
                            "var.policy",
                            "data.aws_iam_policy_document.this[0].json",
                            "data.aws_iam_policy_document.this[0]",
                            "data.aws_iam_policy_document.this"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.create_external",
                          "var.create_replica",
                          "var.create_replica_external"
                        ]
                      }
                    },
                    {
                      "address": "aws_kms_replica_external_key.this",
                      "mode": "managed",
                      "type": "aws_kms_replica_external_key",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "bypass_policy_lockout_safety_check": {
                          "references": [
                            "var.bypass_policy_lockout_safety_check"
                          ]
                        },
                        "deletion_window_in_days": {
                          "references": [
                            "var.deletion_window_in_days"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.description"
                          ]
                        },
                        "enabled": {
                          "references": [
                            "var.is_enabled"
                          ]
                        },
                        "key_material_base64": {
                          "references": [
                            "var.key_material_base64"
                          ]
                        },
                        "policy": {
                          "references": [
                            "var.policy",
                            "data.aws_iam_policy_document.this[0].json",
                            "data.aws_iam_policy_document.this[0]",
                            "data.aws_iam_policy_document.this"
                          ]
                        },
                        "primary_key_arn": {
                          "references": [
                            "var.primary_external_key_arn"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        },
                        "valid_to": {
                          "references": [
                            "var.valid_to"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.create_replica",
                          "var.create_external",
                          "var.create_replica_external"
                        ]
                      }
                    },
                    {
                      "address": "aws_kms_replica_key.this",
                      "mode": "managed",
                      "type": "aws_kms_replica_key",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "bypass_policy_lockout_safety_check": {
                          "references": [
                            "var.bypass_policy_lockout_safety_check"
                          ]
                        },
                        "deletion_window_in_days": {
                          "references": [
                            "var.deletion_window_in_days"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.description"
                          ]
                        },
                        "enabled": {
                          "references": [
                            "var.is_enabled"
                          ]
                        },
                        "policy": {
                          "references": [
                            "var.policy",
                            "data.aws_iam_policy_document.this[0].json",
                            "data.aws_iam_policy_document.this[0]",
                            "data.aws_iam_policy_document.this"
                          ]
                        },
                        "primary_key_arn": {
                          "references": [
                            "var.primary_key_arn"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.create_replica",
                          "var.create_external",
                          "var.create_replica_external"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_caller_identity.current",
                      "mode": "data",
                      "type": "aws_caller_identity",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_iam_policy_document.this",
                      "mode": "data",
                      "type": "aws_iam_policy_document",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "override_policy_documents": {
                          "references": [
                            "var.override_policy_documents"
                          ]
                        },
                        "source_policy_documents": {
                          "references": [
                            "var.source_policy_documents"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_partition.current",
                      "mode": "data",
                      "type": "aws_partition",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create"
                        ]
                      }
                    }
                  ],
                  "variables": {
                    "aliases": {
                      "default": [],
                      "description": "A list of aliases to create. Note - due to the use of `toset()`, values must be static strings and not computed values"
                    },
                    "aliases_use_name_prefix": {
                      "default": false,
                      "description": "Determines whether the alias name is used as a prefix"
                    },
                    "bypass_policy_lockout_safety_check": {
                      "default": null,
                      "description": "A flag to indicate whether to bypass the key policy lockout safety check. Setting this value to true increases the risk that the KMS key becomes unmanageable"
                    },
                    "computed_aliases": {
                      "default": {},
                      "description": "A map of aliases to create. Values provided via the `name` key of the map can be computed from upstream resources"
                    },
                    "create": {
                      "default": true,
                      "description": "Determines whether resources will be created (affects all resources)"
                    },
                    "create_external": {
                      "default": false,
                      "description": "Determines whether an external CMK (externally provided material) will be created or a standard CMK (AWS provided material)"
                    },
                    "create_replica": {
                      "default": false,
                      "description": "Determines whether a replica standard CMK will be created (AWS provided material)"
                    },
                    "create_replica_external": {
                      "default": false,
                      "description": "Determines whether a replica external CMK will be created (externally provided material)"
                    },
                    "custom_key_store_id": {
                      "default": null,
                      "description": "ID of the KMS Custom Key Store where the key will be stored instead of KMS (eg CloudHSM)."
                    },
                    "customer_master_key_spec": {
                      "default": null,
                      "description": "Specifies whether the key contains a symmetric key or an asymmetric key pair and the encryption algorithms or signing algorithms that the key supports. Valid values: `SYMMETRIC_DEFAULT`, `RSA_2048`, `RSA_3072`, `RSA_4096`, `HMAC_256`, `ECC_NIST_P256`, `ECC_NIST_P384`, `ECC_NIST_P521`, or `ECC_SECG_P256K1`. Defaults to `SYMMETRIC_DEFAULT`"
                    },
                    "deletion_window_in_days": {
                      "default": null,
                      "description": "The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the KMS key. If you specify a value, it must be between `7` and `30`, inclusive. If you do not specify a value, it defaults to `30`"
                    },
                    "description": {
                      "default": null,
                      "description": "The description of the key as viewed in AWS console"
                    },
                    "enable_default_policy": {
                      "default": true,
                      "description": "Specifies whether to enable the default key policy. Defaults to `true`"
                    },
                    "enable_key_rotation": {
                      "default": true,
                      "description": "Specifies whether key rotation is enabled. Defaults to `true`"
                    },
                    "enable_route53_dnssec": {
                      "default": false,
                      "description": "Determines whether the KMS policy used for Route53 DNSSEC signing is enabled"
                    },
                    "grants": {
                      "default": {},
                      "description": "A map of grant definitions to create"
                    },
                    "is_enabled": {
                      "default": null,
                      "description": "Specifies whether the key is enabled. Defaults to `true`"
                    },
                    "key_administrators": {
                      "default": [],
                      "description": "A list of IAM ARNs for [key administrators](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-default-allow-administrators)"
                    },
                    "key_asymmetric_public_encryption_users": {
                      "default": [],
                      "description": "A list of IAM ARNs for [key asymmetric public encryption users](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-users-crypto)"
                    },
                    "key_asymmetric_sign_verify_users": {
                      "default": [],
                      "description": "A list of IAM ARNs for [key asymmetric sign and verify users](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-users-crypto)"
                    },
                    "key_hmac_users": {
                      "default": [],
                      "description": "A list of IAM ARNs for [key HMAC users](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-users-crypto)"
                    },
                    "key_material_base64": {
                      "default": null,
                      "description": "Base64 encoded 256-bit symmetric encryption key material to import. The CMK is permanently associated with this key material. External key only"
                    },
                    "key_owners": {
                      "default": [],
                      "description": "A list of IAM ARNs for those who will have full key permissions (`kms:*`)"
                    },
                    "key_service_roles_for_autoscaling": {
                      "default": [],
                      "description": "A list of IAM ARNs for [AWSServiceRoleForAutoScaling roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/key-policy-requirements-EBS-encryption.html#policy-example-cmk-access)"
                    },
                    "key_service_users": {
                      "default": [],
                      "description": "A list of IAM ARNs for [key service users](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-service-integration)"
                    },
                    "key_statements": {
                      "default": {},
                      "description": "A map of IAM policy [statements](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document#statement) for custom permission usage"
                    },
                    "key_symmetric_encryption_users": {
                      "default": [],
                      "description": "A list of IAM ARNs for [key symmetric encryption users](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-users-crypto)"
                    },
                    "key_usage": {
                      "default": null,
                      "description": "Specifies the intended use of the key. Valid values: `ENCRYPT_DECRYPT` or `SIGN_VERIFY`. Defaults to `ENCRYPT_DECRYPT`"
                    },
                    "key_users": {
                      "default": [],
                      "description": "A list of IAM ARNs for [key users](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-default-allow-users)"
                    },
                    "multi_region": {
                      "default": false,
                      "description": "Indicates whether the KMS key is a multi-Region (`true`) or regional (`false`) key. Defaults to `false`"
                    },
                    "override_policy_documents": {
                      "default": [],
                      "description": "List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid`"
                    },
                    "policy": {
                      "default": null,
                      "description": "A valid policy JSON document. Although this is a key policy, not an IAM policy, an `aws_iam_policy_document`, in the form that designates a principal, can be used"
                    },
                    "primary_external_key_arn": {
                      "default": null,
                      "description": "The primary external key arn of a multi-region replica external key"
                    },
                    "primary_key_arn": {
                      "default": null,
                      "description": "The primary key arn of a multi-region replica key"
                    },
                    "route53_dnssec_sources": {
                      "default": [],
                      "description": "A list of maps containing `account_ids` and Route53 `hosted_zone_arn` that will be allowed to sign DNSSEC records"
                    },
                    "source_policy_documents": {
                      "default": [],
                      "description": "List of IAM policy documents that are merged together into the exported document. Statements must have unique `sid`s"
                    },
                    "tags": {
                      "default": {},
                      "description": "A map of tags to add to all resources"
                    },
                    "valid_to": {
                      "default": null,
                      "description": "Time at which the imported key material expires. When the key material expires, AWS KMS deletes the key material and the CMK becomes unusable. If not specified, key material does not expire"
                    }
                  }
                },
                "version_constraint": "2.1.0"
              },
              "self_managed_node_group": {
                "source": "./modules/self-managed-node-group",
                "expressions": {
                  "ami_id": {
                    "references": [
                      "each.value.ami_id",
                      "each.value",
                      "var.self_managed_node_group_defaults.ami_id",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "ami_type": {
                    "references": [
                      "each.value.ami_type",
                      "each.value",
                      "var.self_managed_node_group_defaults.ami_type",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "autoscaling_group_tags": {
                    "references": [
                      "each.value.autoscaling_group_tags",
                      "each.value",
                      "var.self_managed_node_group_defaults.autoscaling_group_tags",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "availability_zones": {
                    "references": [
                      "each.value.availability_zones",
                      "each.value",
                      "var.self_managed_node_group_defaults.availability_zones",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "block_device_mappings": {
                    "references": [
                      "each.value.block_device_mappings",
                      "each.value",
                      "var.self_managed_node_group_defaults.block_device_mappings",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "bootstrap_extra_args": {
                    "references": [
                      "each.value.bootstrap_extra_args",
                      "each.value",
                      "var.self_managed_node_group_defaults.bootstrap_extra_args",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "capacity_rebalance": {
                    "references": [
                      "each.value.capacity_rebalance",
                      "each.value",
                      "var.self_managed_node_group_defaults.capacity_rebalance",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "capacity_reservation_specification": {
                    "references": [
                      "each.value.capacity_reservation_specification",
                      "each.value",
                      "var.self_managed_node_group_defaults.capacity_reservation_specification",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "cloudinit_post_nodeadm": {
                    "references": [
                      "each.value.cloudinit_post_nodeadm",
                      "each.value",
                      "var.self_managed_node_group_defaults.cloudinit_post_nodeadm",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "cloudinit_pre_nodeadm": {
                    "references": [
                      "each.value.cloudinit_pre_nodeadm",
                      "each.value",
                      "var.self_managed_node_group_defaults.cloudinit_pre_nodeadm",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "cluster_auth_base64": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_certificate_authority_data\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cluster_endpoint": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_endpoint\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cluster_ip_family": {
                    "references": [
                      "var.cluster_ip_family"
                    ]
                  },
                  "cluster_name": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_name\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cluster_primary_security_group_id": {
                    "references": [
                      "each.value.attach_cluster_primary_security_group",
                      "each.value",
                      "var.self_managed_node_group_defaults.attach_cluster_primary_security_group",
                      "var.self_managed_node_group_defaults",
                      "aws_eks_cluster.this[0].vpc_config[0].cluster_security_group_id",
                      "aws_eks_cluster.this[0].vpc_config[0]",
                      "aws_eks_cluster.this[0].vpc_config",
                      "aws_eks_cluster.this[0]",
                      "aws_eks_cluster.this"
                    ]
                  },
                  "cluster_service_cidr": {
                    "references": [
                      "time_sleep.this[0].triggers[\"cluster_service_cidr\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "cluster_version": {
                    "references": [
                      "each.value.cluster_version",
                      "each.value",
                      "var.self_managed_node_group_defaults.cluster_version",
                      "var.self_managed_node_group_defaults",
                      "time_sleep.this[0].triggers[\"cluster_version\"]",
                      "time_sleep.this[0].triggers",
                      "time_sleep.this[0]",
                      "time_sleep.this"
                    ]
                  },
                  "context": {
                    "references": [
                      "each.value.context",
                      "each.value",
                      "var.self_managed_node_group_defaults.context",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "cpu_options": {
                    "references": [
                      "each.value.cpu_options",
                      "each.value",
                      "var.self_managed_node_group_defaults.cpu_options",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "create": {
                    "references": [
                      "each.value.create",
                      "each.value"
                    ]
                  },
                  "create_access_entry": {
                    "references": [
                      "each.value.create_access_entry",
                      "each.value",
                      "var.self_managed_node_group_defaults.create_access_entry",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "create_autoscaling_group": {
                    "references": [
                      "each.value.create_autoscaling_group",
                      "each.value",
                      "var.self_managed_node_group_defaults.create_autoscaling_group",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "create_iam_instance_profile": {
                    "references": [
                      "each.value.create_iam_instance_profile",
                      "each.value",
                      "var.self_managed_node_group_defaults.create_iam_instance_profile",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "create_iam_role_policy": {
                    "references": [
                      "each.value.create_iam_role_policy",
                      "each.value",
                      "var.self_managed_node_group_defaults.create_iam_role_policy",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "create_launch_template": {
                    "references": [
                      "each.value.create_launch_template",
                      "each.value",
                      "var.self_managed_node_group_defaults.create_launch_template",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "create_placement_group": {
                    "references": [
                      "each.value.create_placement_group",
                      "each.value",
                      "var.self_managed_node_group_defaults.create_placement_group",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "create_schedule": {
                    "references": [
                      "each.value.create_schedule",
                      "each.value",
                      "var.self_managed_node_group_defaults.create_schedule",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "credit_specification": {
                    "references": [
                      "each.value.credit_specification",
                      "each.value",
                      "var.self_managed_node_group_defaults.credit_specification",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "default_cooldown": {
                    "references": [
                      "each.value.default_cooldown",
                      "each.value",
                      "var.self_managed_node_group_defaults.default_cooldown",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "default_instance_warmup": {
                    "references": [
                      "each.value.default_instance_warmup",
                      "each.value",
                      "var.self_managed_node_group_defaults.default_instance_warmup",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "delete_timeout": {
                    "references": [
                      "each.value.delete_timeout",
                      "each.value",
                      "var.self_managed_node_group_defaults.delete_timeout",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "desired_size": {
                    "references": [
                      "each.value.desired_size",
                      "each.value",
                      "var.self_managed_node_group_defaults.desired_size",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "desired_size_type": {
                    "references": [
                      "each.value.desired_size_type",
                      "each.value",
                      "var.self_managed_node_group_defaults.desired_size_type",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "disable_api_termination": {
                    "references": [
                      "each.value.disable_api_termination",
                      "each.value",
                      "var.self_managed_node_group_defaults.disable_api_termination",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "ebs_optimized": {
                    "references": [
                      "each.value.ebs_optimized",
                      "each.value",
                      "var.self_managed_node_group_defaults.ebs_optimized",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "efa_indices": {
                    "references": [
                      "each.value.efa_indices",
                      "each.value",
                      "var.self_managed_node_group_defaults.efa_indices",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "elastic_gpu_specifications": {
                    "references": [
                      "each.value.elastic_gpu_specifications",
                      "each.value",
                      "var.self_managed_node_group_defaults.elastic_gpu_specifications",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "elastic_inference_accelerator": {
                    "references": [
                      "each.value.elastic_inference_accelerator",
                      "each.value",
                      "var.self_managed_node_group_defaults.elastic_inference_accelerator",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "enable_efa_only": {
                    "references": [
                      "each.value.enable_efa_only",
                      "each.value",
                      "var.self_managed_node_group_defaults.enable_efa_only",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "enable_efa_support": {
                    "references": [
                      "each.value.enable_efa_support",
                      "each.value",
                      "var.self_managed_node_group_defaults.enable_efa_support",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "enable_monitoring": {
                    "references": [
                      "each.value.enable_monitoring",
                      "each.value",
                      "var.self_managed_node_group_defaults.enable_monitoring",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "enabled_metrics": {
                    "references": [
                      "each.value.enabled_metrics",
                      "each.value",
                      "var.self_managed_node_group_defaults.enabled_metrics",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "enclave_options": {
                    "references": [
                      "each.value.enclave_options",
                      "each.value",
                      "var.self_managed_node_group_defaults.enclave_options",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "force_delete": {
                    "references": [
                      "each.value.force_delete",
                      "each.value",
                      "var.self_managed_node_group_defaults.force_delete",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "force_delete_warm_pool": {
                    "references": [
                      "each.value.force_delete_warm_pool",
                      "each.value",
                      "var.self_managed_node_group_defaults.force_delete_warm_pool",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "health_check_grace_period": {
                    "references": [
                      "each.value.health_check_grace_period",
                      "each.value",
                      "var.self_managed_node_group_defaults.health_check_grace_period",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "health_check_type": {
                    "references": [
                      "each.value.health_check_type",
                      "each.value",
                      "var.self_managed_node_group_defaults.health_check_type",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "hibernation_options": {
                    "references": [
                      "each.value.hibernation_options",
                      "each.value",
                      "var.self_managed_node_group_defaults.hibernation_options",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_instance_profile_arn": {
                    "references": [
                      "each.value.iam_instance_profile_arn",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_instance_profile_arn",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_additional_policies": {
                    "references": [
                      "each.value",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_arn": {
                    "references": [
                      "each.value.iam_role_arn",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_arn",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_attach_cni_policy": {
                    "references": [
                      "each.value.iam_role_attach_cni_policy",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_attach_cni_policy",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_description": {
                    "references": [
                      "each.value.iam_role_description",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_description",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_name": {
                    "references": [
                      "each.value.iam_role_name",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_name",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_path": {
                    "references": [
                      "each.value.iam_role_path",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_path",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_permissions_boundary": {
                    "references": [
                      "each.value.iam_role_permissions_boundary",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_permissions_boundary",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_policy_statements": {
                    "references": [
                      "each.value.iam_role_policy_statements",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_policy_statements",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_tags": {
                    "references": [
                      "each.value.iam_role_tags",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_tags",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "iam_role_use_name_prefix": {
                    "references": [
                      "each.value.iam_role_use_name_prefix",
                      "each.value",
                      "var.self_managed_node_group_defaults.iam_role_use_name_prefix",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "ignore_failed_scaling_activities": {
                    "references": [
                      "each.value.ignore_failed_scaling_activities",
                      "each.value",
                      "var.self_managed_node_group_defaults.ignore_failed_scaling_activities",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "initial_lifecycle_hooks": {
                    "references": [
                      "each.value.initial_lifecycle_hooks",
                      "each.value",
                      "var.self_managed_node_group_defaults.initial_lifecycle_hooks",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "instance_initiated_shutdown_behavior": {
                    "references": [
                      "each.value.instance_initiated_shutdown_behavior",
                      "each.value",
                      "var.self_managed_node_group_defaults.instance_initiated_shutdown_behavior",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "instance_maintenance_policy": {
                    "references": [
                      "each.value.instance_maintenance_policy",
                      "each.value",
                      "var.self_managed_node_group_defaults.instance_maintenance_policy",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "instance_market_options": {
                    "references": [
                      "each.value.instance_market_options",
                      "each.value",
                      "var.self_managed_node_group_defaults.instance_market_options",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "instance_refresh": {
                    "references": [
                      "each.value.instance_refresh",
                      "each.value",
                      "var.self_managed_node_group_defaults.instance_refresh",
                      "var.self_managed_node_group_defaults",
                      "local.default_instance_refresh"
                    ]
                  },
                  "instance_requirements": {
                    "references": [
                      "each.value.instance_requirements",
                      "each.value",
                      "var.self_managed_node_group_defaults.instance_requirements",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "instance_type": {
                    "references": [
                      "each.value.instance_type",
                      "each.value",
                      "var.self_managed_node_group_defaults.instance_type",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "kernel_id": {
                    "references": [
                      "each.value.kernel_id",
                      "each.value",
                      "var.self_managed_node_group_defaults.kernel_id",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "key_name": {
                    "references": [
                      "each.value.key_name",
                      "each.value",
                      "var.self_managed_node_group_defaults.key_name",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_default_version": {
                    "references": [
                      "each.value.launch_template_default_version",
                      "each.value",
                      "var.self_managed_node_group_defaults.launch_template_default_version",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_description": {
                    "references": [
                      "each.value.launch_template_description",
                      "each.value",
                      "var.self_managed_node_group_defaults.launch_template_description",
                      "var.self_managed_node_group_defaults",
                      "each.value.name",
                      "each.value",
                      "each.key"
                    ]
                  },
                  "launch_template_id": {
                    "references": [
                      "each.value.launch_template_id",
                      "each.value",
                      "var.self_managed_node_group_defaults.launch_template_id",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_name": {
                    "references": [
                      "each.value.launch_template_name",
                      "each.value",
                      "var.self_managed_node_group_defaults.launch_template_name",
                      "var.self_managed_node_group_defaults",
                      "each.key"
                    ]
                  },
                  "launch_template_tags": {
                    "references": [
                      "each.value.launch_template_tags",
                      "each.value",
                      "var.self_managed_node_group_defaults.launch_template_tags",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_use_name_prefix": {
                    "references": [
                      "each.value.launch_template_use_name_prefix",
                      "each.value",
                      "var.self_managed_node_group_defaults.launch_template_use_name_prefix",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "launch_template_version": {
                    "references": [
                      "each.value.launch_template_version",
                      "each.value",
                      "var.self_managed_node_group_defaults.launch_template_version",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "license_specifications": {
                    "references": [
                      "each.value.license_specifications",
                      "each.value",
                      "var.self_managed_node_group_defaults.license_specifications",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "maintenance_options": {
                    "references": [
                      "each.value.maintenance_options",
                      "each.value",
                      "var.self_managed_node_group_defaults.maintenance_options",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "max_instance_lifetime": {
                    "references": [
                      "each.value.max_instance_lifetime",
                      "each.value",
                      "var.self_managed_node_group_defaults.max_instance_lifetime",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "max_size": {
                    "references": [
                      "each.value.max_size",
                      "each.value",
                      "var.self_managed_node_group_defaults.max_size",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "metadata_options": {
                    "references": [
                      "each.value.metadata_options",
                      "each.value",
                      "var.self_managed_node_group_defaults.metadata_options",
                      "var.self_managed_node_group_defaults",
                      "local.metadata_options"
                    ]
                  },
                  "metrics_granularity": {
                    "references": [
                      "each.value.metrics_granularity",
                      "each.value",
                      "var.self_managed_node_group_defaults.metrics_granularity",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "min_elb_capacity": {
                    "references": [
                      "each.value.min_elb_capacity",
                      "each.value",
                      "var.self_managed_node_group_defaults.min_elb_capacity",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "min_size": {
                    "references": [
                      "each.value.min_size",
                      "each.value",
                      "var.self_managed_node_group_defaults.min_size",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "mixed_instances_policy": {
                    "references": [
                      "each.value.mixed_instances_policy",
                      "each.value",
                      "var.self_managed_node_group_defaults.mixed_instances_policy",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "name": {
                    "references": [
                      "each.value.name",
                      "each.value",
                      "each.key"
                    ]
                  },
                  "network_interfaces": {
                    "references": [
                      "each.value.network_interfaces",
                      "each.value",
                      "var.self_managed_node_group_defaults.network_interfaces",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "placement": {
                    "references": [
                      "each.value.placement",
                      "each.value",
                      "var.self_managed_node_group_defaults.placement",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "placement_group": {
                    "references": [
                      "each.value.placement_group",
                      "each.value",
                      "var.self_managed_node_group_defaults.placement_group",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "placement_group_az": {
                    "references": [
                      "each.value.placement_group_az",
                      "each.value",
                      "var.self_managed_node_group_defaults.placement_group_az",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "platform": {
                    "references": [
                      "each.value.platform",
                      "each.value",
                      "var.self_managed_node_group_defaults.platform",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "post_bootstrap_user_data": {
                    "references": [
                      "each.value.post_bootstrap_user_data",
                      "each.value",
                      "var.self_managed_node_group_defaults.post_bootstrap_user_data",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "pre_bootstrap_user_data": {
                    "references": [
                      "each.value.pre_bootstrap_user_data",
                      "each.value",
                      "var.self_managed_node_group_defaults.pre_bootstrap_user_data",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "private_dns_name_options": {
                    "references": [
                      "each.value.private_dns_name_options",
                      "each.value",
                      "var.self_managed_node_group_defaults.private_dns_name_options",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "protect_from_scale_in": {
                    "references": [
                      "each.value.protect_from_scale_in",
                      "each.value",
                      "var.self_managed_node_group_defaults.protect_from_scale_in",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "ram_disk_id": {
                    "references": [
                      "each.value.ram_disk_id",
                      "each.value",
                      "var.self_managed_node_group_defaults.ram_disk_id",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "schedules": {
                    "references": [
                      "each.value.schedules",
                      "each.value",
                      "var.self_managed_node_group_defaults.schedules",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "service_linked_role_arn": {
                    "references": [
                      "each.value.service_linked_role_arn",
                      "each.value",
                      "var.self_managed_node_group_defaults.service_linked_role_arn",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "each.value.subnet_ids",
                      "each.value",
                      "var.self_managed_node_group_defaults.subnet_ids",
                      "var.self_managed_node_group_defaults",
                      "var.subnet_ids"
                    ]
                  },
                  "suspended_processes": {
                    "references": [
                      "each.value.suspended_processes",
                      "each.value",
                      "var.self_managed_node_group_defaults.suspended_processes",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "tag_specifications": {
                    "references": [
                      "each.value.tag_specifications",
                      "each.value",
                      "var.self_managed_node_group_defaults.tag_specifications",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.tags",
                      "each.value.tags",
                      "each.value",
                      "var.self_managed_node_group_defaults.tags",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "target_group_arns": {
                    "references": [
                      "each.value.target_group_arns",
                      "each.value",
                      "var.self_managed_node_group_defaults.target_group_arns",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "termination_policies": {
                    "references": [
                      "each.value.termination_policies",
                      "each.value",
                      "var.self_managed_node_group_defaults.termination_policies",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "update_launch_template_default_version": {
                    "references": [
                      "each.value.update_launch_template_default_version",
                      "each.value",
                      "var.self_managed_node_group_defaults.update_launch_template_default_version",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "use_mixed_instances_policy": {
                    "references": [
                      "each.value.use_mixed_instances_policy",
                      "each.value",
                      "var.self_managed_node_group_defaults.use_mixed_instances_policy",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "use_name_prefix": {
                    "references": [
                      "each.value.use_name_prefix",
                      "each.value",
                      "var.self_managed_node_group_defaults.use_name_prefix",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "user_data_template_path": {
                    "references": [
                      "each.value.user_data_template_path",
                      "each.value",
                      "var.self_managed_node_group_defaults.user_data_template_path",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "vpc_security_group_ids": {
                    "references": [
                      "local.node_security_group_id",
                      "each.value.vpc_security_group_ids",
                      "each.value",
                      "var.self_managed_node_group_defaults.vpc_security_group_ids",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "wait_for_capacity_timeout": {
                    "references": [
                      "each.value.wait_for_capacity_timeout",
                      "each.value",
                      "var.self_managed_node_group_defaults.wait_for_capacity_timeout",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "wait_for_elb_capacity": {
                    "references": [
                      "each.value.wait_for_elb_capacity",
                      "each.value",
                      "var.self_managed_node_group_defaults.wait_for_elb_capacity",
                      "var.self_managed_node_group_defaults"
                    ]
                  },
                  "warm_pool": {
                    "references": [
                      "each.value.warm_pool",
                      "each.value",
                      "var.self_managed_node_group_defaults.warm_pool",
                      "var.self_managed_node_group_defaults"
                    ]
                  }
                },
                "for_each_expression": {
                  "references": [
                    "var.self_managed_node_groups",
                    "var.create"
                  ]
                },
                "module": {
                  "outputs": {
                    "access_entry_arn": {
                      "expression": {
                        "references": [
                          "aws_eks_access_entry.this[0].access_entry_arn",
                          "aws_eks_access_entry.this[0]",
                          "aws_eks_access_entry.this"
                        ]
                      },
                      "description": "Amazon Resource Name (ARN) of the Access Entry"
                    },
                    "autoscaling_group_arn": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].arn",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "The ARN for this autoscaling group"
                    },
                    "autoscaling_group_availability_zones": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].availability_zones",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "The availability zones of the autoscaling group"
                    },
                    "autoscaling_group_default_cooldown": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].default_cooldown",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "Time between a scaling activity and the succeeding scaling activity"
                    },
                    "autoscaling_group_desired_capacity": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].desired_capacity",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "The number of Amazon EC2 instances that should be running in the group"
                    },
                    "autoscaling_group_health_check_grace_period": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].health_check_grace_period",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "Time after instance comes into service before checking health"
                    },
                    "autoscaling_group_health_check_type": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].health_check_type",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "EC2 or ELB. Controls how health checking is done"
                    },
                    "autoscaling_group_id": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].id",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "The autoscaling group id"
                    },
                    "autoscaling_group_max_size": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].max_size",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "The maximum size of the autoscaling group"
                    },
                    "autoscaling_group_min_size": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].min_size",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "The minimum size of the autoscaling group"
                    },
                    "autoscaling_group_name": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].name",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "The autoscaling group name"
                    },
                    "autoscaling_group_schedule_arns": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_schedule.this"
                        ]
                      },
                      "description": "ARNs of autoscaling group schedules"
                    },
                    "autoscaling_group_vpc_zone_identifier": {
                      "expression": {
                        "references": [
                          "aws_autoscaling_group.this[0].vpc_zone_identifier",
                          "aws_autoscaling_group.this[0]",
                          "aws_autoscaling_group.this"
                        ]
                      },
                      "description": "The VPC zone identifier"
                    },
                    "iam_instance_profile_arn": {
                      "expression": {
                        "references": [
                          "aws_iam_instance_profile.this[0].arn",
                          "aws_iam_instance_profile.this[0]",
                          "aws_iam_instance_profile.this",
                          "var.iam_instance_profile_arn"
                        ]
                      },
                      "description": "ARN assigned by AWS to the instance profile"
                    },
                    "iam_instance_profile_id": {
                      "expression": {
                        "references": [
                          "aws_iam_instance_profile.this[0].id",
                          "aws_iam_instance_profile.this[0]",
                          "aws_iam_instance_profile.this"
                        ]
                      },
                      "description": "Instance profile's ID"
                    },
                    "iam_instance_profile_unique": {
                      "expression": {
                        "references": [
                          "aws_iam_instance_profile.this[0].unique_id",
                          "aws_iam_instance_profile.this[0]",
                          "aws_iam_instance_profile.this"
                        ]
                      },
                      "description": "Stable and unique string identifying the IAM instance profile"
                    },
                    "iam_role_arn": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].arn",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this"
                        ]
                      },
                      "description": "The Amazon Resource Name (ARN) specifying the IAM role"
                    },
                    "iam_role_name": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].name",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this"
                        ]
                      },
                      "description": "The name of the IAM role"
                    },
                    "iam_role_unique_id": {
                      "expression": {
                        "references": [
                          "aws_iam_role.this[0].unique_id",
                          "aws_iam_role.this[0]",
                          "aws_iam_role.this"
                        ]
                      },
                      "description": "Stable and unique string identifying the IAM role"
                    },
                    "image_id": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].image_id",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "ID of the image"
                    },
                    "launch_template_arn": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].arn",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "The ARN of the launch template"
                    },
                    "launch_template_id": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].id",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "The ID of the launch template"
                    },
                    "launch_template_latest_version": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].latest_version",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "The latest version of the launch template"
                    },
                    "launch_template_name": {
                      "expression": {
                        "references": [
                          "aws_launch_template.this[0].name",
                          "aws_launch_template.this[0]",
                          "aws_launch_template.this"
                        ]
                      },
                      "description": "The name of the launch template"
                    },
                    "platform": {
                      "expression": {
                        "references": [
                          "module.user_data.platform",
                          "module.user_data"
                        ]
                      },
                      "description": "[DEPRECATED - Will be removed in `v21.0`] Identifies the OS platform as `bottlerocket`, `linux` (AL2), `al2023`, or `windows`"
                    },
                    "user_data": {
                      "expression": {
                        "references": [
                          "module.user_data.user_data",
                          "module.user_data"
                        ]
                      },
                      "description": "Base64 encoded user data"
                    }
                  },
                  "resources": [
                    {
                      "address": "aws_autoscaling_group.this",
                      "mode": "managed",
                      "type": "aws_autoscaling_group",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "availability_zones": {
                          "references": [
                            "var.availability_zones"
                          ]
                        },
                        "capacity_rebalance": {
                          "references": [
                            "var.capacity_rebalance"
                          ]
                        },
                        "context": {
                          "references": [
                            "var.context"
                          ]
                        },
                        "default_cooldown": {
                          "references": [
                            "var.default_cooldown"
                          ]
                        },
                        "default_instance_warmup": {
                          "references": [
                            "var.default_instance_warmup"
                          ]
                        },
                        "desired_capacity": {
                          "references": [
                            "var.desired_size"
                          ]
                        },
                        "desired_capacity_type": {
                          "references": [
                            "var.desired_size_type"
                          ]
                        },
                        "enabled_metrics": {
                          "references": [
                            "var.enabled_metrics"
                          ]
                        },
                        "force_delete": {
                          "references": [
                            "var.force_delete"
                          ]
                        },
                        "force_delete_warm_pool": {
                          "references": [
                            "var.force_delete_warm_pool"
                          ]
                        },
                        "health_check_grace_period": {
                          "references": [
                            "var.health_check_grace_period"
                          ]
                        },
                        "health_check_type": {
                          "references": [
                            "var.health_check_type"
                          ]
                        },
                        "ignore_failed_scaling_activities": {
                          "references": [
                            "var.ignore_failed_scaling_activities"
                          ]
                        },
                        "max_instance_lifetime": {
                          "references": [
                            "var.max_instance_lifetime"
                          ]
                        },
                        "max_size": {
                          "references": [
                            "var.max_size"
                          ]
                        },
                        "metrics_granularity": {
                          "references": [
                            "var.metrics_granularity"
                          ]
                        },
                        "min_elb_capacity": {
                          "references": [
                            "var.min_elb_capacity"
                          ]
                        },
                        "min_size": {
                          "references": [
                            "var.min_size"
                          ]
                        },
                        "name": {
                          "references": [
                            "var.use_name_prefix",
                            "var.name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.use_name_prefix",
                            "var.name"
                          ]
                        },
                        "placement_group": {
                          "references": [
                            "var.placement_group"
                          ]
                        },
                        "protect_from_scale_in": {
                          "references": [
                            "var.protect_from_scale_in"
                          ]
                        },
                        "service_linked_role_arn": {
                          "references": [
                            "var.service_linked_role_arn"
                          ]
                        },
                        "suspended_processes": {
                          "references": [
                            "var.suspended_processes"
                          ]
                        },
                        "target_group_arns": {
                          "references": [
                            "var.target_group_arns"
                          ]
                        },
                        "termination_policies": {
                          "references": [
                            "var.termination_policies"
                          ]
                        },
                        "timeouts": {
                          "delete": {
                            "references": [
                              "var.delete_timeout"
                            ]
                          }
                        },
                        "vpc_zone_identifier": {
                          "references": [
                            "local.enable_efa_support",
                            "data.aws_subnets.placement_group[0].ids",
                            "data.aws_subnets.placement_group[0]",
                            "data.aws_subnets.placement_group",
                            "var.subnet_ids"
                          ]
                        },
                        "wait_for_capacity_timeout": {
                          "references": [
                            "var.wait_for_capacity_timeout"
                          ]
                        },
                        "wait_for_elb_capacity": {
                          "references": [
                            "var.wait_for_elb_capacity"
                          ]
                        }
                      },
                      "schema_version": 1,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.create_autoscaling_group"
                        ]
                      }
                    },
                    {
                      "address": "aws_autoscaling_schedule.this",
                      "mode": "managed",
                      "type": "aws_autoscaling_schedule",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "autoscaling_group_name": {
                          "references": [
                            "aws_autoscaling_group.this[0].name",
                            "aws_autoscaling_group.this[0]",
                            "aws_autoscaling_group.this"
                          ]
                        },
                        "desired_capacity": {
                          "references": [
                            "each.value.desired_size",
                            "each.value"
                          ]
                        },
                        "end_time": {
                          "references": [
                            "each.value.end_time",
                            "each.value"
                          ]
                        },
                        "max_size": {
                          "references": [
                            "each.value.max_size",
                            "each.value"
                          ]
                        },
                        "min_size": {
                          "references": [
                            "each.value.min_size",
                            "each.value"
                          ]
                        },
                        "recurrence": {
                          "references": [
                            "each.value.recurrence",
                            "each.value"
                          ]
                        },
                        "scheduled_action_name": {
                          "references": [
                            "each.key"
                          ]
                        },
                        "start_time": {
                          "references": [
                            "each.value.start_time",
                            "each.value"
                          ]
                        },
                        "time_zone": {
                          "references": [
                            "each.value.time_zone",
                            "each.value"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "var.schedules",
                          "var.create",
                          "var.create_schedule"
                        ]
                      }
                    },
                    {
                      "address": "aws_eks_access_entry.this",
                      "mode": "managed",
                      "type": "aws_eks_access_entry",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "cluster_name": {
                          "references": [
                            "var.cluster_name"
                          ]
                        },
                        "principal_arn": {
                          "references": [
                            "var.create_iam_instance_profile",
                            "aws_iam_role.this[0].arn",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this",
                            "var.iam_role_arn"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        },
                        "type": {
                          "references": [
                            "local.user_data_type"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.create_access_entry"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_instance_profile.this",
                      "mode": "managed",
                      "type": "aws_iam_instance_profile",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "path": {
                          "references": [
                            "var.iam_role_path"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].name",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags",
                            "var.iam_role_tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_instance_profile"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role.this",
                      "mode": "managed",
                      "type": "aws_iam_role",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "assume_role_policy": {
                          "references": [
                            "data.aws_iam_policy_document.assume_role_policy[0].json",
                            "data.aws_iam_policy_document.assume_role_policy[0]",
                            "data.aws_iam_policy_document.assume_role_policy"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.iam_role_description"
                          ]
                        },
                        "force_detach_policies": {
                          "constant_value": true
                        },
                        "name": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "path": {
                          "references": [
                            "var.iam_role_path"
                          ]
                        },
                        "permissions_boundary": {
                          "references": [
                            "var.iam_role_permissions_boundary"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags",
                            "var.iam_role_tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_instance_profile"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy.this",
                      "mode": "managed",
                      "type": "aws_iam_role_policy",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.iam_role_use_name_prefix",
                            "local.iam_role_name"
                          ]
                        },
                        "policy": {
                          "references": [
                            "data.aws_iam_policy_document.role[0].json",
                            "data.aws_iam_policy_document.role[0]",
                            "data.aws_iam_policy_document.role"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].id",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role_policy"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy_attachment.additional",
                      "mode": "managed",
                      "type": "aws_iam_role_policy_attachment",
                      "name": "additional",
                      "provider_config_key": "aws",
                      "expressions": {
                        "policy_arn": {
                          "references": [
                            "each.value"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].name",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "var.iam_role_additional_policies",
                          "local.create_iam_instance_profile"
                        ]
                      }
                    },
                    {
                      "address": "aws_iam_role_policy_attachment.this",
                      "mode": "managed",
                      "type": "aws_iam_role_policy_attachment",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "policy_arn": {
                          "references": [
                            "each.value"
                          ]
                        },
                        "role": {
                          "references": [
                            "aws_iam_role.this[0].name",
                            "aws_iam_role.this[0]",
                            "aws_iam_role.this"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "for_each_expression": {
                        "references": [
                          "local.iam_role_policy_prefix",
                          "local.iam_role_policy_prefix",
                          "local.ipv4_cni_policy",
                          "local.ipv6_cni_policy",
                          "local.create_iam_instance_profile"
                        ]
                      }
                    },
                    {
                      "address": "aws_launch_template.this",
                      "mode": "managed",
                      "type": "aws_launch_template",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "default_version": {
                          "references": [
                            "var.launch_template_default_version"
                          ]
                        },
                        "description": {
                          "references": [
                            "var.launch_template_description"
                          ]
                        },
                        "disable_api_termination": {
                          "references": [
                            "var.disable_api_termination"
                          ]
                        },
                        "ebs_optimized": {
                          "references": [
                            "var.ebs_optimized"
                          ]
                        },
                        "iam_instance_profile": [
                          {
                            "arn": {
                              "references": [
                                "var.create_iam_instance_profile",
                                "aws_iam_instance_profile.this[0].arn",
                                "aws_iam_instance_profile.this[0]",
                                "aws_iam_instance_profile.this",
                                "var.iam_instance_profile_arn"
                              ]
                            }
                          }
                        ],
                        "image_id": {
                          "references": [
                            "var.ami_id",
                            "data.aws_ssm_parameter.ami[0].value",
                            "data.aws_ssm_parameter.ami[0]",
                            "data.aws_ssm_parameter.ami"
                          ]
                        },
                        "instance_initiated_shutdown_behavior": {
                          "references": [
                            "var.instance_initiated_shutdown_behavior"
                          ]
                        },
                        "instance_type": {
                          "references": [
                            "var.instance_type"
                          ]
                        },
                        "kernel_id": {
                          "references": [
                            "var.kernel_id"
                          ]
                        },
                        "key_name": {
                          "references": [
                            "var.key_name"
                          ]
                        },
                        "name": {
                          "references": [
                            "var.launch_template_use_name_prefix",
                            "local.launch_template_name"
                          ]
                        },
                        "name_prefix": {
                          "references": [
                            "var.launch_template_use_name_prefix",
                            "local.launch_template_name"
                          ]
                        },
                        "ram_disk_id": {
                          "references": [
                            "var.ram_disk_id"
                          ]
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        },
                        "update_default_version": {
                          "references": [
                            "var.update_launch_template_default_version"
                          ]
                        },
                        "user_data": {
                          "references": [
                            "module.user_data.user_data",
                            "module.user_data"
                          ]
                        },
                        "vpc_security_group_ids": {
                          "references": [
                            "local.network_interfaces",
                            "local.security_group_ids"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.create_launch_template"
                        ]
                      },
                      "depends_on": [
                        "aws_iam_role_policy_attachment.this",
                        "aws_iam_role_policy_attachment.additional"
                      ]
                    },
                    {
                      "address": "aws_placement_group.this",
                      "mode": "managed",
                      "type": "aws_placement_group",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "var.cluster_name",
                            "var.name"
                          ]
                        },
                        "strategy": {
                          "constant_value": "cluster"
                        },
                        "tags": {
                          "references": [
                            "var.tags"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_placement_group"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_caller_identity.current",
                      "mode": "data",
                      "type": "aws_caller_identity",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0
                    },
                    {
                      "address": "data.aws_ec2_instance_type.this",
                      "mode": "data",
                      "type": "aws_ec2_instance_type",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "instance_type": {
                          "references": [
                            "var.instance_type"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create",
                          "var.enable_efa_support"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_ec2_instance_type_offerings.this",
                      "mode": "data",
                      "type": "aws_ec2_instance_type_offerings",
                      "name": "this",
                      "provider_config_key": "aws",
                      "expressions": {
                        "filter": [
                          {
                            "name": {
                              "constant_value": "instance-type"
                            },
                            "values": {
                              "references": [
                                "var.instance_type"
                              ]
                            }
                          }
                        ],
                        "location_type": {
                          "constant_value": "availability-zone-id"
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.enable_efa_support"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_iam_policy_document.assume_role_policy",
                      "mode": "data",
                      "type": "aws_iam_policy_document",
                      "name": "assume_role_policy",
                      "provider_config_key": "aws",
                      "expressions": {
                        "statement": [
                          {
                            "actions": {
                              "constant_value": [
                                "sts:AssumeRole"
                              ]
                            },
                            "principals": [
                              {
                                "identifiers": {
                                  "constant_value": [
                                    "ec2.amazonaws.com"
                                  ]
                                },
                                "type": {
                                  "constant_value": "Service"
                                }
                              }
                            ],
                            "sid": {
                              "constant_value": "EKSNodeAssumeRole"
                            }
                          }
                        ]
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_instance_profile"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_iam_policy_document.role",
                      "mode": "data",
                      "type": "aws_iam_policy_document",
                      "name": "role",
                      "provider_config_key": "aws",
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_iam_role_policy"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_partition.current",
                      "mode": "data",
                      "type": "aws_partition",
                      "name": "current",
                      "provider_config_key": "aws",
                      "schema_version": 0
                    },
                    {
                      "address": "data.aws_ssm_parameter.ami",
                      "mode": "data",
                      "type": "aws_ssm_parameter",
                      "name": "ami",
                      "provider_config_key": "aws",
                      "expressions": {
                        "name": {
                          "references": [
                            "local.ami_type_to_ssm_param",
                            "var.ami_type"
                          ]
                        }
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "var.create"
                        ]
                      }
                    },
                    {
                      "address": "data.aws_subnets.placement_group",
                      "mode": "data",
                      "type": "aws_subnets",
                      "name": "placement_group",
                      "provider_config_key": "aws",
                      "expressions": {
                        "filter": [
                          {
                            "name": {
                              "constant_value": "subnet-id"
                            },
                            "values": {
                              "references": [
                                "var.subnet_ids"
                              ]
                            }
                          }
                        ]
                      },
                      "schema_version": 0,
                      "count_expression": {
                        "references": [
                          "local.create_placement_group"
                        ]
                      }
                    }
                  ],
                  "module_calls": {
                    "user_data": {
                      "source": "../_user_data",
                      "expressions": {
                        "additional_cluster_dns_ips": {
                          "references": [
                            "var.additional_cluster_dns_ips"
                          ]
                        },
                        "ami_type": {
                          "references": [
                            "var.ami_type"
                          ]
                        },
                        "bootstrap_extra_args": {
                          "references": [
                            "var.bootstrap_extra_args"
                          ]
                        },
                        "cloudinit_post_nodeadm": {
                          "references": [
                            "var.cloudinit_post_nodeadm"
                          ]
                        },
                        "cloudinit_pre_nodeadm": {
                          "references": [
                            "var.cloudinit_pre_nodeadm"
                          ]
                        },
                        "cluster_auth_base64": {
                          "references": [
                            "var.cluster_auth_base64"
                          ]
                        },
                        "cluster_endpoint": {
                          "references": [
                            "var.cluster_endpoint"
                          ]
                        },
                        "cluster_ip_family": {
                          "references": [
                            "var.cluster_ip_family"
                          ]
                        },
                        "cluster_name": {
                          "references": [
                            "var.cluster_name"
                          ]
                        },
                        "cluster_service_cidr": {
                          "references": [
                            "var.cluster_service_cidr"
                          ]
                        },
                        "create": {
                          "references": [
                            "var.create"
                          ]
                        },
                        "enable_bootstrap_user_data": {
                          "constant_value": true
                        },
                        "is_eks_managed_node_group": {
                          "constant_value": false
                        },
                        "platform": {
                          "references": [
                            "local.user_data_type"
                          ]
                        },
                        "post_bootstrap_user_data": {
                          "references": [
                            "var.post_bootstrap_user_data"
                          ]
                        },
                        "pre_bootstrap_user_data": {
                          "references": [
                            "var.pre_bootstrap_user_data"
                          ]
                        },
                        "user_data_template_path": {
                          "references": [
                            "var.user_data_template_path"
                          ]
                        }
                      },
                      "module": {
                        "outputs": {
                          "platform": {
                            "expression": {
                              "references": [
                                "local.user_data_type"
                              ]
                            },
                            "description": "[DEPRECATED - Will be removed in `v21.0`] Identifies the OS platform as `bottlerocket`, `linux` (AL2), `al2023, or `windows`"
                          },
                          "user_data": {
                            "expression": {
                              "references": [
                                "local.user_data_type_to_rendered",
                                "local.user_data_type"
                              ]
                            },
                            "description": "Base64 encoded user data rendered for the provided inputs"
                          }
                        },
                        "resources": [
                          {
                            "address": "null_resource.validate_cluster_service_cidr",
                            "mode": "managed",
                            "type": "null_resource",
                            "name": "validate_cluster_service_cidr",
                            "provider_config_key": "module.eks.module.self_managed_node_group.module.user_data:null",
                            "schema_version": 0
                          },
                          {
                            "address": "data.cloudinit_config.al2023_eks_managed_node_group",
                            "mode": "data",
                            "type": "cloudinit_config",
                            "name": "al2023_eks_managed_node_group",
                            "provider_config_key": "module.eks.module.self_managed_node_group.module.user_data:cloudinit",
                            "expressions": {
                              "base64_encode": {
                                "constant_value": true
                              },
                              "boundary": {
                                "constant_value": "MIMEBOUNDARY"
                              },
                              "gzip": {
                                "constant_value": false
                              }
                            },
                            "schema_version": 0,
                            "count_expression": {
                              "references": [
                                "var.create",
                                "local.user_data_type",
                                "local.nodeadm_cloudinit"
                              ]
                            }
                          },
                          {
                            "address": "data.cloudinit_config.linux_eks_managed_node_group",
                            "mode": "data",
                            "type": "cloudinit_config",
                            "name": "linux_eks_managed_node_group",
                            "provider_config_key": "module.eks.module.self_managed_node_group.module.user_data:cloudinit",
                            "expressions": {
                              "base64_encode": {
                                "constant_value": true
                              },
                              "boundary": {
                                "constant_value": "//"
                              },
                              "gzip": {
                                "constant_value": false
                              },
                              "part": [
                                {
                                  "content": {
                                    "references": [
                                      "var.pre_bootstrap_user_data"
                                    ]
                                  },
                                  "content_type": {
                                    "constant_value": "text/x-shellscript"
                                  }
                                }
                              ]
                            },
                            "schema_version": 0,
                            "count_expression": {
                              "references": [
                                "var.create",
                                "local.user_data_type",
                                "var.is_eks_managed_node_group",
                                "var.enable_bootstrap_user_data",
                                "var.pre_bootstrap_user_data",
                                "var.user_data_template_path"
                              ]
                            }
                          }
                        ],
                        "variables": {
                          "additional_cluster_dns_ips": {
                            "default": [],
                            "description": "Additional DNS IP addresses to use for the cluster. Only used when `ami_type` = `BOTTLEROCKET_*`"
                          },
                          "ami_type": {
                            "default": null,
                            "description": "Type of Amazon Machine Image (AMI) associated with the EKS Node Group. See the [AWS documentation](https://docs.aws.amazon.com/eks/latest/APIReference/API_Nodegroup.html#AmazonEKS-Type-Nodegroup-amiType) for valid values"
                          },
                          "bootstrap_extra_args": {
                            "default": "",
                            "description": "Additional arguments passed to the bootstrap script. When `ami_type` = `BOTTLEROCKET_*`; these are additional [settings](https://github.com/bottlerocket-os/bottlerocket#settings) that are provided to the Bottlerocket user data"
                          },
                          "cloudinit_post_nodeadm": {
                            "default": [],
                            "description": "Array of cloud-init document parts that are created after the nodeadm document part"
                          },
                          "cloudinit_pre_nodeadm": {
                            "default": [],
                            "description": "Array of cloud-init document parts that are created before the nodeadm document part"
                          },
                          "cluster_auth_base64": {
                            "default": "",
                            "description": "Base64 encoded CA of associated EKS cluster"
                          },
                          "cluster_endpoint": {
                            "default": "",
                            "description": "Endpoint of associated EKS cluster"
                          },
                          "cluster_ip_family": {
                            "default": "ipv4",
                            "description": "The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`"
                          },
                          "cluster_name": {
                            "default": "",
                            "description": "Name of the EKS cluster"
                          },
                          "cluster_service_cidr": {
                            "default": "",
                            "description": "The CIDR block (IPv4 or IPv6) used by the cluster to assign Kubernetes service IP addresses. This is derived from the cluster itself"
                          },
                          "cluster_service_ipv4_cidr": {
                            "default": null,
                            "description": "[Deprecated] The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks"
                          },
                          "create": {
                            "default": true,
                            "description": "Determines whether to create user-data or not"
                          },
                          "enable_bootstrap_user_data": {
                            "default": false,
                            "description": "Determines whether the bootstrap configurations are populated within the user data template"
                          },
                          "is_eks_managed_node_group": {
                            "default": true,
                            "description": "Determines whether the user data is used on nodes in an EKS managed node group. Used to determine if user data will be appended or not"
                          },
                          "platform": {
                            "default": "linux",
                            "description": "[DEPRECATED - use `ami_type` instead. Will be removed in `v21.0`] Identifies the OS platform as `bottlerocket`, `linux` (AL2), `al2023`, or `windows`"
                          },
                          "post_bootstrap_user_data": {
                            "default": "",
                            "description": "User data that is appended to the user data script after of the EKS bootstrap script. Not used when `ami_type` = `BOTTLEROCKET_*`"
                          },
                          "pre_bootstrap_user_data": {
                            "default": "",
                            "description": "User data that is injected into the user data script ahead of the EKS bootstrap script. Not used when `ami_type` = `BOTTLEROCKET_*`"
                          },
                          "user_data_template_path": {
                            "default": "",
                            "description": "Path to a local, custom user data template file to use when rendering user data"
                          }
                        }
                      }
                    }
                  },
                  "variables": {
                    "additional_cluster_dns_ips": {
                      "default": [],
                      "description": "Additional DNS IP addresses to use for the cluster. Only used when `ami_type` = `BOTTLEROCKET_*`"
                    },
                    "ami_id": {
                      "default": "",
                      "description": "The AMI from which to launch the instance"
                    },
                    "ami_type": {
                      "default": "AL2_x86_64",
                      "description": "Type of Amazon Machine Image (AMI) associated with the node group. See the [AWS documentation](https://docs.aws.amazon.com/eks/latest/APIReference/API_Nodegroup.html#AmazonEKS-Type-Nodegroup-amiType) for valid values"
                    },
                    "autoscaling_group_tags": {
                      "default": {},
                      "description": "A map of additional tags to add to the autoscaling group created. Tags are applied to the autoscaling group only and are NOT propagated to instances"
                    },
                    "availability_zones": {
                      "default": null,
                      "description": "A list of one or more availability zones for the group. Used for EC2-Classic and default subnets when not specified with `subnet_ids` argument. Conflicts with `subnet_ids`"
                    },
                    "block_device_mappings": {
                      "default": {},
                      "description": "Specify volumes to attach to the instance besides the volumes specified by the AMI"
                    },
                    "bootstrap_extra_args": {
                      "default": "",
                      "description": "Additional arguments passed to the bootstrap script. When `ami_type` = `BOTTLEROCKET_*`; these are additional [settings](https://github.com/bottlerocket-os/bottlerocket#settings) that are provided to the Bottlerocket user data"
                    },
                    "capacity_rebalance": {
                      "default": null,
                      "description": "Indicates whether capacity rebalance is enabled"
                    },
                    "capacity_reservation_specification": {
                      "default": {},
                      "description": "Targeting for EC2 capacity reservations"
                    },
                    "cloudinit_post_nodeadm": {
                      "default": [],
                      "description": "Array of cloud-init document parts that are created after the nodeadm document part"
                    },
                    "cloudinit_pre_nodeadm": {
                      "default": [],
                      "description": "Array of cloud-init document parts that are created before the nodeadm document part"
                    },
                    "cluster_auth_base64": {
                      "default": "",
                      "description": "Base64 encoded CA of associated EKS cluster"
                    },
                    "cluster_endpoint": {
                      "default": "",
                      "description": "Endpoint of associated EKS cluster"
                    },
                    "cluster_ip_family": {
                      "default": "ipv4",
                      "description": "The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`"
                    },
                    "cluster_name": {
                      "default": "",
                      "description": "Name of associated EKS cluster"
                    },
                    "cluster_primary_security_group_id": {
                      "default": null,
                      "description": "The ID of the EKS cluster primary security group to associate with the instance(s). This is the security group that is automatically created by the EKS service"
                    },
                    "cluster_service_cidr": {
                      "default": "",
                      "description": "The CIDR block (IPv4 or IPv6) used by the cluster to assign Kubernetes service IP addresses. This is derived from the cluster itself"
                    },
                    "cluster_version": {
                      "default": null,
                      "description": "Kubernetes cluster version - used to lookup default AMI ID if one is not provided"
                    },
                    "context": {
                      "default": null,
                      "description": "Reserved"
                    },
                    "cpu_options": {
                      "default": {},
                      "description": "The CPU options for the instance"
                    },
                    "create": {
                      "default": true,
                      "description": "Determines whether to create self managed node group or not"
                    },
                    "create_access_entry": {
                      "default": true,
                      "description": "Determines whether an access entry is created for the IAM role used by the node group"
                    },
                    "create_autoscaling_group": {
                      "default": true,
                      "description": "Determines whether to create autoscaling group or not"
                    },
                    "create_iam_instance_profile": {
                      "default": true,
                      "description": "Determines whether an IAM instance profile is created or to use an existing IAM instance profile"
                    },
                    "create_iam_role_policy": {
                      "default": true,
                      "description": "Determines whether an IAM role policy is created or not"
                    },
                    "create_launch_template": {
                      "default": true,
                      "description": "Determines whether to create launch template or not"
                    },
                    "create_placement_group": {
                      "default": false,
                      "description": "Determines whether a placement group is created & used by the node group"
                    },
                    "create_schedule": {
                      "default": true,
                      "description": "Determines whether to create autoscaling group schedule or not"
                    },
                    "credit_specification": {
                      "default": {},
                      "description": "Customize the credit specification of the instance"
                    },
                    "default_cooldown": {
                      "default": null,
                      "description": "The amount of time, in seconds, after a scaling activity completes before another scaling activity can start"
                    },
                    "default_instance_warmup": {
                      "default": null,
                      "description": "Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data"
                    },
                    "delete_timeout": {
                      "default": null,
                      "description": "Delete timeout to wait for destroying autoscaling group"
                    },
                    "desired_size": {
                      "default": 1,
                      "description": "The number of Amazon EC2 instances that should be running in the autoscaling group"
                    },
                    "desired_size_type": {
                      "default": null,
                      "description": "The unit of measurement for the value specified for `desired_size`. Supported for attribute-based instance type selection only. Valid values: `units`, `vcpu`, `memory-mib`"
                    },
                    "disable_api_termination": {
                      "default": null,
                      "description": "If true, enables EC2 instance termination protection"
                    },
                    "ebs_optimized": {
                      "default": null,
                      "description": "If true, the launched EC2 instance will be EBS-optimized"
                    },
                    "efa_indices": {
                      "default": [
                        0
                      ],
                      "description": "The indices of the network interfaces that should be EFA-enabled. Only valid when `enable_efa_support` = `true`"
                    },
                    "elastic_gpu_specifications": {
                      "default": {},
                      "description": "The elastic GPU to attach to the instance"
                    },
                    "elastic_inference_accelerator": {
                      "default": {},
                      "description": "Configuration block containing an Elastic Inference Accelerator to attach to the instance"
                    },
                    "enable_efa_only": {
                      "default": false,
                      "description": "Determines whether to enable EFA (`false`, default) or EFA and EFA-only (`true`) network interfaces. Note: requires vpc-cni version `v1.18.4` or later"
                    },
                    "enable_efa_support": {
                      "default": false,
                      "description": "Determines whether to enable Elastic Fabric Adapter (EFA) support"
                    },
                    "enable_monitoring": {
                      "default": true,
                      "description": "Enables/disables detailed monitoring"
                    },
                    "enabled_metrics": {
                      "default": [],
                      "description": "A list of metrics to collect. The allowed values are `GroupDesiredCapacity`, `GroupInServiceCapacity`, `GroupPendingCapacity`, `GroupMinSize`, `GroupMaxSize`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupStandbyCapacity`, `GroupTerminatingCapacity`, `GroupTerminatingInstances`, `GroupTotalCapacity`, `GroupTotalInstances`"
                    },
                    "enclave_options": {
                      "default": {},
                      "description": "Enable Nitro Enclaves on launched instances"
                    },
                    "force_delete": {
                      "default": null,
                      "description": "Allows deleting the Auto Scaling Group without waiting for all instances in the pool to terminate. You can force an Auto Scaling Group to delete even if it's in the process of scaling a resource. Normally, Terraform drains all the instances before deleting the group. This bypasses that behavior and potentially leaves resources dangling"
                    },
                    "force_delete_warm_pool": {
                      "default": null,
                      "description": "Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate"
                    },
                    "health_check_grace_period": {
                      "default": null,
                      "description": "Time (in seconds) after instance comes into service before checking health"
                    },
                    "health_check_type": {
                      "default": null,
                      "description": "`EC2` or `ELB`. Controls how health checking is done"
                    },
                    "hibernation_options": {
                      "default": {},
                      "description": "The hibernation options for the instance"
                    },
                    "iam_instance_profile_arn": {
                      "default": null,
                      "description": "Amazon Resource Name (ARN) of an existing IAM instance profile that provides permissions for the node group. Required if `create_iam_instance_profile` = `false`"
                    },
                    "iam_role_additional_policies": {
                      "default": {},
                      "description": "Additional policies to be added to the IAM role"
                    },
                    "iam_role_arn": {
                      "default": null,
                      "description": "ARN of the IAM role used by the instance profile. Required when `create_access_entry = true` and `create_iam_instance_profile = false`"
                    },
                    "iam_role_attach_cni_policy": {
                      "default": true,
                      "description": "Whether to attach the `AmazonEKS_CNI_Policy`/`AmazonEKS_CNI_IPv6_Policy` IAM policy to the IAM IAM role. WARNING: If set `false` the permissions must be assigned to the `aws-node` DaemonSet pods via another method or nodes will not be able to join the cluster"
                    },
                    "iam_role_description": {
                      "default": null,
                      "description": "Description of the role"
                    },
                    "iam_role_name": {
                      "default": null,
                      "description": "Name to use on IAM role created"
                    },
                    "iam_role_path": {
                      "default": null,
                      "description": "IAM role path"
                    },
                    "iam_role_permissions_boundary": {
                      "default": null,
                      "description": "ARN of the policy that is used to set the permissions boundary for the IAM role"
                    },
                    "iam_role_policy_statements": {
                      "default": [],
                      "description": "A list of IAM policy [statements](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document#statement) - used for adding specific IAM permissions as needed"
                    },
                    "iam_role_tags": {
                      "default": {},
                      "description": "A map of additional tags to add to the IAM role created"
                    },
                    "iam_role_use_name_prefix": {
                      "default": true,
                      "description": "Determines whether cluster IAM role name (`iam_role_name`) is used as a prefix"
                    },
                    "ignore_failed_scaling_activities": {
                      "default": null,
                      "description": "Whether to ignore failed Auto Scaling scaling activities while waiting for capacity."
                    },
                    "initial_lifecycle_hooks": {
                      "default": [],
                      "description": "One or more Lifecycle Hooks to attach to the Auto Scaling Group before instances are launched. The syntax is exactly the same as the separate `aws_autoscaling_lifecycle_hook` resource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating a new Auto Scaling Group. For all other use-cases, please use `aws_autoscaling_lifecycle_hook` resource"
                    },
                    "instance_initiated_shutdown_behavior": {
                      "default": null,
                      "description": "Shutdown behavior for the instance. Can be `stop` or `terminate`. (Default: `stop`)"
                    },
                    "instance_maintenance_policy": {
                      "default": {},
                      "description": "If this block is configured, add a instance maintenance policy to the specified Auto Scaling group"
                    },
                    "instance_market_options": {
                      "default": {},
                      "description": "The market (purchasing) option for the instance"
                    },
                    "instance_refresh": {
                      "default": {
                        "preferences": {
                          "min_healthy_percentage": 66
                        },
                        "strategy": "Rolling"
                      },
                      "description": "If this block is configured, start an Instance Refresh when this Auto Scaling Group is updated"
                    },
                    "instance_requirements": {
                      "default": {},
                      "description": "The attribute requirements for the type of instance. If present then `instance_type` cannot be present"
                    },
                    "instance_type": {
                      "default": "",
                      "description": "The type of the instance to launch"
                    },
                    "kernel_id": {
                      "default": null,
                      "description": "The kernel ID"
                    },
                    "key_name": {
                      "default": null,
                      "description": "The key name that should be used for the instance"
                    },
                    "launch_template_default_version": {
                      "default": null,
                      "description": "Default Version of the launch template"
                    },
                    "launch_template_description": {
                      "default": null,
                      "description": "Description of the launch template"
                    },
                    "launch_template_id": {
                      "default": "",
                      "description": "The ID of an existing launch template to use. Required when `create_launch_template` = `false`"
                    },
                    "launch_template_name": {
                      "default": null,
                      "description": "Name of launch template to be created"
                    },
                    "launch_template_tags": {
                      "default": {},
                      "description": "A map of additional tags to add to the tag_specifications of launch template created"
                    },
                    "launch_template_use_name_prefix": {
                      "default": true,
                      "description": "Determines whether to use `launch_template_name` as is or create a unique name beginning with the `launch_template_name` as the prefix"
                    },
                    "launch_template_version": {
                      "default": null,
                      "description": "Launch template version. Can be version number, `$Latest`, or `$Default`"
                    },
                    "license_specifications": {
                      "default": {},
                      "description": "A map of license specifications to associate with"
                    },
                    "maintenance_options": {
                      "default": {},
                      "description": "The maintenance options for the instance"
                    },
                    "max_instance_lifetime": {
                      "default": null,
                      "description": "The maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 604800 and 31536000 seconds"
                    },
                    "max_size": {
                      "default": 3,
                      "description": "The maximum size of the autoscaling group"
                    },
                    "metadata_options": {
                      "default": {
                        "http_endpoint": "enabled",
                        "http_put_response_hop_limit": "2",
                        "http_tokens": "required"
                      },
                      "description": "Customize the metadata options for the instance"
                    },
                    "metrics_granularity": {
                      "default": null,
                      "description": "The granularity to associate with the metrics to collect. The only valid value is `1Minute`"
                    },
                    "min_elb_capacity": {
                      "default": null,
                      "description": "Setting this causes Terraform to wait for this number of instances to show up healthy in the ELB only on creation. Updates will not wait on ELB instance number changes"
                    },
                    "min_size": {
                      "default": 0,
                      "description": "The minimum size of the autoscaling group"
                    },
                    "mixed_instances_policy": {
                      "default": null,
                      "description": "Configuration block containing settings to define launch targets for Auto Scaling groups"
                    },
                    "name": {
                      "default": "",
                      "description": "Name of the Self managed Node Group"
                    },
                    "network_interfaces": {
                      "default": [],
                      "description": "Customize network interfaces to be attached at instance boot time"
                    },
                    "placement": {
                      "default": {},
                      "description": "The placement of the instance"
                    },
                    "placement_group": {
                      "default": null,
                      "description": "The name of the placement group into which you'll launch your instances, if any"
                    },
                    "placement_group_az": {
                      "default": null,
                      "description": "Availability zone where placement group is created (ex. `eu-west-1c`)"
                    },
                    "platform": {
                      "default": null,
                      "description": "[DEPRECATED - must use `ami_type` instead. Will be removed in `v21.0`]"
                    },
                    "post_bootstrap_user_data": {
                      "default": "",
                      "description": "User data that is appended to the user data script after of the EKS bootstrap script. Not used when `ami_type` = `BOTTLEROCKET_*`"
                    },
                    "pre_bootstrap_user_data": {
                      "default": "",
                      "description": "User data that is injected into the user data script ahead of the EKS bootstrap script. Not used when `ami_type` = `BOTTLEROCKET_*`"
                    },
                    "private_dns_name_options": {
                      "default": {},
                      "description": "The options for the instance hostname. The default values are inherited from the subnet"
                    },
                    "protect_from_scale_in": {
                      "default": false,
                      "description": "Allows setting instance protection. The autoscaling group will not select instances with this setting for termination during scale in events."
                    },
                    "ram_disk_id": {
                      "default": null,
                      "description": "The ID of the ram disk"
                    },
                    "schedules": {
                      "default": {},
                      "description": "Map of autoscaling group schedule to create"
                    },
                    "service_linked_role_arn": {
                      "default": null,
                      "description": "The ARN of the service-linked role that the ASG will use to call other AWS services"
                    },
                    "subnet_ids": {
                      "default": null,
                      "description": "A list of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availability_zones`"
                    },
                    "suspended_processes": {
                      "default": [],
                      "description": "A list of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`. Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly"
                    },
                    "tag_specifications": {
                      "default": [
                        "instance",
                        "volume",
                        "network-interface"
                      ],
                      "description": "The tags to apply to the resources during launch"
                    },
                    "tags": {
                      "default": {},
                      "description": "A map of tags to add to all resources"
                    },
                    "target_group_arns": {
                      "default": [],
                      "description": "A set of `aws_alb_target_group` ARNs, for use with Application or Network Load Balancing"
                    },
                    "termination_policies": {
                      "default": [],
                      "description": "A list of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`"
                    },
                    "update_launch_template_default_version": {
                      "default": true,
                      "description": "Whether to update Default Version each update. Conflicts with `launch_template_default_version`"
                    },
                    "use_mixed_instances_policy": {
                      "default": false,
                      "description": "Determines whether to use a mixed instances policy in the autoscaling group or not"
                    },
                    "use_name_prefix": {
                      "default": true,
                      "description": "Determines whether to use `name` as is or create a unique name beginning with the `name` as the prefix"
                    },
                    "user_data_template_path": {
                      "default": "",
                      "description": "Path to a local, custom user data template file to use when rendering user data"
                    },
                    "vpc_security_group_ids": {
                      "default": [],
                      "description": "A list of security group IDs to associate"
                    },
                    "wait_for_capacity_timeout": {
                      "default": null,
                      "description": "A maximum duration that Terraform should wait for ASG instances to be healthy before timing out. (See also Waiting for Capacity below.) Setting this to '0' causes Terraform to skip all Capacity Waiting behavior."
                    },
                    "wait_for_elb_capacity": {
                      "default": null,
                      "description": "Setting this will cause Terraform to wait for exactly this number of healthy instances in all attached load balancers on both create and update operations. Takes precedence over `min_elb_capacity` behavior."
                    },
                    "warm_pool": {
                      "default": {},
                      "description": "If this block is configured, add a Warm Pool to the specified Auto Scaling group"
                    }
                  }
                }
              }
            },
            "variables": {
              "access_entries": {
                "default": {},
                "description": "Map of access entries to add to the cluster"
              },
              "attach_cluster_encryption_policy": {
                "default": true,
                "description": "Indicates whether or not to attach an additional policy for the cluster IAM role to utilize the encryption key provided"
              },
              "authentication_mode": {
                "default": "API_AND_CONFIG_MAP",
                "description": "The authentication mode for the cluster. Valid values are `CONFIG_MAP`, `API` or `API_AND_CONFIG_MAP`"
              },
              "bootstrap_self_managed_addons": {
                "default": null,
                "description": "Indicates whether or not to bootstrap self-managed addons after the cluster has been created"
              },
              "cloudwatch_log_group_class": {
                "default": null,
                "description": "Specified the log class of the log group. Possible values are: `STANDARD` or `INFREQUENT_ACCESS`"
              },
              "cloudwatch_log_group_kms_key_id": {
                "default": null,
                "description": "If a KMS Key ARN is set, this key will be used to encrypt the corresponding log group. Please be sure that the KMS Key has an appropriate key policy (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html)"
              },
              "cloudwatch_log_group_retention_in_days": {
                "default": 90,
                "description": "Number of days to retain log events. Default retention - 90 days"
              },
              "cloudwatch_log_group_tags": {
                "default": {},
                "description": "A map of additional tags to add to the cloudwatch log group created"
              },
              "cluster_additional_security_group_ids": {
                "default": [],
                "description": "List of additional, externally created security group IDs to attach to the cluster control plane"
              },
              "cluster_addons": {
                "default": {},
                "description": "Map of cluster addon configurations to enable for the cluster. Addon name can be the map keys or set with `name`"
              },
              "cluster_addons_timeouts": {
                "default": {},
                "description": "Create, update, and delete timeout configurations for the cluster addons"
              },
              "cluster_compute_config": {
                "default": {},
                "description": "Configuration block for the cluster compute configuration"
              },
              "cluster_enabled_log_types": {
                "default": [
                  "audit",
                  "api",
                  "authenticator"
                ],
                "description": "A list of the desired control plane logs to enable. For more information, see Amazon EKS Control Plane Logging documentation (https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html)"
              },
              "cluster_encryption_config": {
                "default": {
                  "resources": [
                    "secrets"
                  ]
                },
                "description": "Configuration block with encryption configuration for the cluster. To disable secret encryption, set this value to `{}`"
              },
              "cluster_encryption_policy_description": {
                "default": "Cluster encryption policy to allow cluster role to utilize CMK provided",
                "description": "Description of the cluster encryption policy created"
              },
              "cluster_encryption_policy_name": {
                "default": null,
                "description": "Name to use on cluster encryption policy created"
              },
              "cluster_encryption_policy_path": {
                "default": null,
                "description": "Cluster encryption policy path"
              },
              "cluster_encryption_policy_tags": {
                "default": {},
                "description": "A map of additional tags to add to the cluster encryption policy created"
              },
              "cluster_encryption_policy_use_name_prefix": {
                "default": true,
                "description": "Determines whether cluster encryption policy name (`cluster_encryption_policy_name`) is used as a prefix"
              },
              "cluster_endpoint_private_access": {
                "default": true,
                "description": "Indicates whether or not the Amazon EKS private API server endpoint is enabled"
              },
              "cluster_endpoint_public_access": {
                "default": false,
                "description": "Indicates whether or not the Amazon EKS public API server endpoint is enabled"
              },
              "cluster_endpoint_public_access_cidrs": {
                "default": [
                  "0.0.0.0/0"
                ],
                "description": "List of CIDR blocks which can access the Amazon EKS public API server endpoint"
              },
              "cluster_force_update_version": {
                "default": null,
                "description": "Force version update by overriding upgrade-blocking readiness checks when updating a cluster"
              },
              "cluster_identity_providers": {
                "default": {},
                "description": "Map of cluster identity provider configurations to enable for the cluster. Note - this is different/separate from IRSA"
              },
              "cluster_ip_family": {
                "default": "ipv4",
                "description": "The IP family used to assign Kubernetes pod and service addresses. Valid values are `ipv4` (default) and `ipv6`. You can only specify an IP family when you create a cluster, changing this value will force a new cluster to be created"
              },
              "cluster_name": {
                "default": "",
                "description": "Name of the EKS cluster"
              },
              "cluster_remote_network_config": {
                "default": {},
                "description": "Configuration block for the cluster remote network configuration"
              },
              "cluster_security_group_additional_rules": {
                "default": {},
                "description": "List of additional security group rules to add to the cluster security group created. Set `source_node_security_group = true` inside rules to set the `node_security_group` as source"
              },
              "cluster_security_group_description": {
                "default": "EKS cluster security group",
                "description": "Description of the cluster security group created"
              },
              "cluster_security_group_id": {
                "default": "",
                "description": "Existing security group ID to be attached to the cluster"
              },
              "cluster_security_group_name": {
                "default": null,
                "description": "Name to use on cluster security group created"
              },
              "cluster_security_group_tags": {
                "default": {},
                "description": "A map of additional tags to add to the cluster security group created"
              },
              "cluster_security_group_use_name_prefix": {
                "default": true,
                "description": "Determines whether cluster security group name (`cluster_security_group_name`) is used as a prefix"
              },
              "cluster_service_ipv4_cidr": {
                "default": null,
                "description": "The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks"
              },
              "cluster_service_ipv6_cidr": {
                "default": null,
                "description": "The CIDR block to assign Kubernetes pod and service IP addresses from if `ipv6` was specified when the cluster was created. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster"
              },
              "cluster_tags": {
                "default": {},
                "description": "A map of additional tags to add to the cluster"
              },
              "cluster_timeouts": {
                "default": {},
                "description": "Create, update, and delete timeout configurations for the cluster"
              },
              "cluster_upgrade_policy": {
                "default": {},
                "description": "Configuration block for the cluster upgrade policy"
              },
              "cluster_version": {
                "default": null,
                "description": "Kubernetes `<major>.<minor>` version to use for the EKS cluster (i.e.: `1.27`)"
              },
              "cluster_zonal_shift_config": {
                "default": {},
                "description": "Configuration block for the cluster zonal shift"
              },
              "control_plane_subnet_ids": {
                "default": [],
                "description": "A list of subnet IDs where the EKS cluster control plane (ENIs) will be provisioned. Used for expanding the pool of subnets used by nodes/node groups without replacing the EKS control plane"
              },
              "create": {
                "default": true,
                "description": "Controls if resources should be created (affects nearly all resources)"
              },
              "create_cloudwatch_log_group": {
                "default": true,
                "description": "Determines whether a log group is created by this module for the cluster logs. If not, AWS will automatically create one if logging is enabled"
              },
              "create_cluster_primary_security_group_tags": {
                "default": true,
                "description": "Indicates whether or not to tag the cluster's primary security group. This security group is created by the EKS service, not the module, and therefore tagging is handled after cluster creation"
              },
              "create_cluster_security_group": {
                "default": true,
                "description": "Determines if a security group is created for the cluster. Note: the EKS service creates a primary security group for the cluster by default"
              },
              "create_cni_ipv6_iam_policy": {
                "default": false,
                "description": "Determines whether to create an [`AmazonEKS_CNI_IPv6_Policy`](https://docs.aws.amazon.com/eks/latest/userguide/cni-iam-role.html#cni-iam-role-create-ipv6-policy)"
              },
              "create_iam_role": {
                "default": true,
                "description": "Determines whether an IAM role is created for the cluster"
              },
              "create_kms_key": {
                "default": true,
                "description": "Controls if a KMS key for cluster encryption should be created"
              },
              "create_node_iam_role": {
                "default": true,
                "description": "Determines whether an EKS Auto node IAM role is created"
              },
              "create_node_security_group": {
                "default": true,
                "description": "Determines whether to create a security group for the node groups or use the existing `node_security_group_id`"
              },
              "custom_oidc_thumbprints": {
                "default": [],
                "description": "Additional list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s)"
              },
              "dataplane_wait_duration": {
                "default": "30s",
                "description": "Duration to wait after the EKS cluster has become active before creating the dataplane components (EKS managed node group(s), self-managed node group(s), Fargate profile(s))"
              },
              "eks_managed_node_group_defaults": {
                "default": {},
                "description": "Map of EKS managed node group default configurations"
              },
              "eks_managed_node_groups": {
                "default": {},
                "description": "Map of EKS managed node group definitions to create"
              },
              "enable_auto_mode_custom_tags": {
                "default": true,
                "description": "Determines whether to enable permissions for custom tags resources created by EKS Auto Mode"
              },
              "enable_cluster_creator_admin_permissions": {
                "default": false,
                "description": "Indicates whether or not to add the cluster creator (the identity used by Terraform) as an administrator via access entry"
              },
              "enable_efa_support": {
                "default": false,
                "description": "Determines whether to enable Elastic Fabric Adapter (EFA) support"
              },
              "enable_irsa": {
                "default": true,
                "description": "Determines whether to create an OpenID Connect Provider for EKS to enable IRSA"
              },
              "enable_kms_key_rotation": {
                "default": true,
                "description": "Specifies whether key rotation is enabled"
              },
              "enable_security_groups_for_pods": {
                "default": true,
                "description": "Determines whether to add the necessary IAM permission policy for security groups for pods"
              },
              "fargate_profile_defaults": {
                "default": {},
                "description": "Map of Fargate Profile default configurations"
              },
              "fargate_profiles": {
                "default": {},
                "description": "Map of Fargate Profile definitions to create"
              },
              "iam_role_additional_policies": {
                "default": {},
                "description": "Additional policies to be added to the IAM role"
              },
              "iam_role_arn": {
                "default": null,
                "description": "Existing IAM role ARN for the cluster. Required if `create_iam_role` is set to `false`"
              },
              "iam_role_description": {
                "default": null,
                "description": "Description of the role"
              },
              "iam_role_name": {
                "default": null,
                "description": "Name to use on IAM role created"
              },
              "iam_role_path": {
                "default": null,
                "description": "The IAM role path"
              },
              "iam_role_permissions_boundary": {
                "default": null,
                "description": "ARN of the policy that is used to set the permissions boundary for the IAM role"
              },
              "iam_role_tags": {
                "default": {},
                "description": "A map of additional tags to add to the IAM role created"
              },
              "iam_role_use_name_prefix": {
                "default": true,
                "description": "Determines whether the IAM role name (`iam_role_name`) is used as a prefix"
              },
              "include_oidc_root_ca_thumbprint": {
                "default": true,
                "description": "Determines whether to include the root CA thumbprint in the OpenID Connect (OIDC) identity provider's server certificate(s)"
              },
              "kms_key_administrators": {
                "default": [],
                "description": "A list of IAM ARNs for [key administrators](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-default-allow-administrators). If no value is provided, the current caller identity is used to ensure at least one key admin is available"
              },
              "kms_key_aliases": {
                "default": [],
                "description": "A list of aliases to create. Note - due to the use of `toset()`, values must be static strings and not computed values"
              },
              "kms_key_deletion_window_in_days": {
                "default": null,
                "description": "The waiting period, specified in number of days. After the waiting period ends, AWS KMS deletes the KMS key. If you specify a value, it must be between `7` and `30`, inclusive. If you do not specify a value, it defaults to `30`"
              },
              "kms_key_description": {
                "default": null,
                "description": "The description of the key as viewed in AWS console"
              },
              "kms_key_enable_default_policy": {
                "default": true,
                "description": "Specifies whether to enable the default key policy"
              },
              "kms_key_override_policy_documents": {
                "default": [],
                "description": "List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid`"
              },
              "kms_key_owners": {
                "default": [],
                "description": "A list of IAM ARNs for those who will have full key permissions (`kms:*`)"
              },
              "kms_key_service_users": {
                "default": [],
                "description": "A list of IAM ARNs for [key service users](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-service-integration)"
              },
              "kms_key_source_policy_documents": {
                "default": [],
                "description": "List of IAM policy documents that are merged together into the exported document. Statements must have unique `sid`s"
              },
              "kms_key_users": {
                "default": [],
                "description": "A list of IAM ARNs for [key users](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-default.html#key-policy-default-allow-users)"
              },
              "node_iam_role_additional_policies": {
                "default": {},
                "description": "Additional policies to be added to the EKS Auto node IAM role"
              },
              "node_iam_role_description": {
                "default": null,
                "description": "Description of the EKS Auto node IAM role"
              },
              "node_iam_role_name": {
                "default": null,
                "description": "Name to use on the EKS Auto node IAM role created"
              },
              "node_iam_role_path": {
                "default": null,
                "description": "The EKS Auto node IAM role path"
              },
              "node_iam_role_permissions_boundary": {
                "default": null,
                "description": "ARN of the policy that is used to set the permissions boundary for the EKS Auto node IAM role"
              },
              "node_iam_role_tags": {
                "default": {},
                "description": "A map of additional tags to add to the EKS Auto node IAM role created"
              },
              "node_iam_role_use_name_prefix": {
                "default": true,
                "description": "Determines whether the EKS Auto node IAM role name (`node_iam_role_name`) is used as a prefix"
              },
              "node_security_group_additional_rules": {
                "default": {},
                "description": "List of additional security group rules to add to the node security group created. Set `source_cluster_security_group = true` inside rules to set the `cluster_security_group` as source"
              },
              "node_security_group_description": {
                "default": "EKS node shared security group",
                "description": "Description of the node security group created"
              },
              "node_security_group_enable_recommended_rules": {
                "default": true,
                "description": "Determines whether to enable recommended security group rules for the node security group created. This includes node-to-node TCP ingress on ephemeral ports and allows all egress traffic"
              },
              "node_security_group_id": {
                "default": "",
                "description": "ID of an existing security group to attach to the node groups created"
              },
              "node_security_group_name": {
                "default": null,
                "description": "Name to use on node security group created"
              },
              "node_security_group_tags": {
                "default": {},
                "description": "A map of additional tags to add to the node security group created"
              },
              "node_security_group_use_name_prefix": {
                "default": true,
                "description": "Determines whether node security group name (`node_security_group_name`) is used as a prefix"
              },
              "openid_connect_audiences": {
                "default": [],
                "description": "List of OpenID Connect audience client IDs to add to the IRSA provider"
              },
              "outpost_config": {
                "default": {},
                "description": "Configuration for the AWS Outpost to provision the cluster on"
              },
              "prefix_separator": {
                "default": "-",
                "description": "The separator to use between the prefix and the generated timestamp for resource names"
              },
              "putin_khuylo": {
                "default": true,
                "description": "Do you agree that Putin doesn't respect Ukrainian sovereignty and territorial integrity? More info: https://en.wikipedia.org/wiki/Putin_khuylo!"
              },
              "self_managed_node_group_defaults": {
                "default": {},
                "description": "Map of self-managed node group default configurations"
              },
              "self_managed_node_groups": {
                "default": {},
                "description": "Map of self-managed node group definitions to create"
              },
              "subnet_ids": {
                "default": [],
                "description": "A list of subnet IDs where the nodes/node groups will be provisioned. If `control_plane_subnet_ids` is not provided, the EKS cluster control plane (ENIs) will be provisioned in these subnets"
              },
              "tags": {
                "default": {},
                "description": "A map of tags to add to all resources"
              },
              "vpc_id": {
                "default": null,
                "description": "ID of the VPC where the cluster security group will be provisioned"
              }
            }
          },
          "version_constraint": "~> 20.24"
        }
      },
      "variables": {
        "eks_cluster_version": {
          "default": "1.32",
          "description": "EKS Cluster version"
        },
        "name": {
          "default": "automode-cluster",
          "description": "Name of the EKS Cluster"
        },
        "private_subnet_ids": {
          "default": [
            "subnet-0ecf50090bf3a250d",
            "subnet-01db7a8f6e628d179",
            "subnet-0f09f7ba30b6d5ea6"
          ],
          "description": "List of private subnet IDs in the existing VPC"
        },
        "region": {
          "default": "us-west-2",
          "description": "region"
        },
        "vpc_id": {
          "default": "vpc-06640a57cdad7c6ee",
          "description": "ID of the existing VPC"
        }
      }
    }
  },
  "relevant_attributes": [
    {
      "resource": "module.eks.module.self_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "image_id"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "health_check_type"
      ]
    },
    {
      "resource": "module.eks.aws_iam_role.this[0]",
      "attribute": [
        "unique_id"
      ]
    },
    {
      "resource": "module.eks.aws_iam_role.eks_auto[0]",
      "attribute": [
        "unique_id"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_key.this[0]",
      "attribute": [
        "policy"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_eks_node_group.this[0]",
      "attribute": [
        "taint"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_eks_access_entry.this[0]",
      "attribute": [
        "access_entry_arn"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "default_cooldown"
      ]
    },
    {
      "resource": "module.eks.data.aws_iam_policy_document.assume_role_policy[0]",
      "attribute": [
        "json"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_key.this[0]",
      "attribute": [
        "key_id"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "kubernetes_network_config",
        0,
        "ip_family"
      ]
    },
    {
      "resource": "module.eks.module.fargate_profile.aws_iam_role.this[0]",
      "attribute": [
        "unique_id"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_autoscaling_schedule.this",
      "attribute": []
    },
    {
      "resource": "module.eks.module.self_managed_node_group.data.aws_ssm_parameter.ami[0]",
      "attribute": [
        "value"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.module.user_data.data.cloudinit_config.al2023_eks_managed_node_group[0]",
      "attribute": [
        "rendered"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_eks_node_group.this[0]",
      "attribute": [
        "resources",
        0,
        "autoscaling_groups",
        0,
        "name"
      ]
    },
    {
      "resource": "module.eks.aws_cloudwatch_log_group.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_replica_external_key.this[0]",
      "attribute": [
        "policy"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "kubernetes_network_config",
        0,
        "service_ipv6_cidr"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "cluster_id"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "latest_version"
      ]
    },
    {
      "resource": "module.eks.aws_iam_role.eks_auto[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.fargate_profile.aws_iam_role.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_eks_node_group.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.aws_iam_openid_connect_provider.oidc_provider[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_schedule.this",
      "attribute": []
    },
    {
      "resource": "module.eks.time_sleep.this[0]",
      "attribute": [
        "triggers",
        "cluster_certificate_authority_data"
      ]
    },
    {
      "resource": "module.eks.time_sleep.this[0]",
      "attribute": [
        "triggers",
        "cluster_endpoint"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "certificate_authority",
        0,
        "data"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_alias.this",
      "attribute": []
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "default_version"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_iam_role.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_iam_instance_profile.this[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.module.user_data.data.cloudinit_config.linux_eks_managed_node_group[0]",
      "attribute": [
        "rendered"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_external_key.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_replica_external_key.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.fargate_profile.aws_eks_fargate_profile.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.time_sleep.this[0]",
      "attribute": [
        "triggers",
        "cluster_version"
      ]
    },
    {
      "resource": "module.eks.aws_iam_policy.custom[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.fargate_profile.aws_eks_fargate_profile.this[0]",
      "attribute": [
        "pod_execution_role_arn"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "availability_zones"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.aws_iam_policy.cluster_encryption[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_replica_key.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "min_size"
      ]
    },
    {
      "resource": "module.eks.time_sleep.this[0]",
      "attribute": [
        "triggers",
        "cluster_name"
      ]
    },
    {
      "resource": "module.eks.data.aws_iam_policy_document.node_assume_role_policy[0]",
      "attribute": [
        "json"
      ]
    },
    {
      "resource": "module.eks.aws_security_group.node[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.aws_security_group.cluster[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.aws_eks_addon.this",
      "attribute": []
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_eks_node_group.this[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.module.kms.data.aws_caller_identity.current[0]",
      "attribute": [
        "account_id"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "max_size"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.data.aws_subnets.placement_group[0]",
      "attribute": [
        "ids"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.data.tls_certificate.this[0]",
      "attribute": [
        "certificates",
        0,
        "sha1_fingerprint"
      ]
    },
    {
      "resource": "module.eks.aws_eks_access_entry.this",
      "attribute": []
    },
    {
      "resource": "module.eks.aws_eks_access_policy_association.this",
      "attribute": []
    },
    {
      "resource": "module.eks.aws_eks_addon.before_compute",
      "attribute": []
    },
    {
      "resource": "module.eks.aws_security_group.cluster[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.data.aws_eks_addon_version.this",
      "attribute": []
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_iam_instance_profile.this[0]",
      "attribute": [
        "unique_id"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.aws_security_group.node[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.aws_eks_identity_provider_config.this",
      "attribute": []
    },
    {
      "resource": "module.eks.module.kms.data.aws_partition.current[0]",
      "attribute": [
        "dns_suffix"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_iam_role.this[0]",
      "attribute": [
        "unique_id"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.aws_cloudwatch_log_group.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.data.aws_subnets.placement_group[0]",
      "attribute": [
        "ids"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_iam_role.this[0]",
      "attribute": [
        "unique_id"
      ]
    },
    {
      "resource": "module.eks.data.aws_iam_policy_document.custom[0]",
      "attribute": [
        "json"
      ]
    },
    {
      "resource": "module.eks.module.kms.data.aws_partition.current[0]",
      "attribute": [
        "partition"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_eks_node_group.this[0]",
      "attribute": [
        "resources"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.data.aws_ssm_parameter.ami[0]",
      "attribute": [
        "value"
      ]
    },
    {
      "resource": "module.eks.time_sleep.this[0]",
      "attribute": [
        "triggers",
        "cluster_service_cidr"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "platform_version"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "status"
      ]
    },
    {
      "resource": "module.eks.module.fargate_profile.aws_eks_fargate_profile.this[0]",
      "attribute": [
        "status"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_eks_node_group.this[0]",
      "attribute": [
        "status"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_replica_external_key.this[0]",
      "attribute": [
        "key_id"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_grant.this",
      "attribute": []
    },
    {
      "resource": "module.eks.module.kms.aws_kms_replica_key.this[0]",
      "attribute": [
        "key_id"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.fargate_profile.aws_eks_fargate_profile.this[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_iam_role.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.aws_iam_role.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "kubernetes_network_config",
        0,
        "service_ipv4_cidr"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "kubernetes_network_config",
        0
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_iam_role.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_iam_role.this[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_external_key.this[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "id"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_launch_template.this[0]",
      "attribute": [
        "latest_version"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "identity",
        0,
        "oidc",
        0,
        "issuer"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "endpoint"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_key.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.data.aws_iam_session_context.current[0]",
      "attribute": [
        "issuer_arn"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "vpc_zone_identifier"
      ]
    },
    {
      "resource": "module.eks.module.kms.data.aws_iam_policy_document.this[0]",
      "attribute": [
        "json"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_external_key.this[0]",
      "attribute": [
        "policy"
      ]
    },
    {
      "resource": "module.eks.module.eks_managed_node_group.aws_eks_node_group.this[0]",
      "attribute": [
        "labels"
      ]
    },
    {
      "resource": "module.eks.module.fargate_profile.aws_iam_role.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.aws_iam_role.eks_auto[0]",
      "attribute": [
        "name"
      ]
    },
    {
      "resource": "module.eks.data.aws_partition.current[0]",
      "attribute": [
        "partition"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_iam_instance_profile.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.aws_iam_role.this[0]",
      "attribute": [
        "arn"
      ]
    },
    {
      "resource": "module.eks.module.kms.aws_kms_replica_key.this[0]",
      "attribute": [
        "policy"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "desired_capacity"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "vpc_config",
        0,
        "cluster_security_group_id"
      ]
    },
    {
      "resource": "module.eks.aws_eks_cluster.this[0]",
      "attribute": [
        "version"
      ]
    },
    {
      "resource": "module.eks.module.self_managed_node_group.aws_autoscaling_group.this[0]",
      "attribute": [
        "health_check_grace_period"
      ]
    }
  ],
  "checks": [
    {
      "address": {
        "kind": "resource",
        "mode": "managed",
        "module": "module.eks.module.eks_managed_node_group.module.user_data",
        "name": "validate_cluster_service_cidr",
        "to_display": "module.eks.module.eks_managed_node_group.module.user_data.null_resource.validate_cluster_service_cidr",
        "type": "null_resource"
      },
      "status": "pass"
    },
    {
      "address": {
        "kind": "resource",
        "mode": "managed",
        "module": "module.eks.module.self_managed_node_group.module.user_data",
        "name": "validate_cluster_service_cidr",
        "to_display": "module.eks.module.self_managed_node_group.module.user_data.null_resource.validate_cluster_service_cidr",
        "type": "null_resource"
      },
      "status": "pass"
    }
  ],
  "timestamp": "2025-05-26T22:24:29Z"
}
